
General_Peripheral.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000030d6  0000314a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002dcc  00000000  00000000  00003264  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001419  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000240  00000000  00000000  00007449  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000029b  00000000  00000000  00007689  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b83  00000000  00000000  00007924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000181b  00000000  00000000  0000a4a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169d  00000000  00000000  0000bcc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  0000d360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  0000d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e88  00000000  00000000  0000d93f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e7c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <main>
      7a:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 05 	call	0xae2	; 0xae2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 3d 03 	call	0x67a	; 0x67a <__subsf3>
      ae:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <__fixunssfdi>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__>
      e6:	7b 01       	movw	r14, r22
      e8:	8c 01       	movw	r16, r24
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	40 e8       	ldi	r20, 0x80	; 128
      f0:	5f e3       	ldi	r21, 0x3F	; 63
      f2:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
      f6:	88 23       	and	r24, r24
      f8:	4c f4       	brge	.+18     	; 0x10c <__fixunssfdi+0x32>
      fa:	aa 24       	eor	r10, r10
      fc:	bb 24       	eor	r11, r11
      fe:	cc 24       	eor	r12, r12
     100:	dd 24       	eor	r13, r13
     102:	ee 24       	eor	r14, r14
     104:	ff 24       	eor	r15, r15
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	10 e0       	ldi	r17, 0x00	; 0
     10a:	86 c0       	rjmp	.+268    	; 0x218 <__fixunssfdi+0x13e>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	40 e8       	ldi	r20, 0x80	; 128
     116:	5f e4       	ldi	r21, 0x4F	; 79
     118:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
     11c:	88 23       	and	r24, r24
     11e:	54 f4       	brge	.+20     	; 0x134 <__fixunssfdi+0x5a>
     120:	c8 01       	movw	r24, r16
     122:	b7 01       	movw	r22, r14
     124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     128:	5b 01       	movw	r10, r22
     12a:	6c 01       	movw	r12, r24
     12c:	ee 24       	eor	r14, r14
     12e:	ff 24       	eor	r15, r15
     130:	87 01       	movw	r16, r14
     132:	72 c0       	rjmp	.+228    	; 0x218 <__fixunssfdi+0x13e>
     134:	c8 01       	movw	r24, r16
     136:	b7 01       	movw	r22, r14
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e8       	ldi	r20, 0x80	; 128
     13e:	5f e5       	ldi	r21, 0x5F	; 95
     140:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
     144:	87 fd       	sbrc	r24, 7
     146:	0f c0       	rjmp	.+30     	; 0x166 <__fixunssfdi+0x8c>
     148:	aa 24       	eor	r10, r10
     14a:	aa 94       	dec	r10
     14c:	bb 24       	eor	r11, r11
     14e:	ba 94       	dec	r11
     150:	cc 24       	eor	r12, r12
     152:	ca 94       	dec	r12
     154:	dd 24       	eor	r13, r13
     156:	da 94       	dec	r13
     158:	ee 24       	eor	r14, r14
     15a:	ea 94       	dec	r14
     15c:	ff 24       	eor	r15, r15
     15e:	fa 94       	dec	r15
     160:	0f ef       	ldi	r16, 0xFF	; 255
     162:	1f ef       	ldi	r17, 0xFF	; 255
     164:	59 c0       	rjmp	.+178    	; 0x218 <__fixunssfdi+0x13e>
     166:	c8 01       	movw	r24, r16
     168:	b7 01       	movw	r22, r14
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e8       	ldi	r20, 0x80	; 128
     170:	5f e2       	ldi	r21, 0x2F	; 47
     172:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
     176:	7b 01       	movw	r14, r22
     178:	8c 01       	movw	r16, r24
     17a:	22 24       	eor	r2, r2
     17c:	33 24       	eor	r3, r3
     17e:	21 01       	movw	r4, r2
     180:	90 e1       	ldi	r25, 0x10	; 16
     182:	a9 2e       	mov	r10, r25
     184:	b1 2c       	mov	r11, r1
     186:	c1 2c       	mov	r12, r1
     188:	d1 2c       	mov	r13, r1
     18a:	c0 e0       	ldi	r28, 0x00	; 0
     18c:	d0 e0       	ldi	r29, 0x00	; 0
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0a 2c       	mov	r0, r10
     198:	04 c0       	rjmp	.+8      	; 0x1a2 <__fixunssfdi+0xc8>
     19a:	66 0f       	add	r22, r22
     19c:	77 1f       	adc	r23, r23
     19e:	88 1f       	adc	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	0a 94       	dec	r0
     1a4:	d2 f7       	brpl	.-12     	; 0x19a <__fixunssfdi+0xc0>
     1a6:	0e 94 83 06 	call	0xd06	; 0xd06 <__floatunsisf>
     1aa:	3b 01       	movw	r6, r22
     1ac:	4c 01       	movw	r8, r24
     1ae:	c8 01       	movw	r24, r16
     1b0:	b7 01       	movw	r22, r14
     1b2:	a4 01       	movw	r20, r8
     1b4:	93 01       	movw	r18, r6
     1b6:	0e 94 71 05 	call	0xae2	; 0xae2 <__gesf2>
     1ba:	88 23       	and	r24, r24
     1bc:	64 f0       	brlt	.+24     	; 0x1d6 <__fixunssfdi+0xfc>
     1be:	2a 28       	or	r2, r10
     1c0:	3b 28       	or	r3, r11
     1c2:	4c 28       	or	r4, r12
     1c4:	5d 28       	or	r5, r13
     1c6:	c8 01       	movw	r24, r16
     1c8:	b7 01       	movw	r22, r14
     1ca:	a4 01       	movw	r20, r8
     1cc:	93 01       	movw	r18, r6
     1ce:	0e 94 95 04 	call	0x92a	; 0x92a <__divsf3>
     1d2:	7b 01       	movw	r14, r22
     1d4:	8c 01       	movw	r16, r24
     1d6:	d6 94       	lsr	r13
     1d8:	c7 94       	ror	r12
     1da:	b7 94       	ror	r11
     1dc:	a7 94       	ror	r10
     1de:	21 96       	adiw	r28, 0x01	; 1
     1e0:	c5 30       	cpi	r28, 0x05	; 5
     1e2:	d1 05       	cpc	r29, r1
     1e4:	a1 f6       	brne	.-88     	; 0x18e <__fixunssfdi+0xb4>
     1e6:	c8 01       	movw	r24, r16
     1e8:	b7 01       	movw	r22, r14
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	40 e8       	ldi	r20, 0x80	; 128
     1f0:	5f e4       	ldi	r21, 0x4F	; 79
     1f2:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
     1f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     1fa:	5b 01       	movw	r10, r22
     1fc:	6c 01       	movw	r12, r24
     1fe:	9b 01       	movw	r18, r22
     200:	a6 01       	movw	r20, r12
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	02 2d       	mov	r16, r2
     20c:	0e 94 7b 07 	call	0xef6	; 0xef6 <__ashldi3>
     210:	59 01       	movw	r10, r18
     212:	6a 01       	movw	r12, r20
     214:	7b 01       	movw	r14, r22
     216:	8c 01       	movw	r16, r24
     218:	95 01       	movw	r18, r10
     21a:	a6 01       	movw	r20, r12
     21c:	b7 01       	movw	r22, r14
     21e:	c8 01       	movw	r24, r16
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	e2 e1       	ldi	r30, 0x12	; 18
     226:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__>

0000022a <__floatundisf>:
     22a:	a2 e0       	ldi	r26, 0x02	; 2
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	eb e1       	ldi	r30, 0x1B	; 27
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__>
     236:	12 2f       	mov	r17, r18
     238:	b3 2e       	mov	r11, r19
     23a:	a4 2e       	mov	r10, r20
     23c:	95 2e       	mov	r9, r21
     23e:	86 2e       	mov	r8, r22
     240:	37 2e       	mov	r3, r23
     242:	28 2e       	mov	r2, r24
     244:	9a 83       	std	Y+2, r25	; 0x02
     246:	c2 2e       	mov	r12, r18
     248:	d3 2e       	mov	r13, r19
     24a:	e4 2e       	mov	r14, r20
     24c:	f5 2e       	mov	r15, r21
     24e:	a7 01       	movw	r20, r14
     250:	96 01       	movw	r18, r12
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	21 17       	cp	r18, r17
     25c:	a1 f4       	brne	.+40     	; 0x286 <__floatundisf+0x5c>
     25e:	3b 15       	cp	r19, r11
     260:	91 f4       	brne	.+36     	; 0x286 <__floatundisf+0x5c>
     262:	4a 15       	cp	r20, r10
     264:	81 f4       	brne	.+32     	; 0x286 <__floatundisf+0x5c>
     266:	59 15       	cp	r21, r9
     268:	71 f4       	brne	.+28     	; 0x286 <__floatundisf+0x5c>
     26a:	68 15       	cp	r22, r8
     26c:	61 f4       	brne	.+24     	; 0x286 <__floatundisf+0x5c>
     26e:	73 15       	cp	r23, r3
     270:	51 f4       	brne	.+20     	; 0x286 <__floatundisf+0x5c>
     272:	82 15       	cp	r24, r2
     274:	41 f4       	brne	.+16     	; 0x286 <__floatundisf+0x5c>
     276:	aa 81       	ldd	r26, Y+2	; 0x02
     278:	9a 17       	cp	r25, r26
     27a:	29 f4       	brne	.+10     	; 0x286 <__floatundisf+0x5c>
     27c:	c7 01       	movw	r24, r14
     27e:	b6 01       	movw	r22, r12
     280:	0e 94 83 06 	call	0xd06	; 0xd06 <__floatunsisf>
     284:	aa c0       	rjmp	.+340    	; 0x3da <__floatundisf+0x1b0>
     286:	21 2f       	mov	r18, r17
     288:	3b 2d       	mov	r19, r11
     28a:	4a 2d       	mov	r20, r10
     28c:	59 2d       	mov	r21, r9
     28e:	68 2d       	mov	r22, r8
     290:	73 2d       	mov	r23, r3
     292:	82 2d       	mov	r24, r2
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	00 e2       	ldi	r16, 0x20	; 32
     298:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__lshrdi3>
     29c:	c9 01       	movw	r24, r18
     29e:	da 01       	movw	r26, r20
     2a0:	80 30       	cpi	r24, 0x00	; 0
     2a2:	e0 e0       	ldi	r30, 0x00	; 0
     2a4:	9e 07       	cpc	r25, r30
     2a6:	e1 e0       	ldi	r30, 0x01	; 1
     2a8:	ae 07       	cpc	r26, r30
     2aa:	e0 e0       	ldi	r30, 0x00	; 0
     2ac:	be 07       	cpc	r27, r30
     2ae:	80 f4       	brcc	.+32     	; 0x2d0 <__floatundisf+0xa6>
     2b0:	8f 3f       	cpi	r24, 0xFF	; 255
     2b2:	91 05       	cpc	r25, r1
     2b4:	a1 05       	cpc	r26, r1
     2b6:	b1 05       	cpc	r27, r1
     2b8:	31 f0       	breq	.+12     	; 0x2c6 <__floatundisf+0x9c>
     2ba:	28 f0       	brcs	.+10     	; 0x2c6 <__floatundisf+0x9c>
     2bc:	28 e0       	ldi	r18, 0x08	; 8
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	16 c0       	rjmp	.+44     	; 0x2f2 <__floatundisf+0xc8>
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	11 c0       	rjmp	.+34     	; 0x2f2 <__floatundisf+0xc8>
     2d0:	80 30       	cpi	r24, 0x00	; 0
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	9f 07       	cpc	r25, r31
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	af 07       	cpc	r26, r31
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	bf 07       	cpc	r27, r31
     2de:	28 f0       	brcs	.+10     	; 0x2ea <__floatundisf+0xc0>
     2e0:	28 e1       	ldi	r18, 0x18	; 24
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <__floatundisf+0xc8>
     2ea:	20 e1       	ldi	r18, 0x10	; 16
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	02 2e       	mov	r0, r18
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__floatundisf+0xd4>
     2f6:	b6 95       	lsr	r27
     2f8:	a7 95       	ror	r26
     2fa:	97 95       	ror	r25
     2fc:	87 95       	ror	r24
     2fe:	0a 94       	dec	r0
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__floatundisf+0xcc>
     302:	fc 01       	movw	r30, r24
     304:	e8 59       	subi	r30, 0x98	; 152
     306:	ff 4f       	sbci	r31, 0xFF	; 255
     308:	80 81       	ld	r24, Z
     30a:	29 01       	movw	r4, r18
     30c:	3a 01       	movw	r6, r20
     30e:	48 0e       	add	r4, r24
     310:	51 1c       	adc	r5, r1
     312:	61 1c       	adc	r6, r1
     314:	71 1c       	adc	r7, r1
     316:	49 82       	std	Y+1, r4	; 0x01
     318:	21 2f       	mov	r18, r17
     31a:	3b 2d       	mov	r19, r11
     31c:	4a 2d       	mov	r20, r10
     31e:	59 2d       	mov	r21, r9
     320:	68 2d       	mov	r22, r8
     322:	73 2d       	mov	r23, r3
     324:	82 2d       	mov	r24, r2
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	04 2d       	mov	r16, r4
     32a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__lshrdi3>
     32e:	c9 01       	movw	r24, r18
     330:	da 01       	movw	r26, r20
     332:	4c 01       	movw	r8, r24
     334:	5d 01       	movw	r10, r26
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	84 19       	sub	r24, r4
     33c:	95 09       	sbc	r25, r5
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__floatundisf+0x11e>
     340:	cc 0c       	add	r12, r12
     342:	dd 1c       	adc	r13, r13
     344:	ee 1c       	adc	r14, r14
     346:	ff 1c       	adc	r15, r15
     348:	8a 95       	dec	r24
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__floatundisf+0x116>
     34c:	c1 14       	cp	r12, r1
     34e:	d1 04       	cpc	r13, r1
     350:	e1 04       	cpc	r14, r1
     352:	f1 04       	cpc	r15, r1
     354:	41 f0       	breq	.+16     	; 0x366 <__floatundisf+0x13c>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	88 2a       	or	r8, r24
     360:	99 2a       	or	r9, r25
     362:	aa 2a       	or	r10, r26
     364:	bb 2a       	or	r11, r27
     366:	90 e2       	ldi	r25, 0x20	; 32
     368:	49 16       	cp	r4, r25
     36a:	51 04       	cpc	r5, r1
     36c:	61 04       	cpc	r6, r1
     36e:	71 04       	cpc	r7, r1
     370:	59 f4       	brne	.+22     	; 0x388 <__floatundisf+0x15e>
     372:	0f 2e       	mov	r0, r31
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	ef 2e       	mov	r14, r31
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	ff 2e       	mov	r15, r31
     37c:	f0 e8       	ldi	r31, 0x80	; 128
     37e:	0f 2f       	mov	r16, r31
     380:	ff e4       	ldi	r31, 0x4F	; 79
     382:	1f 2f       	mov	r17, r31
     384:	f0 2d       	mov	r31, r0
     386:	21 c0       	rjmp	.+66     	; 0x3ca <__floatundisf+0x1a0>
     388:	af e1       	ldi	r26, 0x1F	; 31
     38a:	4a 16       	cp	r4, r26
     38c:	51 04       	cpc	r5, r1
     38e:	61 04       	cpc	r6, r1
     390:	71 04       	cpc	r7, r1
     392:	59 f4       	brne	.+22     	; 0x3aa <__floatundisf+0x180>
     394:	0f 2e       	mov	r0, r31
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	ef 2e       	mov	r14, r31
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	ff 2e       	mov	r15, r31
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	0f 2f       	mov	r16, r31
     3a2:	ff e4       	ldi	r31, 0x4F	; 79
     3a4:	1f 2f       	mov	r17, r31
     3a6:	f0 2d       	mov	r31, r0
     3a8:	10 c0       	rjmp	.+32     	; 0x3ca <__floatundisf+0x1a0>
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	09 80       	ldd	r0, Y+1	; 0x01
     3b4:	04 c0       	rjmp	.+8      	; 0x3be <__floatundisf+0x194>
     3b6:	66 0f       	add	r22, r22
     3b8:	77 1f       	adc	r23, r23
     3ba:	88 1f       	adc	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	0a 94       	dec	r0
     3c0:	d2 f7       	brpl	.-12     	; 0x3b6 <__floatundisf+0x18c>
     3c2:	0e 94 d1 05 	call	0xba2	; 0xba2 <__floatsisf>
     3c6:	7b 01       	movw	r14, r22
     3c8:	8c 01       	movw	r16, r24
     3ca:	c5 01       	movw	r24, r10
     3cc:	b4 01       	movw	r22, r8
     3ce:	0e 94 83 06 	call	0xd06	; 0xd06 <__floatunsisf>
     3d2:	a8 01       	movw	r20, r16
     3d4:	97 01       	movw	r18, r14
     3d6:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
     3da:	22 96       	adiw	r28, 0x02	; 2
     3dc:	e2 e1       	ldi	r30, 0x12	; 18
     3de:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__>

000003e2 <_fpadd_parts>:
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	e7 ef       	ldi	r30, 0xF7	; 247
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__>
     3ee:	dc 01       	movw	r26, r24
     3f0:	2b 01       	movw	r4, r22
     3f2:	fa 01       	movw	r30, r20
     3f4:	9c 91       	ld	r25, X
     3f6:	92 30       	cpi	r25, 0x02	; 2
     3f8:	08 f4       	brcc	.+2      	; 0x3fc <_fpadd_parts+0x1a>
     3fa:	39 c1       	rjmp	.+626    	; 0x66e <_fpadd_parts+0x28c>
     3fc:	eb 01       	movw	r28, r22
     3fe:	88 81       	ld	r24, Y
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	08 f4       	brcc	.+2      	; 0x406 <_fpadd_parts+0x24>
     404:	33 c1       	rjmp	.+614    	; 0x66c <_fpadd_parts+0x28a>
     406:	94 30       	cpi	r25, 0x04	; 4
     408:	69 f4       	brne	.+26     	; 0x424 <_fpadd_parts+0x42>
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	09 f0       	breq	.+2      	; 0x410 <_fpadd_parts+0x2e>
     40e:	2f c1       	rjmp	.+606    	; 0x66e <_fpadd_parts+0x28c>
     410:	11 96       	adiw	r26, 0x01	; 1
     412:	9c 91       	ld	r25, X
     414:	11 97       	sbiw	r26, 0x01	; 1
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	98 17       	cp	r25, r24
     41a:	09 f4       	brne	.+2      	; 0x41e <_fpadd_parts+0x3c>
     41c:	28 c1       	rjmp	.+592    	; 0x66e <_fpadd_parts+0x28c>
     41e:	a0 e6       	ldi	r26, 0x60	; 96
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	25 c1       	rjmp	.+586    	; 0x66e <_fpadd_parts+0x28c>
     424:	84 30       	cpi	r24, 0x04	; 4
     426:	09 f4       	brne	.+2      	; 0x42a <_fpadd_parts+0x48>
     428:	21 c1       	rjmp	.+578    	; 0x66c <_fpadd_parts+0x28a>
     42a:	82 30       	cpi	r24, 0x02	; 2
     42c:	a9 f4       	brne	.+42     	; 0x458 <_fpadd_parts+0x76>
     42e:	92 30       	cpi	r25, 0x02	; 2
     430:	09 f0       	breq	.+2      	; 0x434 <_fpadd_parts+0x52>
     432:	1d c1       	rjmp	.+570    	; 0x66e <_fpadd_parts+0x28c>
     434:	9a 01       	movw	r18, r20
     436:	ad 01       	movw	r20, r26
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	ea 01       	movw	r28, r20
     43c:	09 90       	ld	r0, Y+
     43e:	ae 01       	movw	r20, r28
     440:	e9 01       	movw	r28, r18
     442:	09 92       	st	Y+, r0
     444:	9e 01       	movw	r18, r28
     446:	81 50       	subi	r24, 0x01	; 1
     448:	c1 f7       	brne	.-16     	; 0x43a <_fpadd_parts+0x58>
     44a:	e2 01       	movw	r28, r4
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	11 96       	adiw	r26, 0x01	; 1
     450:	9c 91       	ld	r25, X
     452:	89 23       	and	r24, r25
     454:	81 83       	std	Z+1, r24	; 0x01
     456:	08 c1       	rjmp	.+528    	; 0x668 <_fpadd_parts+0x286>
     458:	92 30       	cpi	r25, 0x02	; 2
     45a:	09 f4       	brne	.+2      	; 0x45e <_fpadd_parts+0x7c>
     45c:	07 c1       	rjmp	.+526    	; 0x66c <_fpadd_parts+0x28a>
     45e:	12 96       	adiw	r26, 0x02	; 2
     460:	2d 90       	ld	r2, X+
     462:	3c 90       	ld	r3, X
     464:	13 97       	sbiw	r26, 0x03	; 3
     466:	eb 01       	movw	r28, r22
     468:	8a 81       	ldd	r24, Y+2	; 0x02
     46a:	9b 81       	ldd	r25, Y+3	; 0x03
     46c:	14 96       	adiw	r26, 0x04	; 4
     46e:	ad 90       	ld	r10, X+
     470:	bd 90       	ld	r11, X+
     472:	cd 90       	ld	r12, X+
     474:	dc 90       	ld	r13, X
     476:	17 97       	sbiw	r26, 0x07	; 7
     478:	ec 80       	ldd	r14, Y+4	; 0x04
     47a:	fd 80       	ldd	r15, Y+5	; 0x05
     47c:	0e 81       	ldd	r16, Y+6	; 0x06
     47e:	1f 81       	ldd	r17, Y+7	; 0x07
     480:	91 01       	movw	r18, r2
     482:	28 1b       	sub	r18, r24
     484:	39 0b       	sbc	r19, r25
     486:	b9 01       	movw	r22, r18
     488:	37 ff       	sbrs	r19, 7
     48a:	04 c0       	rjmp	.+8      	; 0x494 <_fpadd_parts+0xb2>
     48c:	66 27       	eor	r22, r22
     48e:	77 27       	eor	r23, r23
     490:	62 1b       	sub	r22, r18
     492:	73 0b       	sbc	r23, r19
     494:	60 32       	cpi	r22, 0x20	; 32
     496:	71 05       	cpc	r23, r1
     498:	0c f0       	brlt	.+2      	; 0x49c <_fpadd_parts+0xba>
     49a:	61 c0       	rjmp	.+194    	; 0x55e <_fpadd_parts+0x17c>
     49c:	12 16       	cp	r1, r18
     49e:	13 06       	cpc	r1, r19
     4a0:	6c f5       	brge	.+90     	; 0x4fc <_fpadd_parts+0x11a>
     4a2:	37 01       	movw	r6, r14
     4a4:	48 01       	movw	r8, r16
     4a6:	06 2e       	mov	r0, r22
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <_fpadd_parts+0xd0>
     4aa:	96 94       	lsr	r9
     4ac:	87 94       	ror	r8
     4ae:	77 94       	ror	r7
     4b0:	67 94       	ror	r6
     4b2:	0a 94       	dec	r0
     4b4:	d2 f7       	brpl	.-12     	; 0x4aa <_fpadd_parts+0xc8>
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <_fpadd_parts+0xe6>
     4c0:	22 0f       	add	r18, r18
     4c2:	33 1f       	adc	r19, r19
     4c4:	44 1f       	adc	r20, r20
     4c6:	55 1f       	adc	r21, r21
     4c8:	6a 95       	dec	r22
     4ca:	d2 f7       	brpl	.-12     	; 0x4c0 <_fpadd_parts+0xde>
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	30 40       	sbci	r19, 0x00	; 0
     4d0:	40 40       	sbci	r20, 0x00	; 0
     4d2:	50 40       	sbci	r21, 0x00	; 0
     4d4:	2e 21       	and	r18, r14
     4d6:	3f 21       	and	r19, r15
     4d8:	40 23       	and	r20, r16
     4da:	51 23       	and	r21, r17
     4dc:	21 15       	cp	r18, r1
     4de:	31 05       	cpc	r19, r1
     4e0:	41 05       	cpc	r20, r1
     4e2:	51 05       	cpc	r21, r1
     4e4:	21 f0       	breq	.+8      	; 0x4ee <_fpadd_parts+0x10c>
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	79 01       	movw	r14, r18
     4f0:	8a 01       	movw	r16, r20
     4f2:	e6 28       	or	r14, r6
     4f4:	f7 28       	or	r15, r7
     4f6:	08 29       	or	r16, r8
     4f8:	19 29       	or	r17, r9
     4fa:	3c c0       	rjmp	.+120    	; 0x574 <_fpadd_parts+0x192>
     4fc:	23 2b       	or	r18, r19
     4fe:	d1 f1       	breq	.+116    	; 0x574 <_fpadd_parts+0x192>
     500:	26 0e       	add	r2, r22
     502:	37 1e       	adc	r3, r23
     504:	35 01       	movw	r6, r10
     506:	46 01       	movw	r8, r12
     508:	06 2e       	mov	r0, r22
     50a:	04 c0       	rjmp	.+8      	; 0x514 <_fpadd_parts+0x132>
     50c:	96 94       	lsr	r9
     50e:	87 94       	ror	r8
     510:	77 94       	ror	r7
     512:	67 94       	ror	r6
     514:	0a 94       	dec	r0
     516:	d2 f7       	brpl	.-12     	; 0x50c <_fpadd_parts+0x12a>
     518:	21 e0       	ldi	r18, 0x01	; 1
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	04 c0       	rjmp	.+8      	; 0x52a <_fpadd_parts+0x148>
     522:	22 0f       	add	r18, r18
     524:	33 1f       	adc	r19, r19
     526:	44 1f       	adc	r20, r20
     528:	55 1f       	adc	r21, r21
     52a:	6a 95       	dec	r22
     52c:	d2 f7       	brpl	.-12     	; 0x522 <_fpadd_parts+0x140>
     52e:	21 50       	subi	r18, 0x01	; 1
     530:	30 40       	sbci	r19, 0x00	; 0
     532:	40 40       	sbci	r20, 0x00	; 0
     534:	50 40       	sbci	r21, 0x00	; 0
     536:	2a 21       	and	r18, r10
     538:	3b 21       	and	r19, r11
     53a:	4c 21       	and	r20, r12
     53c:	5d 21       	and	r21, r13
     53e:	21 15       	cp	r18, r1
     540:	31 05       	cpc	r19, r1
     542:	41 05       	cpc	r20, r1
     544:	51 05       	cpc	r21, r1
     546:	21 f0       	breq	.+8      	; 0x550 <_fpadd_parts+0x16e>
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	59 01       	movw	r10, r18
     552:	6a 01       	movw	r12, r20
     554:	a6 28       	or	r10, r6
     556:	b7 28       	or	r11, r7
     558:	c8 28       	or	r12, r8
     55a:	d9 28       	or	r13, r9
     55c:	0b c0       	rjmp	.+22     	; 0x574 <_fpadd_parts+0x192>
     55e:	82 15       	cp	r24, r2
     560:	93 05       	cpc	r25, r3
     562:	2c f0       	brlt	.+10     	; 0x56e <_fpadd_parts+0x18c>
     564:	1c 01       	movw	r2, r24
     566:	aa 24       	eor	r10, r10
     568:	bb 24       	eor	r11, r11
     56a:	65 01       	movw	r12, r10
     56c:	03 c0       	rjmp	.+6      	; 0x574 <_fpadd_parts+0x192>
     56e:	ee 24       	eor	r14, r14
     570:	ff 24       	eor	r15, r15
     572:	87 01       	movw	r16, r14
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	9c 91       	ld	r25, X
     578:	d2 01       	movw	r26, r4
     57a:	11 96       	adiw	r26, 0x01	; 1
     57c:	8c 91       	ld	r24, X
     57e:	98 17       	cp	r25, r24
     580:	09 f4       	brne	.+2      	; 0x584 <_fpadd_parts+0x1a2>
     582:	45 c0       	rjmp	.+138    	; 0x60e <_fpadd_parts+0x22c>
     584:	99 23       	and	r25, r25
     586:	39 f0       	breq	.+14     	; 0x596 <_fpadd_parts+0x1b4>
     588:	a8 01       	movw	r20, r16
     58a:	97 01       	movw	r18, r14
     58c:	2a 19       	sub	r18, r10
     58e:	3b 09       	sbc	r19, r11
     590:	4c 09       	sbc	r20, r12
     592:	5d 09       	sbc	r21, r13
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <_fpadd_parts+0x1c0>
     596:	a6 01       	movw	r20, r12
     598:	95 01       	movw	r18, r10
     59a:	2e 19       	sub	r18, r14
     59c:	3f 09       	sbc	r19, r15
     59e:	40 0b       	sbc	r20, r16
     5a0:	51 0b       	sbc	r21, r17
     5a2:	57 fd       	sbrc	r21, 7
     5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <_fpadd_parts+0x1d4>
     5a6:	11 82       	std	Z+1, r1	; 0x01
     5a8:	33 82       	std	Z+3, r3	; 0x03
     5aa:	22 82       	std	Z+2, r2	; 0x02
     5ac:	24 83       	std	Z+4, r18	; 0x04
     5ae:	35 83       	std	Z+5, r19	; 0x05
     5b0:	46 83       	std	Z+6, r20	; 0x06
     5b2:	57 83       	std	Z+7, r21	; 0x07
     5b4:	1d c0       	rjmp	.+58     	; 0x5f0 <_fpadd_parts+0x20e>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	81 83       	std	Z+1, r24	; 0x01
     5ba:	33 82       	std	Z+3, r3	; 0x03
     5bc:	22 82       	std	Z+2, r2	; 0x02
     5be:	88 27       	eor	r24, r24
     5c0:	99 27       	eor	r25, r25
     5c2:	dc 01       	movw	r26, r24
     5c4:	82 1b       	sub	r24, r18
     5c6:	93 0b       	sbc	r25, r19
     5c8:	a4 0b       	sbc	r26, r20
     5ca:	b5 0b       	sbc	r27, r21
     5cc:	84 83       	std	Z+4, r24	; 0x04
     5ce:	95 83       	std	Z+5, r25	; 0x05
     5d0:	a6 83       	std	Z+6, r26	; 0x06
     5d2:	b7 83       	std	Z+7, r27	; 0x07
     5d4:	0d c0       	rjmp	.+26     	; 0x5f0 <_fpadd_parts+0x20e>
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	44 1f       	adc	r20, r20
     5dc:	55 1f       	adc	r21, r21
     5de:	24 83       	std	Z+4, r18	; 0x04
     5e0:	35 83       	std	Z+5, r19	; 0x05
     5e2:	46 83       	std	Z+6, r20	; 0x06
     5e4:	57 83       	std	Z+7, r21	; 0x07
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	93 81       	ldd	r25, Z+3	; 0x03
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	93 83       	std	Z+3, r25	; 0x03
     5ee:	82 83       	std	Z+2, r24	; 0x02
     5f0:	24 81       	ldd	r18, Z+4	; 0x04
     5f2:	35 81       	ldd	r19, Z+5	; 0x05
     5f4:	46 81       	ldd	r20, Z+6	; 0x06
     5f6:	57 81       	ldd	r21, Z+7	; 0x07
     5f8:	da 01       	movw	r26, r20
     5fa:	c9 01       	movw	r24, r18
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	a1 09       	sbc	r26, r1
     600:	b1 09       	sbc	r27, r1
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	9f 4f       	sbci	r25, 0xFF	; 255
     606:	af 4f       	sbci	r26, 0xFF	; 255
     608:	bf 43       	sbci	r27, 0x3F	; 63
     60a:	28 f3       	brcs	.-54     	; 0x5d6 <_fpadd_parts+0x1f4>
     60c:	0b c0       	rjmp	.+22     	; 0x624 <_fpadd_parts+0x242>
     60e:	91 83       	std	Z+1, r25	; 0x01
     610:	33 82       	std	Z+3, r3	; 0x03
     612:	22 82       	std	Z+2, r2	; 0x02
     614:	ea 0c       	add	r14, r10
     616:	fb 1c       	adc	r15, r11
     618:	0c 1d       	adc	r16, r12
     61a:	1d 1d       	adc	r17, r13
     61c:	e4 82       	std	Z+4, r14	; 0x04
     61e:	f5 82       	std	Z+5, r15	; 0x05
     620:	06 83       	std	Z+6, r16	; 0x06
     622:	17 83       	std	Z+7, r17	; 0x07
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	80 83       	st	Z, r24
     628:	24 81       	ldd	r18, Z+4	; 0x04
     62a:	35 81       	ldd	r19, Z+5	; 0x05
     62c:	46 81       	ldd	r20, Z+6	; 0x06
     62e:	57 81       	ldd	r21, Z+7	; 0x07
     630:	57 ff       	sbrs	r21, 7
     632:	1a c0       	rjmp	.+52     	; 0x668 <_fpadd_parts+0x286>
     634:	c9 01       	movw	r24, r18
     636:	aa 27       	eor	r26, r26
     638:	97 fd       	sbrc	r25, 7
     63a:	a0 95       	com	r26
     63c:	ba 2f       	mov	r27, r26
     63e:	81 70       	andi	r24, 0x01	; 1
     640:	90 70       	andi	r25, 0x00	; 0
     642:	a0 70       	andi	r26, 0x00	; 0
     644:	b0 70       	andi	r27, 0x00	; 0
     646:	56 95       	lsr	r21
     648:	47 95       	ror	r20
     64a:	37 95       	ror	r19
     64c:	27 95       	ror	r18
     64e:	82 2b       	or	r24, r18
     650:	93 2b       	or	r25, r19
     652:	a4 2b       	or	r26, r20
     654:	b5 2b       	or	r27, r21
     656:	84 83       	std	Z+4, r24	; 0x04
     658:	95 83       	std	Z+5, r25	; 0x05
     65a:	a6 83       	std	Z+6, r26	; 0x06
     65c:	b7 83       	std	Z+7, r27	; 0x07
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	93 81       	ldd	r25, Z+3	; 0x03
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	93 83       	std	Z+3, r25	; 0x03
     666:	82 83       	std	Z+2, r24	; 0x02
     668:	df 01       	movw	r26, r30
     66a:	01 c0       	rjmp	.+2      	; 0x66e <_fpadd_parts+0x28c>
     66c:	d2 01       	movw	r26, r4
     66e:	cd 01       	movw	r24, r26
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	e2 e1       	ldi	r30, 0x12	; 18
     676:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__>

0000067a <__subsf3>:
     67a:	a0 e2       	ldi	r26, 0x20	; 32
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	e3 e4       	ldi	r30, 0x43	; 67
     680:	f3 e0       	ldi	r31, 0x03	; 3
     682:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__prologue_saves__+0x18>
     686:	69 83       	std	Y+1, r22	; 0x01
     688:	7a 83       	std	Y+2, r23	; 0x02
     68a:	8b 83       	std	Y+3, r24	; 0x03
     68c:	9c 83       	std	Y+4, r25	; 0x04
     68e:	2d 83       	std	Y+5, r18	; 0x05
     690:	3e 83       	std	Y+6, r19	; 0x06
     692:	4f 83       	std	Y+7, r20	; 0x07
     694:	58 87       	std	Y+8, r21	; 0x08
     696:	e9 e0       	ldi	r30, 0x09	; 9
     698:	ee 2e       	mov	r14, r30
     69a:	f1 2c       	mov	r15, r1
     69c:	ec 0e       	add	r14, r28
     69e:	fd 1e       	adc	r15, r29
     6a0:	ce 01       	movw	r24, r28
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	b7 01       	movw	r22, r14
     6a6:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     6aa:	8e 01       	movw	r16, r28
     6ac:	0f 5e       	subi	r16, 0xEF	; 239
     6ae:	1f 4f       	sbci	r17, 0xFF	; 255
     6b0:	ce 01       	movw	r24, r28
     6b2:	05 96       	adiw	r24, 0x05	; 5
     6b4:	b8 01       	movw	r22, r16
     6b6:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     6ba:	8a 89       	ldd	r24, Y+18	; 0x12
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	89 27       	eor	r24, r25
     6c0:	8a 8b       	std	Y+18, r24	; 0x12
     6c2:	c7 01       	movw	r24, r14
     6c4:	b8 01       	movw	r22, r16
     6c6:	ae 01       	movw	r20, r28
     6c8:	47 5e       	subi	r20, 0xE7	; 231
     6ca:	5f 4f       	sbci	r21, 0xFF	; 255
     6cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_fpadd_parts>
     6d0:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     6d4:	a0 96       	adiw	r28, 0x20	; 32
     6d6:	e6 e0       	ldi	r30, 0x06	; 6
     6d8:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__epilogue_restores__+0x18>

000006dc <__addsf3>:
     6dc:	a0 e2       	ldi	r26, 0x20	; 32
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	e4 e7       	ldi	r30, 0x74	; 116
     6e2:	f3 e0       	ldi	r31, 0x03	; 3
     6e4:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__prologue_saves__+0x18>
     6e8:	69 83       	std	Y+1, r22	; 0x01
     6ea:	7a 83       	std	Y+2, r23	; 0x02
     6ec:	8b 83       	std	Y+3, r24	; 0x03
     6ee:	9c 83       	std	Y+4, r25	; 0x04
     6f0:	2d 83       	std	Y+5, r18	; 0x05
     6f2:	3e 83       	std	Y+6, r19	; 0x06
     6f4:	4f 83       	std	Y+7, r20	; 0x07
     6f6:	58 87       	std	Y+8, r21	; 0x08
     6f8:	f9 e0       	ldi	r31, 0x09	; 9
     6fa:	ef 2e       	mov	r14, r31
     6fc:	f1 2c       	mov	r15, r1
     6fe:	ec 0e       	add	r14, r28
     700:	fd 1e       	adc	r15, r29
     702:	ce 01       	movw	r24, r28
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	b7 01       	movw	r22, r14
     708:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     70c:	8e 01       	movw	r16, r28
     70e:	0f 5e       	subi	r16, 0xEF	; 239
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	ce 01       	movw	r24, r28
     714:	05 96       	adiw	r24, 0x05	; 5
     716:	b8 01       	movw	r22, r16
     718:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     71c:	c7 01       	movw	r24, r14
     71e:	b8 01       	movw	r22, r16
     720:	ae 01       	movw	r20, r28
     722:	47 5e       	subi	r20, 0xE7	; 231
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_fpadd_parts>
     72a:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     72e:	a0 96       	adiw	r28, 0x20	; 32
     730:	e6 e0       	ldi	r30, 0x06	; 6
     732:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__epilogue_restores__+0x18>

00000736 <__mulsf3>:
     736:	a0 e2       	ldi	r26, 0x20	; 32
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e1 ea       	ldi	r30, 0xA1	; 161
     73c:	f3 e0       	ldi	r31, 0x03	; 3
     73e:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__>
     742:	69 83       	std	Y+1, r22	; 0x01
     744:	7a 83       	std	Y+2, r23	; 0x02
     746:	8b 83       	std	Y+3, r24	; 0x03
     748:	9c 83       	std	Y+4, r25	; 0x04
     74a:	2d 83       	std	Y+5, r18	; 0x05
     74c:	3e 83       	std	Y+6, r19	; 0x06
     74e:	4f 83       	std	Y+7, r20	; 0x07
     750:	58 87       	std	Y+8, r21	; 0x08
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	be 01       	movw	r22, r28
     758:	67 5f       	subi	r22, 0xF7	; 247
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     760:	ce 01       	movw	r24, r28
     762:	05 96       	adiw	r24, 0x05	; 5
     764:	be 01       	movw	r22, r28
     766:	6f 5e       	subi	r22, 0xEF	; 239
     768:	7f 4f       	sbci	r23, 0xFF	; 255
     76a:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     76e:	99 85       	ldd	r25, Y+9	; 0x09
     770:	92 30       	cpi	r25, 0x02	; 2
     772:	88 f0       	brcs	.+34     	; 0x796 <__mulsf3+0x60>
     774:	89 89       	ldd	r24, Y+17	; 0x11
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	c8 f0       	brcs	.+50     	; 0x7ac <__mulsf3+0x76>
     77a:	94 30       	cpi	r25, 0x04	; 4
     77c:	19 f4       	brne	.+6      	; 0x784 <__mulsf3+0x4e>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	51 f4       	brne	.+20     	; 0x796 <__mulsf3+0x60>
     782:	04 c0       	rjmp	.+8      	; 0x78c <__mulsf3+0x56>
     784:	84 30       	cpi	r24, 0x04	; 4
     786:	29 f4       	brne	.+10     	; 0x792 <__mulsf3+0x5c>
     788:	92 30       	cpi	r25, 0x02	; 2
     78a:	81 f4       	brne	.+32     	; 0x7ac <__mulsf3+0x76>
     78c:	80 e6       	ldi	r24, 0x60	; 96
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	c6 c0       	rjmp	.+396    	; 0x91e <__stack+0xbf>
     792:	92 30       	cpi	r25, 0x02	; 2
     794:	49 f4       	brne	.+18     	; 0x7a8 <__mulsf3+0x72>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	9a 85       	ldd	r25, Y+10	; 0x0a
     79a:	8a 89       	ldd	r24, Y+18	; 0x12
     79c:	98 13       	cpse	r25, r24
     79e:	21 e0       	ldi	r18, 0x01	; 1
     7a0:	2a 87       	std	Y+10, r18	; 0x0a
     7a2:	ce 01       	movw	r24, r28
     7a4:	09 96       	adiw	r24, 0x09	; 9
     7a6:	bb c0       	rjmp	.+374    	; 0x91e <__stack+0xbf>
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	49 f4       	brne	.+18     	; 0x7be <__mulsf3+0x88>
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b0:	8a 89       	ldd	r24, Y+18	; 0x12
     7b2:	98 13       	cpse	r25, r24
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	2a 8b       	std	Y+18, r18	; 0x12
     7b8:	ce 01       	movw	r24, r28
     7ba:	41 96       	adiw	r24, 0x11	; 17
     7bc:	b0 c0       	rjmp	.+352    	; 0x91e <__stack+0xbf>
     7be:	2d 84       	ldd	r2, Y+13	; 0x0d
     7c0:	3e 84       	ldd	r3, Y+14	; 0x0e
     7c2:	4f 84       	ldd	r4, Y+15	; 0x0f
     7c4:	58 88       	ldd	r5, Y+16	; 0x10
     7c6:	6d 88       	ldd	r6, Y+21	; 0x15
     7c8:	7e 88       	ldd	r7, Y+22	; 0x16
     7ca:	8f 88       	ldd	r8, Y+23	; 0x17
     7cc:	98 8c       	ldd	r9, Y+24	; 0x18
     7ce:	ee 24       	eor	r14, r14
     7d0:	ff 24       	eor	r15, r15
     7d2:	87 01       	movw	r16, r14
     7d4:	aa 24       	eor	r10, r10
     7d6:	bb 24       	eor	r11, r11
     7d8:	65 01       	movw	r12, r10
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	e0 e0       	ldi	r30, 0x00	; 0
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	c1 01       	movw	r24, r2
     7e8:	81 70       	andi	r24, 0x01	; 1
     7ea:	90 70       	andi	r25, 0x00	; 0
     7ec:	89 2b       	or	r24, r25
     7ee:	e9 f0       	breq	.+58     	; 0x82a <__mulsf3+0xf4>
     7f0:	e6 0c       	add	r14, r6
     7f2:	f7 1c       	adc	r15, r7
     7f4:	08 1d       	adc	r16, r8
     7f6:	19 1d       	adc	r17, r9
     7f8:	9a 01       	movw	r18, r20
     7fa:	ab 01       	movw	r20, r22
     7fc:	2a 0d       	add	r18, r10
     7fe:	3b 1d       	adc	r19, r11
     800:	4c 1d       	adc	r20, r12
     802:	5d 1d       	adc	r21, r13
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e6 14       	cp	r14, r6
     80e:	f7 04       	cpc	r15, r7
     810:	08 05       	cpc	r16, r8
     812:	19 05       	cpc	r17, r9
     814:	20 f4       	brcc	.+8      	; 0x81e <__mulsf3+0xe8>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e0       	ldi	r26, 0x00	; 0
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	ba 01       	movw	r22, r20
     820:	a9 01       	movw	r20, r18
     822:	48 0f       	add	r20, r24
     824:	59 1f       	adc	r21, r25
     826:	6a 1f       	adc	r22, r26
     828:	7b 1f       	adc	r23, r27
     82a:	aa 0c       	add	r10, r10
     82c:	bb 1c       	adc	r11, r11
     82e:	cc 1c       	adc	r12, r12
     830:	dd 1c       	adc	r13, r13
     832:	97 fe       	sbrs	r9, 7
     834:	08 c0       	rjmp	.+16     	; 0x846 <__mulsf3+0x110>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	a8 2a       	or	r10, r24
     840:	b9 2a       	or	r11, r25
     842:	ca 2a       	or	r12, r26
     844:	db 2a       	or	r13, r27
     846:	31 96       	adiw	r30, 0x01	; 1
     848:	e0 32       	cpi	r30, 0x20	; 32
     84a:	f1 05       	cpc	r31, r1
     84c:	49 f0       	breq	.+18     	; 0x860 <__stack+0x1>
     84e:	66 0c       	add	r6, r6
     850:	77 1c       	adc	r7, r7
     852:	88 1c       	adc	r8, r8
     854:	99 1c       	adc	r9, r9
     856:	56 94       	lsr	r5
     858:	47 94       	ror	r4
     85a:	37 94       	ror	r3
     85c:	27 94       	ror	r2
     85e:	c3 cf       	rjmp	.-122    	; 0x7e6 <__mulsf3+0xb0>
     860:	fa 85       	ldd	r31, Y+10	; 0x0a
     862:	ea 89       	ldd	r30, Y+18	; 0x12
     864:	2b 89       	ldd	r18, Y+19	; 0x13
     866:	3c 89       	ldd	r19, Y+20	; 0x14
     868:	8b 85       	ldd	r24, Y+11	; 0x0b
     86a:	9c 85       	ldd	r25, Y+12	; 0x0c
     86c:	28 0f       	add	r18, r24
     86e:	39 1f       	adc	r19, r25
     870:	2e 5f       	subi	r18, 0xFE	; 254
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	17 c0       	rjmp	.+46     	; 0x8a4 <__stack+0x45>
     876:	ca 01       	movw	r24, r20
     878:	81 70       	andi	r24, 0x01	; 1
     87a:	90 70       	andi	r25, 0x00	; 0
     87c:	89 2b       	or	r24, r25
     87e:	61 f0       	breq	.+24     	; 0x898 <__stack+0x39>
     880:	16 95       	lsr	r17
     882:	07 95       	ror	r16
     884:	f7 94       	ror	r15
     886:	e7 94       	ror	r14
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e8       	ldi	r27, 0x80	; 128
     890:	e8 2a       	or	r14, r24
     892:	f9 2a       	or	r15, r25
     894:	0a 2b       	or	r16, r26
     896:	1b 2b       	or	r17, r27
     898:	76 95       	lsr	r23
     89a:	67 95       	ror	r22
     89c:	57 95       	ror	r21
     89e:	47 95       	ror	r20
     8a0:	2f 5f       	subi	r18, 0xFF	; 255
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	77 fd       	sbrc	r23, 7
     8a6:	e7 cf       	rjmp	.-50     	; 0x876 <__stack+0x17>
     8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <__stack+0x63>
     8aa:	44 0f       	add	r20, r20
     8ac:	55 1f       	adc	r21, r21
     8ae:	66 1f       	adc	r22, r22
     8b0:	77 1f       	adc	r23, r23
     8b2:	17 fd       	sbrc	r17, 7
     8b4:	41 60       	ori	r20, 0x01	; 1
     8b6:	ee 0c       	add	r14, r14
     8b8:	ff 1c       	adc	r15, r15
     8ba:	00 1f       	adc	r16, r16
     8bc:	11 1f       	adc	r17, r17
     8be:	21 50       	subi	r18, 0x01	; 1
     8c0:	30 40       	sbci	r19, 0x00	; 0
     8c2:	40 30       	cpi	r20, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	59 07       	cpc	r21, r25
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	69 07       	cpc	r22, r25
     8cc:	90 e4       	ldi	r25, 0x40	; 64
     8ce:	79 07       	cpc	r23, r25
     8d0:	60 f3       	brcs	.-40     	; 0x8aa <__stack+0x4b>
     8d2:	2b 8f       	std	Y+27, r18	; 0x1b
     8d4:	3c 8f       	std	Y+28, r19	; 0x1c
     8d6:	db 01       	movw	r26, r22
     8d8:	ca 01       	movw	r24, r20
     8da:	8f 77       	andi	r24, 0x7F	; 127
     8dc:	90 70       	andi	r25, 0x00	; 0
     8de:	a0 70       	andi	r26, 0x00	; 0
     8e0:	b0 70       	andi	r27, 0x00	; 0
     8e2:	80 34       	cpi	r24, 0x40	; 64
     8e4:	91 05       	cpc	r25, r1
     8e6:	a1 05       	cpc	r26, r1
     8e8:	b1 05       	cpc	r27, r1
     8ea:	61 f4       	brne	.+24     	; 0x904 <__stack+0xa5>
     8ec:	47 fd       	sbrc	r20, 7
     8ee:	0a c0       	rjmp	.+20     	; 0x904 <__stack+0xa5>
     8f0:	e1 14       	cp	r14, r1
     8f2:	f1 04       	cpc	r15, r1
     8f4:	01 05       	cpc	r16, r1
     8f6:	11 05       	cpc	r17, r1
     8f8:	29 f0       	breq	.+10     	; 0x904 <__stack+0xa5>
     8fa:	40 5c       	subi	r20, 0xC0	; 192
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	6f 4f       	sbci	r22, 0xFF	; 255
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	40 78       	andi	r20, 0x80	; 128
     904:	1a 8e       	std	Y+26, r1	; 0x1a
     906:	fe 17       	cp	r31, r30
     908:	11 f0       	breq	.+4      	; 0x90e <__stack+0xaf>
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	8a 8f       	std	Y+26, r24	; 0x1a
     90e:	4d 8f       	std	Y+29, r20	; 0x1d
     910:	5e 8f       	std	Y+30, r21	; 0x1e
     912:	6f 8f       	std	Y+31, r22	; 0x1f
     914:	78 a3       	std	Y+32, r23	; 0x20
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	89 8f       	std	Y+25, r24	; 0x19
     91a:	ce 01       	movw	r24, r28
     91c:	49 96       	adiw	r24, 0x19	; 25
     91e:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     922:	a0 96       	adiw	r28, 0x20	; 32
     924:	e2 e1       	ldi	r30, 0x12	; 18
     926:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__>

0000092a <__divsf3>:
     92a:	a8 e1       	ldi	r26, 0x18	; 24
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	eb e9       	ldi	r30, 0x9B	; 155
     930:	f4 e0       	ldi	r31, 0x04	; 4
     932:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__prologue_saves__+0x10>
     936:	69 83       	std	Y+1, r22	; 0x01
     938:	7a 83       	std	Y+2, r23	; 0x02
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	9c 83       	std	Y+4, r25	; 0x04
     93e:	2d 83       	std	Y+5, r18	; 0x05
     940:	3e 83       	std	Y+6, r19	; 0x06
     942:	4f 83       	std	Y+7, r20	; 0x07
     944:	58 87       	std	Y+8, r21	; 0x08
     946:	b9 e0       	ldi	r27, 0x09	; 9
     948:	eb 2e       	mov	r14, r27
     94a:	f1 2c       	mov	r15, r1
     94c:	ec 0e       	add	r14, r28
     94e:	fd 1e       	adc	r15, r29
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	b7 01       	movw	r22, r14
     956:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     95a:	8e 01       	movw	r16, r28
     95c:	0f 5e       	subi	r16, 0xEF	; 239
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	ce 01       	movw	r24, r28
     962:	05 96       	adiw	r24, 0x05	; 5
     964:	b8 01       	movw	r22, r16
     966:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     96a:	29 85       	ldd	r18, Y+9	; 0x09
     96c:	22 30       	cpi	r18, 0x02	; 2
     96e:	08 f4       	brcc	.+2      	; 0x972 <__divsf3+0x48>
     970:	7e c0       	rjmp	.+252    	; 0xa6e <__divsf3+0x144>
     972:	39 89       	ldd	r19, Y+17	; 0x11
     974:	32 30       	cpi	r19, 0x02	; 2
     976:	10 f4       	brcc	.+4      	; 0x97c <__divsf3+0x52>
     978:	b8 01       	movw	r22, r16
     97a:	7c c0       	rjmp	.+248    	; 0xa74 <__divsf3+0x14a>
     97c:	8a 85       	ldd	r24, Y+10	; 0x0a
     97e:	9a 89       	ldd	r25, Y+18	; 0x12
     980:	89 27       	eor	r24, r25
     982:	8a 87       	std	Y+10, r24	; 0x0a
     984:	24 30       	cpi	r18, 0x04	; 4
     986:	11 f0       	breq	.+4      	; 0x98c <__divsf3+0x62>
     988:	22 30       	cpi	r18, 0x02	; 2
     98a:	31 f4       	brne	.+12     	; 0x998 <__divsf3+0x6e>
     98c:	23 17       	cp	r18, r19
     98e:	09 f0       	breq	.+2      	; 0x992 <__divsf3+0x68>
     990:	6e c0       	rjmp	.+220    	; 0xa6e <__divsf3+0x144>
     992:	60 e6       	ldi	r22, 0x60	; 96
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	6e c0       	rjmp	.+220    	; 0xa74 <__divsf3+0x14a>
     998:	34 30       	cpi	r19, 0x04	; 4
     99a:	39 f4       	brne	.+14     	; 0x9aa <__divsf3+0x80>
     99c:	1d 86       	std	Y+13, r1	; 0x0d
     99e:	1e 86       	std	Y+14, r1	; 0x0e
     9a0:	1f 86       	std	Y+15, r1	; 0x0f
     9a2:	18 8a       	std	Y+16, r1	; 0x10
     9a4:	1c 86       	std	Y+12, r1	; 0x0c
     9a6:	1b 86       	std	Y+11, r1	; 0x0b
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__divsf3+0x88>
     9aa:	32 30       	cpi	r19, 0x02	; 2
     9ac:	21 f4       	brne	.+8      	; 0x9b6 <__divsf3+0x8c>
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	89 87       	std	Y+9, r24	; 0x09
     9b2:	b7 01       	movw	r22, r14
     9b4:	5f c0       	rjmp	.+190    	; 0xa74 <__divsf3+0x14a>
     9b6:	2b 85       	ldd	r18, Y+11	; 0x0b
     9b8:	3c 85       	ldd	r19, Y+12	; 0x0c
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	28 1b       	sub	r18, r24
     9c0:	39 0b       	sbc	r19, r25
     9c2:	3c 87       	std	Y+12, r19	; 0x0c
     9c4:	2b 87       	std	Y+11, r18	; 0x0b
     9c6:	ed 84       	ldd	r14, Y+13	; 0x0d
     9c8:	fe 84       	ldd	r15, Y+14	; 0x0e
     9ca:	0f 85       	ldd	r16, Y+15	; 0x0f
     9cc:	18 89       	ldd	r17, Y+16	; 0x10
     9ce:	ad 88       	ldd	r10, Y+21	; 0x15
     9d0:	be 88       	ldd	r11, Y+22	; 0x16
     9d2:	cf 88       	ldd	r12, Y+23	; 0x17
     9d4:	d8 8c       	ldd	r13, Y+24	; 0x18
     9d6:	ea 14       	cp	r14, r10
     9d8:	fb 04       	cpc	r15, r11
     9da:	0c 05       	cpc	r16, r12
     9dc:	1d 05       	cpc	r17, r13
     9de:	40 f4       	brcc	.+16     	; 0x9f0 <__divsf3+0xc6>
     9e0:	ee 0c       	add	r14, r14
     9e2:	ff 1c       	adc	r15, r15
     9e4:	00 1f       	adc	r16, r16
     9e6:	11 1f       	adc	r17, r17
     9e8:	21 50       	subi	r18, 0x01	; 1
     9ea:	30 40       	sbci	r19, 0x00	; 0
     9ec:	3c 87       	std	Y+12, r19	; 0x0c
     9ee:	2b 87       	std	Y+11, r18	; 0x0b
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e4       	ldi	r27, 0x40	; 64
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	ea 14       	cp	r14, r10
     a06:	fb 04       	cpc	r15, r11
     a08:	0c 05       	cpc	r16, r12
     a0a:	1d 05       	cpc	r17, r13
     a0c:	40 f0       	brcs	.+16     	; 0xa1e <__divsf3+0xf4>
     a0e:	28 2b       	or	r18, r24
     a10:	39 2b       	or	r19, r25
     a12:	4a 2b       	or	r20, r26
     a14:	5b 2b       	or	r21, r27
     a16:	ea 18       	sub	r14, r10
     a18:	fb 08       	sbc	r15, r11
     a1a:	0c 09       	sbc	r16, r12
     a1c:	1d 09       	sbc	r17, r13
     a1e:	b6 95       	lsr	r27
     a20:	a7 95       	ror	r26
     a22:	97 95       	ror	r25
     a24:	87 95       	ror	r24
     a26:	ee 0c       	add	r14, r14
     a28:	ff 1c       	adc	r15, r15
     a2a:	00 1f       	adc	r16, r16
     a2c:	11 1f       	adc	r17, r17
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	6f 31       	cpi	r22, 0x1F	; 31
     a34:	71 05       	cpc	r23, r1
     a36:	31 f7       	brne	.-52     	; 0xa04 <__divsf3+0xda>
     a38:	da 01       	movw	r26, r20
     a3a:	c9 01       	movw	r24, r18
     a3c:	8f 77       	andi	r24, 0x7F	; 127
     a3e:	90 70       	andi	r25, 0x00	; 0
     a40:	a0 70       	andi	r26, 0x00	; 0
     a42:	b0 70       	andi	r27, 0x00	; 0
     a44:	80 34       	cpi	r24, 0x40	; 64
     a46:	91 05       	cpc	r25, r1
     a48:	a1 05       	cpc	r26, r1
     a4a:	b1 05       	cpc	r27, r1
     a4c:	61 f4       	brne	.+24     	; 0xa66 <__divsf3+0x13c>
     a4e:	27 fd       	sbrc	r18, 7
     a50:	0a c0       	rjmp	.+20     	; 0xa66 <__divsf3+0x13c>
     a52:	e1 14       	cp	r14, r1
     a54:	f1 04       	cpc	r15, r1
     a56:	01 05       	cpc	r16, r1
     a58:	11 05       	cpc	r17, r1
     a5a:	29 f0       	breq	.+10     	; 0xa66 <__divsf3+0x13c>
     a5c:	20 5c       	subi	r18, 0xC0	; 192
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	4f 4f       	sbci	r20, 0xFF	; 255
     a62:	5f 4f       	sbci	r21, 0xFF	; 255
     a64:	20 78       	andi	r18, 0x80	; 128
     a66:	2d 87       	std	Y+13, r18	; 0x0d
     a68:	3e 87       	std	Y+14, r19	; 0x0e
     a6a:	4f 87       	std	Y+15, r20	; 0x0f
     a6c:	58 8b       	std	Y+16, r21	; 0x10
     a6e:	be 01       	movw	r22, r28
     a70:	67 5f       	subi	r22, 0xF7	; 247
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	cb 01       	movw	r24, r22
     a76:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	ea e0       	ldi	r30, 0x0A	; 10
     a7e:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__epilogue_restores__+0x10>

00000a82 <__gtsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__gtsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__gtsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 96 09 	call	0x132c	; 0x132c <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__gtsf2+0x58>
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__epilogue_restores__+0x18>

00000ae2 <__gesf2>:
     ae2:	a8 e1       	ldi	r26, 0x18	; 24
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__prologue_saves__+0x18>
     aee:	69 83       	std	Y+1, r22	; 0x01
     af0:	7a 83       	std	Y+2, r23	; 0x02
     af2:	8b 83       	std	Y+3, r24	; 0x03
     af4:	9c 83       	std	Y+4, r25	; 0x04
     af6:	2d 83       	std	Y+5, r18	; 0x05
     af8:	3e 83       	std	Y+6, r19	; 0x06
     afa:	4f 83       	std	Y+7, r20	; 0x07
     afc:	58 87       	std	Y+8, r21	; 0x08
     afe:	89 e0       	ldi	r24, 0x09	; 9
     b00:	e8 2e       	mov	r14, r24
     b02:	f1 2c       	mov	r15, r1
     b04:	ec 0e       	add	r14, r28
     b06:	fd 1e       	adc	r15, r29
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	b7 01       	movw	r22, r14
     b0e:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     b12:	8e 01       	movw	r16, r28
     b14:	0f 5e       	subi	r16, 0xEF	; 239
     b16:	1f 4f       	sbci	r17, 0xFF	; 255
     b18:	ce 01       	movw	r24, r28
     b1a:	05 96       	adiw	r24, 0x05	; 5
     b1c:	b8 01       	movw	r22, r16
     b1e:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     b22:	89 85       	ldd	r24, Y+9	; 0x09
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	40 f0       	brcs	.+16     	; 0xb38 <__gesf2+0x56>
     b28:	89 89       	ldd	r24, Y+17	; 0x11
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	28 f0       	brcs	.+10     	; 0xb38 <__gesf2+0x56>
     b2e:	c7 01       	movw	r24, r14
     b30:	b8 01       	movw	r22, r16
     b32:	0e 94 96 09 	call	0x132c	; 0x132c <__fpcmp_parts_f>
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <__gesf2+0x58>
     b38:	8f ef       	ldi	r24, 0xFF	; 255
     b3a:	68 96       	adiw	r28, 0x18	; 24
     b3c:	e6 e0       	ldi	r30, 0x06	; 6
     b3e:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__epilogue_restores__+0x18>

00000b42 <__ltsf2>:
     b42:	a8 e1       	ldi	r26, 0x18	; 24
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	e7 ea       	ldi	r30, 0xA7	; 167
     b48:	f5 e0       	ldi	r31, 0x05	; 5
     b4a:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__prologue_saves__+0x18>
     b4e:	69 83       	std	Y+1, r22	; 0x01
     b50:	7a 83       	std	Y+2, r23	; 0x02
     b52:	8b 83       	std	Y+3, r24	; 0x03
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	2d 83       	std	Y+5, r18	; 0x05
     b58:	3e 83       	std	Y+6, r19	; 0x06
     b5a:	4f 83       	std	Y+7, r20	; 0x07
     b5c:	58 87       	std	Y+8, r21	; 0x08
     b5e:	89 e0       	ldi	r24, 0x09	; 9
     b60:	e8 2e       	mov	r14, r24
     b62:	f1 2c       	mov	r15, r1
     b64:	ec 0e       	add	r14, r28
     b66:	fd 1e       	adc	r15, r29
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	b7 01       	movw	r22, r14
     b6e:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     b72:	8e 01       	movw	r16, r28
     b74:	0f 5e       	subi	r16, 0xEF	; 239
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	ce 01       	movw	r24, r28
     b7a:	05 96       	adiw	r24, 0x05	; 5
     b7c:	b8 01       	movw	r22, r16
     b7e:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     b82:	89 85       	ldd	r24, Y+9	; 0x09
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	40 f0       	brcs	.+16     	; 0xb98 <__ltsf2+0x56>
     b88:	89 89       	ldd	r24, Y+17	; 0x11
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	28 f0       	brcs	.+10     	; 0xb98 <__ltsf2+0x56>
     b8e:	c7 01       	movw	r24, r14
     b90:	b8 01       	movw	r22, r16
     b92:	0e 94 96 09 	call	0x132c	; 0x132c <__fpcmp_parts_f>
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <__ltsf2+0x58>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	68 96       	adiw	r28, 0x18	; 24
     b9c:	e6 e0       	ldi	r30, 0x06	; 6
     b9e:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__epilogue_restores__+0x18>

00000ba2 <__floatsisf>:
     ba2:	a8 e0       	ldi	r26, 0x08	; 8
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 ed       	ldi	r30, 0xD7	; 215
     ba8:	f5 e0       	ldi	r31, 0x05	; 5
     baa:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__prologue_saves__+0x12>
     bae:	9b 01       	movw	r18, r22
     bb0:	ac 01       	movw	r20, r24
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	da 01       	movw	r26, r20
     bb8:	c9 01       	movw	r24, r18
     bba:	88 27       	eor	r24, r24
     bbc:	b7 fd       	sbrc	r27, 7
     bbe:	83 95       	inc	r24
     bc0:	99 27       	eor	r25, r25
     bc2:	aa 27       	eor	r26, r26
     bc4:	bb 27       	eor	r27, r27
     bc6:	b8 2e       	mov	r11, r24
     bc8:	21 15       	cp	r18, r1
     bca:	31 05       	cpc	r19, r1
     bcc:	41 05       	cpc	r20, r1
     bce:	51 05       	cpc	r21, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__floatsisf+0x36>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	3a c0       	rjmp	.+116    	; 0xc4c <__floatsisf+0xaa>
     bd8:	88 23       	and	r24, r24
     bda:	a9 f0       	breq	.+42     	; 0xc06 <__floatsisf+0x64>
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	38 07       	cpc	r19, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	48 07       	cpc	r20, r24
     be6:	80 e8       	ldi	r24, 0x80	; 128
     be8:	58 07       	cpc	r21, r24
     bea:	29 f4       	brne	.+10     	; 0xbf6 <__floatsisf+0x54>
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	9f ec       	ldi	r25, 0xCF	; 207
     bf4:	30 c0       	rjmp	.+96     	; 0xc56 <__floatsisf+0xb4>
     bf6:	ee 24       	eor	r14, r14
     bf8:	ff 24       	eor	r15, r15
     bfa:	87 01       	movw	r16, r14
     bfc:	e2 1a       	sub	r14, r18
     bfe:	f3 0a       	sbc	r15, r19
     c00:	04 0b       	sbc	r16, r20
     c02:	15 0b       	sbc	r17, r21
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <__floatsisf+0x68>
     c06:	79 01       	movw	r14, r18
     c08:	8a 01       	movw	r16, r20
     c0a:	8e e1       	ldi	r24, 0x1E	; 30
     c0c:	c8 2e       	mov	r12, r24
     c0e:	d1 2c       	mov	r13, r1
     c10:	dc 82       	std	Y+4, r13	; 0x04
     c12:	cb 82       	std	Y+3, r12	; 0x03
     c14:	ed 82       	std	Y+5, r14	; 0x05
     c16:	fe 82       	std	Y+6, r15	; 0x06
     c18:	0f 83       	std	Y+7, r16	; 0x07
     c1a:	18 87       	std	Y+8, r17	; 0x08
     c1c:	c8 01       	movw	r24, r16
     c1e:	b7 01       	movw	r22, r14
     c20:	0e 94 fa 07 	call	0xff4	; 0xff4 <__clzsi2>
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	18 16       	cp	r1, r24
     c28:	19 06       	cpc	r1, r25
     c2a:	84 f4       	brge	.+32     	; 0xc4c <__floatsisf+0xaa>
     c2c:	08 2e       	mov	r0, r24
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__floatsisf+0x96>
     c30:	ee 0c       	add	r14, r14
     c32:	ff 1c       	adc	r15, r15
     c34:	00 1f       	adc	r16, r16
     c36:	11 1f       	adc	r17, r17
     c38:	0a 94       	dec	r0
     c3a:	d2 f7       	brpl	.-12     	; 0xc30 <__floatsisf+0x8e>
     c3c:	ed 82       	std	Y+5, r14	; 0x05
     c3e:	fe 82       	std	Y+6, r15	; 0x06
     c40:	0f 83       	std	Y+7, r16	; 0x07
     c42:	18 87       	std	Y+8, r17	; 0x08
     c44:	c8 1a       	sub	r12, r24
     c46:	d9 0a       	sbc	r13, r25
     c48:	dc 82       	std	Y+4, r13	; 0x04
     c4a:	cb 82       	std	Y+3, r12	; 0x03
     c4c:	ba 82       	std	Y+2, r11	; 0x02
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     c56:	28 96       	adiw	r28, 0x08	; 8
     c58:	e9 e0       	ldi	r30, 0x09	; 9
     c5a:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__epilogue_restores__+0x12>

00000c5e <__fixsfsi>:
     c5e:	ac e0       	ldi	r26, 0x0C	; 12
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e5 e3       	ldi	r30, 0x35	; 53
     c64:	f6 e0       	ldi	r31, 0x06	; 6
     c66:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__prologue_saves__+0x20>
     c6a:	69 83       	std	Y+1, r22	; 0x01
     c6c:	7a 83       	std	Y+2, r23	; 0x02
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	9c 83       	std	Y+4, r25	; 0x04
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	be 01       	movw	r22, r28
     c78:	6b 5f       	subi	r22, 0xFB	; 251
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	61 f1       	breq	.+88     	; 0xcde <__fixsfsi+0x80>
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	50 f1       	brcs	.+84     	; 0xcde <__fixsfsi+0x80>
     c8a:	84 30       	cpi	r24, 0x04	; 4
     c8c:	21 f4       	brne	.+8      	; 0xc96 <__fixsfsi+0x38>
     c8e:	8e 81       	ldd	r24, Y+6	; 0x06
     c90:	88 23       	and	r24, r24
     c92:	51 f1       	breq	.+84     	; 0xce8 <__fixsfsi+0x8a>
     c94:	2e c0       	rjmp	.+92     	; 0xcf2 <__fixsfsi+0x94>
     c96:	2f 81       	ldd	r18, Y+7	; 0x07
     c98:	38 85       	ldd	r19, Y+8	; 0x08
     c9a:	37 fd       	sbrc	r19, 7
     c9c:	20 c0       	rjmp	.+64     	; 0xcde <__fixsfsi+0x80>
     c9e:	6e 81       	ldd	r22, Y+6	; 0x06
     ca0:	2f 31       	cpi	r18, 0x1F	; 31
     ca2:	31 05       	cpc	r19, r1
     ca4:	1c f0       	brlt	.+6      	; 0xcac <__fixsfsi+0x4e>
     ca6:	66 23       	and	r22, r22
     ca8:	f9 f0       	breq	.+62     	; 0xce8 <__fixsfsi+0x8a>
     caa:	23 c0       	rjmp	.+70     	; 0xcf2 <__fixsfsi+0x94>
     cac:	8e e1       	ldi	r24, 0x1E	; 30
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	82 1b       	sub	r24, r18
     cb2:	93 0b       	sbc	r25, r19
     cb4:	29 85       	ldd	r18, Y+9	; 0x09
     cb6:	3a 85       	ldd	r19, Y+10	; 0x0a
     cb8:	4b 85       	ldd	r20, Y+11	; 0x0b
     cba:	5c 85       	ldd	r21, Y+12	; 0x0c
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <__fixsfsi+0x68>
     cbe:	56 95       	lsr	r21
     cc0:	47 95       	ror	r20
     cc2:	37 95       	ror	r19
     cc4:	27 95       	ror	r18
     cc6:	8a 95       	dec	r24
     cc8:	d2 f7       	brpl	.-12     	; 0xcbe <__fixsfsi+0x60>
     cca:	66 23       	and	r22, r22
     ccc:	b1 f0       	breq	.+44     	; 0xcfa <__fixsfsi+0x9c>
     cce:	50 95       	com	r21
     cd0:	40 95       	com	r20
     cd2:	30 95       	com	r19
     cd4:	21 95       	neg	r18
     cd6:	3f 4f       	sbci	r19, 0xFF	; 255
     cd8:	4f 4f       	sbci	r20, 0xFF	; 255
     cda:	5f 4f       	sbci	r21, 0xFF	; 255
     cdc:	0e c0       	rjmp	.+28     	; 0xcfa <__fixsfsi+0x9c>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	09 c0       	rjmp	.+18     	; 0xcfa <__fixsfsi+0x9c>
     ce8:	2f ef       	ldi	r18, 0xFF	; 255
     cea:	3f ef       	ldi	r19, 0xFF	; 255
     cec:	4f ef       	ldi	r20, 0xFF	; 255
     cee:	5f e7       	ldi	r21, 0x7F	; 127
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__fixsfsi+0x9c>
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e8       	ldi	r21, 0x80	; 128
     cfa:	b9 01       	movw	r22, r18
     cfc:	ca 01       	movw	r24, r20
     cfe:	2c 96       	adiw	r28, 0x0c	; 12
     d00:	e2 e0       	ldi	r30, 0x02	; 2
     d02:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__epilogue_restores__+0x20>

00000d06 <__floatunsisf>:
     d06:	a8 e0       	ldi	r26, 0x08	; 8
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e9 e8       	ldi	r30, 0x89	; 137
     d0c:	f6 e0       	ldi	r31, 0x06	; 6
     d0e:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__prologue_saves__+0x10>
     d12:	7b 01       	movw	r14, r22
     d14:	8c 01       	movw	r16, r24
     d16:	61 15       	cp	r22, r1
     d18:	71 05       	cpc	r23, r1
     d1a:	81 05       	cpc	r24, r1
     d1c:	91 05       	cpc	r25, r1
     d1e:	19 f4       	brne	.+6      	; 0xd26 <__floatunsisf+0x20>
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	60 c0       	rjmp	.+192    	; 0xde6 <__floatunsisf+0xe0>
     d26:	83 e0       	ldi	r24, 0x03	; 3
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	8e e1       	ldi	r24, 0x1E	; 30
     d2c:	c8 2e       	mov	r12, r24
     d2e:	d1 2c       	mov	r13, r1
     d30:	dc 82       	std	Y+4, r13	; 0x04
     d32:	cb 82       	std	Y+3, r12	; 0x03
     d34:	ed 82       	std	Y+5, r14	; 0x05
     d36:	fe 82       	std	Y+6, r15	; 0x06
     d38:	0f 83       	std	Y+7, r16	; 0x07
     d3a:	18 87       	std	Y+8, r17	; 0x08
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	0e 94 fa 07 	call	0xff4	; 0xff4 <__clzsi2>
     d44:	fc 01       	movw	r30, r24
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	f7 ff       	sbrs	r31, 7
     d4a:	3b c0       	rjmp	.+118    	; 0xdc2 <__floatunsisf+0xbc>
     d4c:	22 27       	eor	r18, r18
     d4e:	33 27       	eor	r19, r19
     d50:	2e 1b       	sub	r18, r30
     d52:	3f 0b       	sbc	r19, r31
     d54:	57 01       	movw	r10, r14
     d56:	68 01       	movw	r12, r16
     d58:	02 2e       	mov	r0, r18
     d5a:	04 c0       	rjmp	.+8      	; 0xd64 <__floatunsisf+0x5e>
     d5c:	d6 94       	lsr	r13
     d5e:	c7 94       	ror	r12
     d60:	b7 94       	ror	r11
     d62:	a7 94       	ror	r10
     d64:	0a 94       	dec	r0
     d66:	d2 f7       	brpl	.-12     	; 0xd5c <__floatunsisf+0x56>
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 e0       	ldi	r26, 0x00	; 0
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <__floatunsisf+0x7c>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	aa 1f       	adc	r26, r26
     d80:	bb 1f       	adc	r27, r27
     d82:	2a 95       	dec	r18
     d84:	d2 f7       	brpl	.-12     	; 0xd7a <__floatunsisf+0x74>
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	a1 09       	sbc	r26, r1
     d8a:	b1 09       	sbc	r27, r1
     d8c:	8e 21       	and	r24, r14
     d8e:	9f 21       	and	r25, r15
     d90:	a0 23       	and	r26, r16
     d92:	b1 23       	and	r27, r17
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	a1 05       	cpc	r26, r1
     d98:	b1 05       	cpc	r27, r1
     d9a:	21 f0       	breq	.+8      	; 0xda4 <__floatunsisf+0x9e>
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	4a 29       	or	r20, r10
     da6:	5b 29       	or	r21, r11
     da8:	6c 29       	or	r22, r12
     daa:	7d 29       	or	r23, r13
     dac:	4d 83       	std	Y+5, r20	; 0x05
     dae:	5e 83       	std	Y+6, r21	; 0x06
     db0:	6f 83       	std	Y+7, r22	; 0x07
     db2:	78 87       	std	Y+8, r23	; 0x08
     db4:	8e e1       	ldi	r24, 0x1E	; 30
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	8e 1b       	sub	r24, r30
     dba:	9f 0b       	sbc	r25, r31
     dbc:	9c 83       	std	Y+4, r25	; 0x04
     dbe:	8b 83       	std	Y+3, r24	; 0x03
     dc0:	12 c0       	rjmp	.+36     	; 0xde6 <__floatunsisf+0xe0>
     dc2:	30 97       	sbiw	r30, 0x00	; 0
     dc4:	81 f0       	breq	.+32     	; 0xde6 <__floatunsisf+0xe0>
     dc6:	0e 2e       	mov	r0, r30
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <__floatunsisf+0xcc>
     dca:	ee 0c       	add	r14, r14
     dcc:	ff 1c       	adc	r15, r15
     dce:	00 1f       	adc	r16, r16
     dd0:	11 1f       	adc	r17, r17
     dd2:	0a 94       	dec	r0
     dd4:	d2 f7       	brpl	.-12     	; 0xdca <__floatunsisf+0xc4>
     dd6:	ed 82       	std	Y+5, r14	; 0x05
     dd8:	fe 82       	std	Y+6, r15	; 0x06
     dda:	0f 83       	std	Y+7, r16	; 0x07
     ddc:	18 87       	std	Y+8, r17	; 0x08
     dde:	ce 1a       	sub	r12, r30
     de0:	df 0a       	sbc	r13, r31
     de2:	dc 82       	std	Y+4, r13	; 0x04
     de4:	cb 82       	std	Y+3, r12	; 0x03
     de6:	1a 82       	std	Y+2, r1	; 0x02
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     df0:	28 96       	adiw	r28, 0x08	; 8
     df2:	ea e0       	ldi	r30, 0x0A	; 10
     df4:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__epilogue_restores__+0x10>

00000df8 <__lshrdi3>:
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	60 97       	sbiw	r28, 0x10	; 16
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	a8 2f       	mov	r26, r24
     e14:	00 23       	and	r16, r16
     e16:	09 f4       	brne	.+2      	; 0xe1a <__lshrdi3+0x22>
     e18:	61 c0       	rjmp	.+194    	; 0xedc <__lshrdi3+0xe4>
     e1a:	7e 01       	movw	r14, r28
     e1c:	08 94       	sec
     e1e:	e1 1c       	adc	r14, r1
     e20:	f1 1c       	adc	r15, r1
     e22:	88 e0       	ldi	r24, 0x08	; 8
     e24:	f7 01       	movw	r30, r14
     e26:	11 92       	st	Z+, r1
     e28:	8a 95       	dec	r24
     e2a:	e9 f7       	brne	.-6      	; 0xe26 <__lshrdi3+0x2e>
     e2c:	29 83       	std	Y+1, r18	; 0x01
     e2e:	3a 83       	std	Y+2, r19	; 0x02
     e30:	4b 83       	std	Y+3, r20	; 0x03
     e32:	5c 83       	std	Y+4, r21	; 0x04
     e34:	6d 83       	std	Y+5, r22	; 0x05
     e36:	7e 83       	std	Y+6, r23	; 0x06
     e38:	af 83       	std	Y+7, r26	; 0x07
     e3a:	98 87       	std	Y+8, r25	; 0x08
     e3c:	80 e2       	ldi	r24, 0x20	; 32
     e3e:	80 1b       	sub	r24, r16
     e40:	e8 2f       	mov	r30, r24
     e42:	ff 27       	eor	r31, r31
     e44:	e7 fd       	sbrc	r30, 7
     e46:	f0 95       	com	r31
     e48:	4d 81       	ldd	r20, Y+5	; 0x05
     e4a:	5e 81       	ldd	r21, Y+6	; 0x06
     e4c:	6f 81       	ldd	r22, Y+7	; 0x07
     e4e:	78 85       	ldd	r23, Y+8	; 0x08
     e50:	18 16       	cp	r1, r24
     e52:	84 f0       	brlt	.+32     	; 0xe74 <__lshrdi3+0x7c>
     e54:	1d 86       	std	Y+13, r1	; 0x0d
     e56:	1e 86       	std	Y+14, r1	; 0x0e
     e58:	1f 86       	std	Y+15, r1	; 0x0f
     e5a:	18 8a       	std	Y+16, r1	; 0x10
     e5c:	88 27       	eor	r24, r24
     e5e:	99 27       	eor	r25, r25
     e60:	8e 1b       	sub	r24, r30
     e62:	9f 0b       	sbc	r25, r31
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <__lshrdi3+0x76>
     e66:	76 95       	lsr	r23
     e68:	67 95       	ror	r22
     e6a:	57 95       	ror	r21
     e6c:	47 95       	ror	r20
     e6e:	8a 95       	dec	r24
     e70:	d2 f7       	brpl	.-12     	; 0xe66 <__lshrdi3+0x6e>
     e72:	28 c0       	rjmp	.+80     	; 0xec4 <__lshrdi3+0xcc>
     e74:	20 2f       	mov	r18, r16
     e76:	33 27       	eor	r19, r19
     e78:	27 fd       	sbrc	r18, 7
     e7a:	30 95       	com	r19
     e7c:	db 01       	movw	r26, r22
     e7e:	ca 01       	movw	r24, r20
     e80:	02 2e       	mov	r0, r18
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <__lshrdi3+0x94>
     e84:	b6 95       	lsr	r27
     e86:	a7 95       	ror	r26
     e88:	97 95       	ror	r25
     e8a:	87 95       	ror	r24
     e8c:	0a 94       	dec	r0
     e8e:	d2 f7       	brpl	.-12     	; 0xe84 <__lshrdi3+0x8c>
     e90:	8d 87       	std	Y+13, r24	; 0x0d
     e92:	9e 87       	std	Y+14, r25	; 0x0e
     e94:	af 87       	std	Y+15, r26	; 0x0f
     e96:	b8 8b       	std	Y+16, r27	; 0x10
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <__lshrdi3+0xaa>
     e9a:	44 0f       	add	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	66 1f       	adc	r22, r22
     ea0:	77 1f       	adc	r23, r23
     ea2:	ea 95       	dec	r30
     ea4:	d2 f7       	brpl	.-12     	; 0xe9a <__lshrdi3+0xa2>
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	ab 81       	ldd	r26, Y+3	; 0x03
     eac:	bc 81       	ldd	r27, Y+4	; 0x04
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <__lshrdi3+0xc0>
     eb0:	b6 95       	lsr	r27
     eb2:	a7 95       	ror	r26
     eb4:	97 95       	ror	r25
     eb6:	87 95       	ror	r24
     eb8:	2a 95       	dec	r18
     eba:	d2 f7       	brpl	.-12     	; 0xeb0 <__lshrdi3+0xb8>
     ebc:	48 2b       	or	r20, r24
     ebe:	59 2b       	or	r21, r25
     ec0:	6a 2b       	or	r22, r26
     ec2:	7b 2b       	or	r23, r27
     ec4:	49 87       	std	Y+9, r20	; 0x09
     ec6:	5a 87       	std	Y+10, r21	; 0x0a
     ec8:	6b 87       	std	Y+11, r22	; 0x0b
     eca:	7c 87       	std	Y+12, r23	; 0x0c
     ecc:	29 85       	ldd	r18, Y+9	; 0x09
     ece:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed0:	4b 85       	ldd	r20, Y+11	; 0x0b
     ed2:	5c 85       	ldd	r21, Y+12	; 0x0c
     ed4:	6d 85       	ldd	r22, Y+13	; 0x0d
     ed6:	7e 85       	ldd	r23, Y+14	; 0x0e
     ed8:	af 85       	ldd	r26, Y+15	; 0x0f
     eda:	98 89       	ldd	r25, Y+16	; 0x10
     edc:	8a 2f       	mov	r24, r26
     ede:	60 96       	adiw	r28, 0x10	; 16
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	08 95       	ret

00000ef6 <__ashldi3>:
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	60 97       	sbiw	r28, 0x10	; 16
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	a8 2f       	mov	r26, r24
     f12:	00 23       	and	r16, r16
     f14:	09 f4       	brne	.+2      	; 0xf18 <__ashldi3+0x22>
     f16:	61 c0       	rjmp	.+194    	; 0xfda <__ashldi3+0xe4>
     f18:	7e 01       	movw	r14, r28
     f1a:	08 94       	sec
     f1c:	e1 1c       	adc	r14, r1
     f1e:	f1 1c       	adc	r15, r1
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	f7 01       	movw	r30, r14
     f24:	11 92       	st	Z+, r1
     f26:	8a 95       	dec	r24
     f28:	e9 f7       	brne	.-6      	; 0xf24 <__ashldi3+0x2e>
     f2a:	29 83       	std	Y+1, r18	; 0x01
     f2c:	3a 83       	std	Y+2, r19	; 0x02
     f2e:	4b 83       	std	Y+3, r20	; 0x03
     f30:	5c 83       	std	Y+4, r21	; 0x04
     f32:	6d 83       	std	Y+5, r22	; 0x05
     f34:	7e 83       	std	Y+6, r23	; 0x06
     f36:	af 83       	std	Y+7, r26	; 0x07
     f38:	98 87       	std	Y+8, r25	; 0x08
     f3a:	80 e2       	ldi	r24, 0x20	; 32
     f3c:	80 1b       	sub	r24, r16
     f3e:	e8 2f       	mov	r30, r24
     f40:	ff 27       	eor	r31, r31
     f42:	e7 fd       	sbrc	r30, 7
     f44:	f0 95       	com	r31
     f46:	49 81       	ldd	r20, Y+1	; 0x01
     f48:	5a 81       	ldd	r21, Y+2	; 0x02
     f4a:	6b 81       	ldd	r22, Y+3	; 0x03
     f4c:	7c 81       	ldd	r23, Y+4	; 0x04
     f4e:	18 16       	cp	r1, r24
     f50:	84 f0       	brlt	.+32     	; 0xf72 <__ashldi3+0x7c>
     f52:	19 86       	std	Y+9, r1	; 0x09
     f54:	1a 86       	std	Y+10, r1	; 0x0a
     f56:	1b 86       	std	Y+11, r1	; 0x0b
     f58:	1c 86       	std	Y+12, r1	; 0x0c
     f5a:	88 27       	eor	r24, r24
     f5c:	99 27       	eor	r25, r25
     f5e:	8e 1b       	sub	r24, r30
     f60:	9f 0b       	sbc	r25, r31
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <__ashldi3+0x76>
     f64:	44 0f       	add	r20, r20
     f66:	55 1f       	adc	r21, r21
     f68:	66 1f       	adc	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	8a 95       	dec	r24
     f6e:	d2 f7       	brpl	.-12     	; 0xf64 <__ashldi3+0x6e>
     f70:	28 c0       	rjmp	.+80     	; 0xfc2 <__ashldi3+0xcc>
     f72:	20 2f       	mov	r18, r16
     f74:	33 27       	eor	r19, r19
     f76:	27 fd       	sbrc	r18, 7
     f78:	30 95       	com	r19
     f7a:	db 01       	movw	r26, r22
     f7c:	ca 01       	movw	r24, r20
     f7e:	02 2e       	mov	r0, r18
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <__ashldi3+0x94>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	aa 1f       	adc	r26, r26
     f88:	bb 1f       	adc	r27, r27
     f8a:	0a 94       	dec	r0
     f8c:	d2 f7       	brpl	.-12     	; 0xf82 <__ashldi3+0x8c>
     f8e:	89 87       	std	Y+9, r24	; 0x09
     f90:	9a 87       	std	Y+10, r25	; 0x0a
     f92:	ab 87       	std	Y+11, r26	; 0x0b
     f94:	bc 87       	std	Y+12, r27	; 0x0c
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <__ashldi3+0xaa>
     f98:	76 95       	lsr	r23
     f9a:	67 95       	ror	r22
     f9c:	57 95       	ror	r21
     f9e:	47 95       	ror	r20
     fa0:	ea 95       	dec	r30
     fa2:	d2 f7       	brpl	.-12     	; 0xf98 <__ashldi3+0xa2>
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	af 81       	ldd	r26, Y+7	; 0x07
     faa:	b8 85       	ldd	r27, Y+8	; 0x08
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <__ashldi3+0xc0>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	aa 1f       	adc	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	2a 95       	dec	r18
     fb8:	d2 f7       	brpl	.-12     	; 0xfae <__ashldi3+0xb8>
     fba:	48 2b       	or	r20, r24
     fbc:	59 2b       	or	r21, r25
     fbe:	6a 2b       	or	r22, r26
     fc0:	7b 2b       	or	r23, r27
     fc2:	4d 87       	std	Y+13, r20	; 0x0d
     fc4:	5e 87       	std	Y+14, r21	; 0x0e
     fc6:	6f 87       	std	Y+15, r22	; 0x0f
     fc8:	78 8b       	std	Y+16, r23	; 0x10
     fca:	29 85       	ldd	r18, Y+9	; 0x09
     fcc:	3a 85       	ldd	r19, Y+10	; 0x0a
     fce:	4b 85       	ldd	r20, Y+11	; 0x0b
     fd0:	5c 85       	ldd	r21, Y+12	; 0x0c
     fd2:	6d 85       	ldd	r22, Y+13	; 0x0d
     fd4:	7e 85       	ldd	r23, Y+14	; 0x0e
     fd6:	af 85       	ldd	r26, Y+15	; 0x0f
     fd8:	98 89       	ldd	r25, Y+16	; 0x10
     fda:	8a 2f       	mov	r24, r26
     fdc:	60 96       	adiw	r28, 0x10	; 16
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	08 95       	ret

00000ff4 <__clzsi2>:
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	7b 01       	movw	r14, r22
     ffe:	8c 01       	movw	r16, r24
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	e8 16       	cp	r14, r24
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	f8 06       	cpc	r15, r24
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	08 07       	cpc	r16, r24
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	18 07       	cpc	r17, r24
    1010:	88 f4       	brcc	.+34     	; 0x1034 <__clzsi2+0x40>
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	e8 16       	cp	r14, r24
    1016:	f1 04       	cpc	r15, r1
    1018:	01 05       	cpc	r16, r1
    101a:	11 05       	cpc	r17, r1
    101c:	31 f0       	breq	.+12     	; 0x102a <__clzsi2+0x36>
    101e:	28 f0       	brcs	.+10     	; 0x102a <__clzsi2+0x36>
    1020:	88 e0       	ldi	r24, 0x08	; 8
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	17 c0       	rjmp	.+46     	; 0x1058 <__clzsi2+0x64>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a0 e0       	ldi	r26, 0x00	; 0
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	12 c0       	rjmp	.+36     	; 0x1058 <__clzsi2+0x64>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	e8 16       	cp	r14, r24
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	f8 06       	cpc	r15, r24
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 07       	cpc	r16, r24
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	18 07       	cpc	r17, r24
    1044:	28 f0       	brcs	.+10     	; 0x1050 <__clzsi2+0x5c>
    1046:	88 e1       	ldi	r24, 0x18	; 24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a0 e0       	ldi	r26, 0x00	; 0
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__clzsi2+0x64>
    1050:	80 e1       	ldi	r24, 0x10	; 16
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	20 e2       	ldi	r18, 0x20	; 32
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	28 1b       	sub	r18, r24
    1062:	39 0b       	sbc	r19, r25
    1064:	4a 0b       	sbc	r20, r26
    1066:	5b 0b       	sbc	r21, r27
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <__clzsi2+0x7e>
    106a:	16 95       	lsr	r17
    106c:	07 95       	ror	r16
    106e:	f7 94       	ror	r15
    1070:	e7 94       	ror	r14
    1072:	8a 95       	dec	r24
    1074:	d2 f7       	brpl	.-12     	; 0x106a <__clzsi2+0x76>
    1076:	f7 01       	movw	r30, r14
    1078:	e8 59       	subi	r30, 0x98	; 152
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	80 81       	ld	r24, Z
    107e:	28 1b       	sub	r18, r24
    1080:	31 09       	sbc	r19, r1
    1082:	41 09       	sbc	r20, r1
    1084:	51 09       	sbc	r21, r1
    1086:	c9 01       	movw	r24, r18
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	08 95       	ret

00001092 <__pack_f>:
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	fc 01       	movw	r30, r24
    109e:	e4 80       	ldd	r14, Z+4	; 0x04
    10a0:	f5 80       	ldd	r15, Z+5	; 0x05
    10a2:	06 81       	ldd	r16, Z+6	; 0x06
    10a4:	17 81       	ldd	r17, Z+7	; 0x07
    10a6:	d1 80       	ldd	r13, Z+1	; 0x01
    10a8:	80 81       	ld	r24, Z
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	48 f4       	brcc	.+18     	; 0x10c0 <__pack_f+0x2e>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a0 e1       	ldi	r26, 0x10	; 16
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e8 2a       	or	r14, r24
    10b8:	f9 2a       	or	r15, r25
    10ba:	0a 2b       	or	r16, r26
    10bc:	1b 2b       	or	r17, r27
    10be:	a5 c0       	rjmp	.+330    	; 0x120a <__pack_f+0x178>
    10c0:	84 30       	cpi	r24, 0x04	; 4
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <__pack_f+0x34>
    10c4:	9f c0       	rjmp	.+318    	; 0x1204 <__pack_f+0x172>
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <__pack_f+0x40>
    10ca:	ee 24       	eor	r14, r14
    10cc:	ff 24       	eor	r15, r15
    10ce:	87 01       	movw	r16, r14
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <__pack_f+0x4a>
    10d2:	e1 14       	cp	r14, r1
    10d4:	f1 04       	cpc	r15, r1
    10d6:	01 05       	cpc	r16, r1
    10d8:	11 05       	cpc	r17, r1
    10da:	19 f4       	brne	.+6      	; 0x10e2 <__pack_f+0x50>
    10dc:	e0 e0       	ldi	r30, 0x00	; 0
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	96 c0       	rjmp	.+300    	; 0x120e <__pack_f+0x17c>
    10e2:	62 81       	ldd	r22, Z+2	; 0x02
    10e4:	73 81       	ldd	r23, Z+3	; 0x03
    10e6:	9f ef       	ldi	r25, 0xFF	; 255
    10e8:	62 38       	cpi	r22, 0x82	; 130
    10ea:	79 07       	cpc	r23, r25
    10ec:	0c f0       	brlt	.+2      	; 0x10f0 <__pack_f+0x5e>
    10ee:	5b c0       	rjmp	.+182    	; 0x11a6 <__pack_f+0x114>
    10f0:	22 e8       	ldi	r18, 0x82	; 130
    10f2:	3f ef       	ldi	r19, 0xFF	; 255
    10f4:	26 1b       	sub	r18, r22
    10f6:	37 0b       	sbc	r19, r23
    10f8:	2a 31       	cpi	r18, 0x1A	; 26
    10fa:	31 05       	cpc	r19, r1
    10fc:	2c f0       	brlt	.+10     	; 0x1108 <__pack_f+0x76>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	2a c0       	rjmp	.+84     	; 0x115c <__pack_f+0xca>
    1108:	b8 01       	movw	r22, r16
    110a:	a7 01       	movw	r20, r14
    110c:	02 2e       	mov	r0, r18
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <__pack_f+0x86>
    1110:	76 95       	lsr	r23
    1112:	67 95       	ror	r22
    1114:	57 95       	ror	r21
    1116:	47 95       	ror	r20
    1118:	0a 94       	dec	r0
    111a:	d2 f7       	brpl	.-12     	; 0x1110 <__pack_f+0x7e>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	04 c0       	rjmp	.+8      	; 0x112e <__pack_f+0x9c>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	aa 1f       	adc	r26, r26
    112c:	bb 1f       	adc	r27, r27
    112e:	2a 95       	dec	r18
    1130:	d2 f7       	brpl	.-12     	; 0x1126 <__pack_f+0x94>
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	a1 09       	sbc	r26, r1
    1136:	b1 09       	sbc	r27, r1
    1138:	8e 21       	and	r24, r14
    113a:	9f 21       	and	r25, r15
    113c:	a0 23       	and	r26, r16
    113e:	b1 23       	and	r27, r17
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	a1 05       	cpc	r26, r1
    1144:	b1 05       	cpc	r27, r1
    1146:	21 f0       	breq	.+8      	; 0x1150 <__pack_f+0xbe>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a0 e0       	ldi	r26, 0x00	; 0
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	9a 01       	movw	r18, r20
    1152:	ab 01       	movw	r20, r22
    1154:	28 2b       	or	r18, r24
    1156:	39 2b       	or	r19, r25
    1158:	4a 2b       	or	r20, r26
    115a:	5b 2b       	or	r21, r27
    115c:	da 01       	movw	r26, r20
    115e:	c9 01       	movw	r24, r18
    1160:	8f 77       	andi	r24, 0x7F	; 127
    1162:	90 70       	andi	r25, 0x00	; 0
    1164:	a0 70       	andi	r26, 0x00	; 0
    1166:	b0 70       	andi	r27, 0x00	; 0
    1168:	80 34       	cpi	r24, 0x40	; 64
    116a:	91 05       	cpc	r25, r1
    116c:	a1 05       	cpc	r26, r1
    116e:	b1 05       	cpc	r27, r1
    1170:	39 f4       	brne	.+14     	; 0x1180 <__pack_f+0xee>
    1172:	27 ff       	sbrs	r18, 7
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <__pack_f+0xf6>
    1176:	20 5c       	subi	r18, 0xC0	; 192
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	4f 4f       	sbci	r20, 0xFF	; 255
    117c:	5f 4f       	sbci	r21, 0xFF	; 255
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <__pack_f+0xf6>
    1180:	21 5c       	subi	r18, 0xC1	; 193
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	4f 4f       	sbci	r20, 0xFF	; 255
    1186:	5f 4f       	sbci	r21, 0xFF	; 255
    1188:	e0 e0       	ldi	r30, 0x00	; 0
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	20 30       	cpi	r18, 0x00	; 0
    118e:	a0 e0       	ldi	r26, 0x00	; 0
    1190:	3a 07       	cpc	r19, r26
    1192:	a0 e0       	ldi	r26, 0x00	; 0
    1194:	4a 07       	cpc	r20, r26
    1196:	a0 e4       	ldi	r26, 0x40	; 64
    1198:	5a 07       	cpc	r21, r26
    119a:	10 f0       	brcs	.+4      	; 0x11a0 <__pack_f+0x10e>
    119c:	e1 e0       	ldi	r30, 0x01	; 1
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	79 01       	movw	r14, r18
    11a2:	8a 01       	movw	r16, r20
    11a4:	27 c0       	rjmp	.+78     	; 0x11f4 <__pack_f+0x162>
    11a6:	60 38       	cpi	r22, 0x80	; 128
    11a8:	71 05       	cpc	r23, r1
    11aa:	64 f5       	brge	.+88     	; 0x1204 <__pack_f+0x172>
    11ac:	fb 01       	movw	r30, r22
    11ae:	e1 58       	subi	r30, 0x81	; 129
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	d8 01       	movw	r26, r16
    11b4:	c7 01       	movw	r24, r14
    11b6:	8f 77       	andi	r24, 0x7F	; 127
    11b8:	90 70       	andi	r25, 0x00	; 0
    11ba:	a0 70       	andi	r26, 0x00	; 0
    11bc:	b0 70       	andi	r27, 0x00	; 0
    11be:	80 34       	cpi	r24, 0x40	; 64
    11c0:	91 05       	cpc	r25, r1
    11c2:	a1 05       	cpc	r26, r1
    11c4:	b1 05       	cpc	r27, r1
    11c6:	39 f4       	brne	.+14     	; 0x11d6 <__pack_f+0x144>
    11c8:	e7 fe       	sbrs	r14, 7
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <__pack_f+0x154>
    11cc:	80 e4       	ldi	r24, 0x40	; 64
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <__pack_f+0x14c>
    11d6:	8f e3       	ldi	r24, 0x3F	; 63
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a0 e0       	ldi	r26, 0x00	; 0
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e8 0e       	add	r14, r24
    11e0:	f9 1e       	adc	r15, r25
    11e2:	0a 1f       	adc	r16, r26
    11e4:	1b 1f       	adc	r17, r27
    11e6:	17 ff       	sbrs	r17, 7
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <__pack_f+0x162>
    11ea:	16 95       	lsr	r17
    11ec:	07 95       	ror	r16
    11ee:	f7 94       	ror	r15
    11f0:	e7 94       	ror	r14
    11f2:	31 96       	adiw	r30, 0x01	; 1
    11f4:	87 e0       	ldi	r24, 0x07	; 7
    11f6:	16 95       	lsr	r17
    11f8:	07 95       	ror	r16
    11fa:	f7 94       	ror	r15
    11fc:	e7 94       	ror	r14
    11fe:	8a 95       	dec	r24
    1200:	d1 f7       	brne	.-12     	; 0x11f6 <__pack_f+0x164>
    1202:	05 c0       	rjmp	.+10     	; 0x120e <__pack_f+0x17c>
    1204:	ee 24       	eor	r14, r14
    1206:	ff 24       	eor	r15, r15
    1208:	87 01       	movw	r16, r14
    120a:	ef ef       	ldi	r30, 0xFF	; 255
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	6e 2f       	mov	r22, r30
    1210:	67 95       	ror	r22
    1212:	66 27       	eor	r22, r22
    1214:	67 95       	ror	r22
    1216:	90 2f       	mov	r25, r16
    1218:	9f 77       	andi	r25, 0x7F	; 127
    121a:	d7 94       	ror	r13
    121c:	dd 24       	eor	r13, r13
    121e:	d7 94       	ror	r13
    1220:	8e 2f       	mov	r24, r30
    1222:	86 95       	lsr	r24
    1224:	49 2f       	mov	r20, r25
    1226:	46 2b       	or	r20, r22
    1228:	58 2f       	mov	r21, r24
    122a:	5d 29       	or	r21, r13
    122c:	b7 01       	movw	r22, r14
    122e:	ca 01       	movw	r24, r20
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	08 95       	ret

0000123c <__unpack_f>:
    123c:	fc 01       	movw	r30, r24
    123e:	db 01       	movw	r26, r22
    1240:	40 81       	ld	r20, Z
    1242:	51 81       	ldd	r21, Z+1	; 0x01
    1244:	22 81       	ldd	r18, Z+2	; 0x02
    1246:	62 2f       	mov	r22, r18
    1248:	6f 77       	andi	r22, 0x7F	; 127
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	22 1f       	adc	r18, r18
    124e:	22 27       	eor	r18, r18
    1250:	22 1f       	adc	r18, r18
    1252:	93 81       	ldd	r25, Z+3	; 0x03
    1254:	89 2f       	mov	r24, r25
    1256:	88 0f       	add	r24, r24
    1258:	82 2b       	or	r24, r18
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	99 1f       	adc	r25, r25
    1260:	99 27       	eor	r25, r25
    1262:	99 1f       	adc	r25, r25
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	9c 93       	st	X, r25
    1268:	11 97       	sbiw	r26, 0x01	; 1
    126a:	21 15       	cp	r18, r1
    126c:	31 05       	cpc	r19, r1
    126e:	a9 f5       	brne	.+106    	; 0x12da <__unpack_f+0x9e>
    1270:	41 15       	cp	r20, r1
    1272:	51 05       	cpc	r21, r1
    1274:	61 05       	cpc	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	11 f4       	brne	.+4      	; 0x127e <__unpack_f+0x42>
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	37 c0       	rjmp	.+110    	; 0x12ec <__unpack_f+0xb0>
    127e:	82 e8       	ldi	r24, 0x82	; 130
    1280:	9f ef       	ldi	r25, 0xFF	; 255
    1282:	13 96       	adiw	r26, 0x03	; 3
    1284:	9c 93       	st	X, r25
    1286:	8e 93       	st	-X, r24
    1288:	12 97       	sbiw	r26, 0x02	; 2
    128a:	9a 01       	movw	r18, r20
    128c:	ab 01       	movw	r20, r22
    128e:	67 e0       	ldi	r22, 0x07	; 7
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	44 1f       	adc	r20, r20
    1296:	55 1f       	adc	r21, r21
    1298:	6a 95       	dec	r22
    129a:	d1 f7       	brne	.-12     	; 0x1290 <__unpack_f+0x54>
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	8c 93       	st	X, r24
    12a0:	0d c0       	rjmp	.+26     	; 0x12bc <__unpack_f+0x80>
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	44 1f       	adc	r20, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	12 96       	adiw	r26, 0x02	; 2
    12ac:	8d 91       	ld	r24, X+
    12ae:	9c 91       	ld	r25, X
    12b0:	13 97       	sbiw	r26, 0x03	; 3
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	13 96       	adiw	r26, 0x03	; 3
    12b6:	9c 93       	st	X, r25
    12b8:	8e 93       	st	-X, r24
    12ba:	12 97       	sbiw	r26, 0x02	; 2
    12bc:	20 30       	cpi	r18, 0x00	; 0
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	38 07       	cpc	r19, r24
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	48 07       	cpc	r20, r24
    12c6:	80 e4       	ldi	r24, 0x40	; 64
    12c8:	58 07       	cpc	r21, r24
    12ca:	58 f3       	brcs	.-42     	; 0x12a2 <__unpack_f+0x66>
    12cc:	14 96       	adiw	r26, 0x04	; 4
    12ce:	2d 93       	st	X+, r18
    12d0:	3d 93       	st	X+, r19
    12d2:	4d 93       	st	X+, r20
    12d4:	5c 93       	st	X, r21
    12d6:	17 97       	sbiw	r26, 0x07	; 7
    12d8:	08 95       	ret
    12da:	2f 3f       	cpi	r18, 0xFF	; 255
    12dc:	31 05       	cpc	r19, r1
    12de:	79 f4       	brne	.+30     	; 0x12fe <__unpack_f+0xc2>
    12e0:	41 15       	cp	r20, r1
    12e2:	51 05       	cpc	r21, r1
    12e4:	61 05       	cpc	r22, r1
    12e6:	71 05       	cpc	r23, r1
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <__unpack_f+0xb4>
    12ea:	84 e0       	ldi	r24, 0x04	; 4
    12ec:	8c 93       	st	X, r24
    12ee:	08 95       	ret
    12f0:	64 ff       	sbrs	r22, 4
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <__unpack_f+0xbe>
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	8c 93       	st	X, r24
    12f8:	12 c0       	rjmp	.+36     	; 0x131e <__unpack_f+0xe2>
    12fa:	1c 92       	st	X, r1
    12fc:	10 c0       	rjmp	.+32     	; 0x131e <__unpack_f+0xe2>
    12fe:	2f 57       	subi	r18, 0x7F	; 127
    1300:	30 40       	sbci	r19, 0x00	; 0
    1302:	13 96       	adiw	r26, 0x03	; 3
    1304:	3c 93       	st	X, r19
    1306:	2e 93       	st	-X, r18
    1308:	12 97       	sbiw	r26, 0x02	; 2
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	8c 93       	st	X, r24
    130e:	87 e0       	ldi	r24, 0x07	; 7
    1310:	44 0f       	add	r20, r20
    1312:	55 1f       	adc	r21, r21
    1314:	66 1f       	adc	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	8a 95       	dec	r24
    131a:	d1 f7       	brne	.-12     	; 0x1310 <__unpack_f+0xd4>
    131c:	70 64       	ori	r23, 0x40	; 64
    131e:	14 96       	adiw	r26, 0x04	; 4
    1320:	4d 93       	st	X+, r20
    1322:	5d 93       	st	X+, r21
    1324:	6d 93       	st	X+, r22
    1326:	7c 93       	st	X, r23
    1328:	17 97       	sbiw	r26, 0x07	; 7
    132a:	08 95       	ret

0000132c <__fpcmp_parts_f>:
    132c:	1f 93       	push	r17
    132e:	dc 01       	movw	r26, r24
    1330:	fb 01       	movw	r30, r22
    1332:	9c 91       	ld	r25, X
    1334:	92 30       	cpi	r25, 0x02	; 2
    1336:	08 f4       	brcc	.+2      	; 0x133a <__fpcmp_parts_f+0xe>
    1338:	47 c0       	rjmp	.+142    	; 0x13c8 <__fpcmp_parts_f+0x9c>
    133a:	80 81       	ld	r24, Z
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	08 f4       	brcc	.+2      	; 0x1342 <__fpcmp_parts_f+0x16>
    1340:	43 c0       	rjmp	.+134    	; 0x13c8 <__fpcmp_parts_f+0x9c>
    1342:	94 30       	cpi	r25, 0x04	; 4
    1344:	51 f4       	brne	.+20     	; 0x135a <__fpcmp_parts_f+0x2e>
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	1c 91       	ld	r17, X
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	99 f5       	brne	.+102    	; 0x13b4 <__fpcmp_parts_f+0x88>
    134e:	81 81       	ldd	r24, Z+1	; 0x01
    1350:	68 2f       	mov	r22, r24
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	61 1b       	sub	r22, r17
    1356:	71 09       	sbc	r23, r1
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <__fpcmp_parts_f+0xac>
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	21 f0       	breq	.+8      	; 0x1366 <__fpcmp_parts_f+0x3a>
    135e:	92 30       	cpi	r25, 0x02	; 2
    1360:	31 f4       	brne	.+12     	; 0x136e <__fpcmp_parts_f+0x42>
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	b9 f1       	breq	.+110    	; 0x13d4 <__fpcmp_parts_f+0xa8>
    1366:	81 81       	ldd	r24, Z+1	; 0x01
    1368:	88 23       	and	r24, r24
    136a:	89 f1       	breq	.+98     	; 0x13ce <__fpcmp_parts_f+0xa2>
    136c:	2d c0       	rjmp	.+90     	; 0x13c8 <__fpcmp_parts_f+0x9c>
    136e:	11 96       	adiw	r26, 0x01	; 1
    1370:	1c 91       	ld	r17, X
    1372:	11 97       	sbiw	r26, 0x01	; 1
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	f1 f0       	breq	.+60     	; 0x13b4 <__fpcmp_parts_f+0x88>
    1378:	81 81       	ldd	r24, Z+1	; 0x01
    137a:	18 17       	cp	r17, r24
    137c:	d9 f4       	brne	.+54     	; 0x13b4 <__fpcmp_parts_f+0x88>
    137e:	12 96       	adiw	r26, 0x02	; 2
    1380:	2d 91       	ld	r18, X+
    1382:	3c 91       	ld	r19, X
    1384:	13 97       	sbiw	r26, 0x03	; 3
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	94 f0       	brlt	.+36     	; 0x13b4 <__fpcmp_parts_f+0x88>
    1390:	28 17       	cp	r18, r24
    1392:	39 07       	cpc	r19, r25
    1394:	bc f0       	brlt	.+46     	; 0x13c4 <__fpcmp_parts_f+0x98>
    1396:	14 96       	adiw	r26, 0x04	; 4
    1398:	8d 91       	ld	r24, X+
    139a:	9d 91       	ld	r25, X+
    139c:	0d 90       	ld	r0, X+
    139e:	bc 91       	ld	r27, X
    13a0:	a0 2d       	mov	r26, r0
    13a2:	24 81       	ldd	r18, Z+4	; 0x04
    13a4:	35 81       	ldd	r19, Z+5	; 0x05
    13a6:	46 81       	ldd	r20, Z+6	; 0x06
    13a8:	57 81       	ldd	r21, Z+7	; 0x07
    13aa:	28 17       	cp	r18, r24
    13ac:	39 07       	cpc	r19, r25
    13ae:	4a 07       	cpc	r20, r26
    13b0:	5b 07       	cpc	r21, r27
    13b2:	18 f4       	brcc	.+6      	; 0x13ba <__fpcmp_parts_f+0x8e>
    13b4:	11 23       	and	r17, r17
    13b6:	41 f0       	breq	.+16     	; 0x13c8 <__fpcmp_parts_f+0x9c>
    13b8:	0a c0       	rjmp	.+20     	; 0x13ce <__fpcmp_parts_f+0xa2>
    13ba:	82 17       	cp	r24, r18
    13bc:	93 07       	cpc	r25, r19
    13be:	a4 07       	cpc	r26, r20
    13c0:	b5 07       	cpc	r27, r21
    13c2:	40 f4       	brcc	.+16     	; 0x13d4 <__fpcmp_parts_f+0xa8>
    13c4:	11 23       	and	r17, r17
    13c6:	19 f0       	breq	.+6      	; 0x13ce <__fpcmp_parts_f+0xa2>
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <__fpcmp_parts_f+0xac>
    13ce:	6f ef       	ldi	r22, 0xFF	; 255
    13d0:	7f ef       	ldi	r23, 0xFF	; 255
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <__fpcmp_parts_f+0xac>
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	cb 01       	movw	r24, r22
    13da:	1f 91       	pop	r17
    13dc:	08 95       	ret

000013de <ADC_enuInit>:
#include "ADC_private.h"
#include "ADC_register.h"
#include "ADC_interface.h"

ES_t ADC_enuInit()
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01

	/* Select Reference */
	ADMUX &= (0b00111111);
    13ec:	a7 e2       	ldi	r26, 0x27	; 39
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e7 e2       	ldi	r30, 0x27	; 39
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8f 73       	andi	r24, 0x3F	; 63
    13f8:	8c 93       	st	X, r24
	ADMUX |= (ADC_VOLTAGE_REFERENCE_MODE << 6);
    13fa:	a7 e2       	ldi	r26, 0x27	; 39
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e7 e2       	ldi	r30, 0x27	; 39
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 64       	ori	r24, 0x40	; 64
    1406:	8c 93       	st	X, r24

	/*Activate ADC Left Adjust Result for resolution */
	SET_BIT(ADMUX,ADMUX_ADLAR);
    1408:	a7 e2       	ldi	r26, 0x27	; 39
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e7 e2       	ldi	r30, 0x27	; 39
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 62       	ori	r24, 0x20	; 32
    1414:	8c 93       	st	X, r24

	/* Set Prescaler */
	ADCSRA &= (0b11111000);
    1416:	a6 e2       	ldi	r26, 0x26	; 38
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e6 e2       	ldi	r30, 0x26	; 38
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	88 7f       	andi	r24, 0xF8	; 248
    1422:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALER_SELECTION;
    1424:	a6 e2       	ldi	r26, 0x26	; 38
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e6 e2       	ldi	r30, 0x26	; 38
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	87 60       	ori	r24, 0x07	; 7
    1430:	8c 93       	st	X, r24

	/*Enable the ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1432:	a6 e2       	ldi	r26, 0x26	; 38
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e6 e2       	ldi	r30, 0x26	; 38
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 68       	ori	r24, 0x80	; 128
    143e:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
}
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <ADC_enuGetChannelReading>:

ES_t ADC_enuGetChannelReading(u8 Copy_u8ChannelNumber,u8* Copy_u8ADCReadingValue)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <ADC_enuGetChannelReading+0x6>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <ADC_enuGetChannelReading+0x8>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	7c 83       	std	Y+4, r23	; 0x04
    145a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_OK;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	89 83       	std	Y+1, r24	; 0x01

	/* Select channel */
	ADMUX &= 0b11100000;
    1460:	a7 e2       	ldi	r26, 0x27	; 39
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e7 e2       	ldi	r30, 0x27	; 39
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 7e       	andi	r24, 0xE0	; 224
    146c:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNumber;
    146e:	a7 e2       	ldi	r26, 0x27	; 39
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e7 e2       	ldi	r30, 0x27	; 39
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	90 81       	ld	r25, Z
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	89 2b       	or	r24, r25
    147c:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    147e:	a6 e2       	ldi	r26, 0x26	; 38
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e6 e2       	ldi	r30, 0x26	; 38
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	8c 93       	st	X, r24

	/*Wait until conversion completion */
	while(((ADCSRA >> ADCSRA_ADIF) & 1 ) == 0 );
    148c:	e6 e2       	ldi	r30, 0x26	; 38
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	82 95       	swap	r24
    1494:	8f 70       	andi	r24, 0x0F	; 15
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	90 70       	andi	r25, 0x00	; 0
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	a9 f3       	breq	.-22     	; 0x148c <ADC_enuGetChannelReading+0x42>

	/* Clear tha interrupt flag */
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    14a2:	a6 e2       	ldi	r26, 0x26	; 38
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e6 e2       	ldi	r30, 0x26	; 38
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 61       	ori	r24, 0x10	; 16
    14ae:	8c 93       	st	X, r24

	/*Reading the converted value*/
	*Copy_u8ADCReadingValue = ADCH;
    14b0:	e5 e2       	ldi	r30, 0x25	; 37
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	eb 81       	ldd	r30, Y+3	; 0x03
    14b8:	fc 81       	ldd	r31, Y+4	; 0x04
    14ba:	80 83       	st	Z, r24

	return Local_enuErrorState;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01

}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <DIO_enuSetPinDirection>:
#include "DIO_configuration.h"
#include "DIO_interface.h"


ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <DIO_enuSetPinDirection+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_enuSetPinDirection+0x8>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_enuSetPinDirection+0xa>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	8a 83       	std	Y+2, r24	; 0x02
    14dc:	6b 83       	std	Y+3, r22	; 0x03
    14de:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    14e0:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7) && (Copy_u8PinDirection == DIO_INPUT || Copy_u8PinDirection == DIO_OUTPUT))
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <DIO_enuSetPinDirection+0x1e>
    14e8:	d4 c0       	rjmp	.+424    	; 0x1692 <DIO_enuSetPinDirection+0x1c6>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <DIO_enuSetPinDirection+0x26>
    14f0:	d0 c0       	rjmp	.+416    	; 0x1692 <DIO_enuSetPinDirection+0x1c6>
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	88 23       	and	r24, r24
    14f6:	21 f0       	breq	.+8      	; 0x1500 <DIO_enuSetPinDirection+0x34>
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	09 f0       	breq	.+2      	; 0x1500 <DIO_enuSetPinDirection+0x34>
    14fe:	c9 c0       	rjmp	.+402    	; 0x1692 <DIO_enuSetPinDirection+0x1c6>
	{
		switch(Copy_u8GroupNumber)
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3e 83       	std	Y+6, r19	; 0x06
    1508:	2d 83       	std	Y+5, r18	; 0x05
    150a:	6d 81       	ldd	r22, Y+5	; 0x05
    150c:	7e 81       	ldd	r23, Y+6	; 0x06
    150e:	61 30       	cpi	r22, 0x01	; 1
    1510:	71 05       	cpc	r23, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <DIO_enuSetPinDirection+0x4a>
    1514:	41 c0       	rjmp	.+130    	; 0x1598 <DIO_enuSetPinDirection+0xcc>
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	82 30       	cpi	r24, 0x02	; 2
    151c:	91 05       	cpc	r25, r1
    151e:	34 f4       	brge	.+12     	; 0x152c <DIO_enuSetPinDirection+0x60>
    1520:	2d 81       	ldd	r18, Y+5	; 0x05
    1522:	3e 81       	ldd	r19, Y+6	; 0x06
    1524:	21 15       	cp	r18, r1
    1526:	31 05       	cpc	r19, r1
    1528:	71 f0       	breq	.+28     	; 0x1546 <DIO_enuSetPinDirection+0x7a>
    152a:	b0 c0       	rjmp	.+352    	; 0x168c <DIO_enuSetPinDirection+0x1c0>
    152c:	6d 81       	ldd	r22, Y+5	; 0x05
    152e:	7e 81       	ldd	r23, Y+6	; 0x06
    1530:	62 30       	cpi	r22, 0x02	; 2
    1532:	71 05       	cpc	r23, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <DIO_enuSetPinDirection+0x6c>
    1536:	59 c0       	rjmp	.+178    	; 0x15ea <DIO_enuSetPinDirection+0x11e>
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <DIO_enuSetPinDirection+0x78>
    1542:	7c c0       	rjmp	.+248    	; 0x163c <DIO_enuSetPinDirection+0x170>
    1544:	a3 c0       	rjmp	.+326    	; 0x168c <DIO_enuSetPinDirection+0x1c0>
		{
		case DIO_GROUP_A:
			DDRA &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    1546:	aa e3       	ldi	r26, 0x3A	; 58
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	ea e3       	ldi	r30, 0x3A	; 58
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_enuSetPinDirection+0x96>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	2a 95       	dec	r18
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_enuSetPinDirection+0x92>
    1566:	80 95       	com	r24
    1568:	84 23       	and	r24, r20
    156a:	8c 93       	st	X, r24
			DDRA |= (Copy_u8PinDirection << Copy_u8PinNumber );
    156c:	aa e3       	ldi	r26, 0x3A	; 58
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ea e3       	ldi	r30, 0x3A	; 58
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	b9 01       	movw	r22, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_enuSetPinDirection+0xc0>
    1588:	66 0f       	add	r22, r22
    158a:	77 1f       	adc	r23, r23
    158c:	8a 95       	dec	r24
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_enuSetPinDirection+0xbc>
    1590:	cb 01       	movw	r24, r22
    1592:	84 2b       	or	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	7a c0       	rjmp	.+244    	; 0x168c <DIO_enuSetPinDirection+0x1c0>
			break;
		case DIO_GROUP_B:
			DDRB &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    1598:	a7 e3       	ldi	r26, 0x37	; 55
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e7 e3       	ldi	r30, 0x37	; 55
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_enuSetPinDirection+0xe8>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	2a 95       	dec	r18
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_enuSetPinDirection+0xe4>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
			DDRB |= (Copy_u8PinDirection << Copy_u8PinNumber );
    15be:	a7 e3       	ldi	r26, 0x37	; 55
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e7 e3       	ldi	r30, 0x37	; 55
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	b9 01       	movw	r22, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DIO_enuSetPinDirection+0x112>
    15da:	66 0f       	add	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	8a 95       	dec	r24
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DIO_enuSetPinDirection+0x10e>
    15e2:	cb 01       	movw	r24, r22
    15e4:	84 2b       	or	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	51 c0       	rjmp	.+162    	; 0x168c <DIO_enuSetPinDirection+0x1c0>
			break;
		case DIO_GROUP_C:
			DDRC &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    15ea:	a4 e3       	ldi	r26, 0x34	; 52
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e4 e3       	ldi	r30, 0x34	; 52
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_enuSetPinDirection+0x13a>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	2a 95       	dec	r18
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_enuSetPinDirection+0x136>
    160a:	80 95       	com	r24
    160c:	84 23       	and	r24, r20
    160e:	8c 93       	st	X, r24
			DDRC |= (Copy_u8PinDirection << Copy_u8PinNumber );
    1610:	a4 e3       	ldi	r26, 0x34	; 52
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e4 e3       	ldi	r30, 0x34	; 52
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	b9 01       	movw	r22, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <DIO_enuSetPinDirection+0x164>
    162c:	66 0f       	add	r22, r22
    162e:	77 1f       	adc	r23, r23
    1630:	8a 95       	dec	r24
    1632:	e2 f7       	brpl	.-8      	; 0x162c <DIO_enuSetPinDirection+0x160>
    1634:	cb 01       	movw	r24, r22
    1636:	84 2b       	or	r24, r20
    1638:	8c 93       	st	X, r24
    163a:	28 c0       	rjmp	.+80     	; 0x168c <DIO_enuSetPinDirection+0x1c0>
			break;
		case DIO_GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    163c:	a1 e3       	ldi	r26, 0x31	; 49
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e1 e3       	ldi	r30, 0x31	; 49
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_enuSetPinDirection+0x18c>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	2a 95       	dec	r18
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_enuSetPinDirection+0x188>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
			DDRD |= (Copy_u8PinDirection << Copy_u8PinNumber );
    1662:	a1 e3       	ldi	r26, 0x31	; 49
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e1 e3       	ldi	r30, 0x31	; 49
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	b9 01       	movw	r22, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_enuSetPinDirection+0x1b6>
    167e:	66 0f       	add	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	8a 95       	dec	r24
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_enuSetPinDirection+0x1b2>
    1686:	cb 01       	movw	r24, r22
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <DIO_enuSetPinDirection+0x1ca>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
}
    1698:	26 96       	adiw	r28, 0x06	; 6
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber,u8 Copy_u8PinValue)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <DIO_enuSetPinValue+0x6>
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <DIO_enuSetPinValue+0x8>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <DIO_enuSetPinValue+0xa>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	8a 83       	std	Y+2, r24	; 0x02
    16ba:	6b 83       	std	Y+3, r22	; 0x03
    16bc:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    16be:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7) && (Copy_u8PinValue == DIO_LOW_LEVEL || Copy_u8PinValue == DIO_HIGH_LEVEL))
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	84 30       	cpi	r24, 0x04	; 4
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <DIO_enuSetPinValue+0x1e>
    16c6:	d4 c0       	rjmp	.+424    	; 0x1870 <DIO_enuSetPinValue+0x1c6>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	88 30       	cpi	r24, 0x08	; 8
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <DIO_enuSetPinValue+0x26>
    16ce:	d0 c0       	rjmp	.+416    	; 0x1870 <DIO_enuSetPinValue+0x1c6>
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	88 23       	and	r24, r24
    16d4:	21 f0       	breq	.+8      	; 0x16de <DIO_enuSetPinValue+0x34>
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	09 f0       	breq	.+2      	; 0x16de <DIO_enuSetPinValue+0x34>
    16dc:	c9 c0       	rjmp	.+402    	; 0x1870 <DIO_enuSetPinValue+0x1c6>
	{
		switch(Copy_u8GroupNumber)
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	3e 83       	std	Y+6, r19	; 0x06
    16e6:	2d 83       	std	Y+5, r18	; 0x05
    16e8:	6d 81       	ldd	r22, Y+5	; 0x05
    16ea:	7e 81       	ldd	r23, Y+6	; 0x06
    16ec:	61 30       	cpi	r22, 0x01	; 1
    16ee:	71 05       	cpc	r23, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <DIO_enuSetPinValue+0x4a>
    16f2:	41 c0       	rjmp	.+130    	; 0x1776 <DIO_enuSetPinValue+0xcc>
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	91 05       	cpc	r25, r1
    16fc:	34 f4       	brge	.+12     	; 0x170a <DIO_enuSetPinValue+0x60>
    16fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1700:	3e 81       	ldd	r19, Y+6	; 0x06
    1702:	21 15       	cp	r18, r1
    1704:	31 05       	cpc	r19, r1
    1706:	71 f0       	breq	.+28     	; 0x1724 <DIO_enuSetPinValue+0x7a>
    1708:	b0 c0       	rjmp	.+352    	; 0x186a <DIO_enuSetPinValue+0x1c0>
    170a:	6d 81       	ldd	r22, Y+5	; 0x05
    170c:	7e 81       	ldd	r23, Y+6	; 0x06
    170e:	62 30       	cpi	r22, 0x02	; 2
    1710:	71 05       	cpc	r23, r1
    1712:	09 f4       	brne	.+2      	; 0x1716 <DIO_enuSetPinValue+0x6c>
    1714:	59 c0       	rjmp	.+178    	; 0x17c8 <DIO_enuSetPinValue+0x11e>
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	91 05       	cpc	r25, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <DIO_enuSetPinValue+0x78>
    1720:	7c c0       	rjmp	.+248    	; 0x181a <DIO_enuSetPinValue+0x170>
    1722:	a3 c0       	rjmp	.+326    	; 0x186a <DIO_enuSetPinValue+0x1c0>
		{
		case DIO_GROUP_A:
			PORTA &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    1724:	ab e3       	ldi	r26, 0x3B	; 59
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	eb e3       	ldi	r30, 0x3B	; 59
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_enuSetPinValue+0x96>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	2a 95       	dec	r18
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_enuSetPinValue+0x92>
    1744:	80 95       	com	r24
    1746:	84 23       	and	r24, r20
    1748:	8c 93       	st	X, r24
			PORTA |= (Copy_u8PinValue << Copy_u8PinNumber );
    174a:	ab e3       	ldi	r26, 0x3B	; 59
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	eb e3       	ldi	r30, 0x3B	; 59
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	b9 01       	movw	r22, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_enuSetPinValue+0xc0>
    1766:	66 0f       	add	r22, r22
    1768:	77 1f       	adc	r23, r23
    176a:	8a 95       	dec	r24
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_enuSetPinValue+0xbc>
    176e:	cb 01       	movw	r24, r22
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	7a c0       	rjmp	.+244    	; 0x186a <DIO_enuSetPinValue+0x1c0>
			break;
		case DIO_GROUP_B:
			PORTB &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    1776:	a8 e3       	ldi	r26, 0x38	; 56
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e8 e3       	ldi	r30, 0x38	; 56
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_enuSetPinValue+0xe8>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	2a 95       	dec	r18
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_enuSetPinValue+0xe4>
    1796:	80 95       	com	r24
    1798:	84 23       	and	r24, r20
    179a:	8c 93       	st	X, r24
			PORTB |= (Copy_u8PinValue << Copy_u8PinNumber );
    179c:	a8 e3       	ldi	r26, 0x38	; 56
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	b9 01       	movw	r22, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <DIO_enuSetPinValue+0x112>
    17b8:	66 0f       	add	r22, r22
    17ba:	77 1f       	adc	r23, r23
    17bc:	8a 95       	dec	r24
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <DIO_enuSetPinValue+0x10e>
    17c0:	cb 01       	movw	r24, r22
    17c2:	84 2b       	or	r24, r20
    17c4:	8c 93       	st	X, r24
    17c6:	51 c0       	rjmp	.+162    	; 0x186a <DIO_enuSetPinValue+0x1c0>
			break;
		case DIO_GROUP_C:
			PORTC &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    17c8:	a5 e3       	ldi	r26, 0x35	; 53
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e5 e3       	ldi	r30, 0x35	; 53
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_enuSetPinValue+0x13a>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	2a 95       	dec	r18
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_enuSetPinValue+0x136>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
			PORTC |= (Copy_u8PinValue << Copy_u8PinNumber );
    17ee:	a5 e3       	ldi	r26, 0x35	; 53
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e5 e3       	ldi	r30, 0x35	; 53
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	b9 01       	movw	r22, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_enuSetPinValue+0x164>
    180a:	66 0f       	add	r22, r22
    180c:	77 1f       	adc	r23, r23
    180e:	8a 95       	dec	r24
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_enuSetPinValue+0x160>
    1812:	cb 01       	movw	r24, r22
    1814:	84 2b       	or	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	28 c0       	rjmp	.+80     	; 0x186a <DIO_enuSetPinValue+0x1c0>
			break;
		case DIO_GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    181a:	a2 e3       	ldi	r26, 0x32	; 50
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e2 e3       	ldi	r30, 0x32	; 50
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_enuSetPinValue+0x18c>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	2a 95       	dec	r18
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_enuSetPinValue+0x188>
    183a:	80 95       	com	r24
    183c:	84 23       	and	r24, r20
    183e:	8c 93       	st	X, r24
			PORTD |= (Copy_u8PinValue << Copy_u8PinNumber );
    1840:	a2 e3       	ldi	r26, 0x32	; 50
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e2 e3       	ldi	r30, 0x32	; 50
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	b9 01       	movw	r22, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_enuSetPinValue+0x1b6>
    185c:	66 0f       	add	r22, r22
    185e:	77 1f       	adc	r23, r23
    1860:	8a 95       	dec	r24
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_enuSetPinValue+0x1b2>
    1864:	cb 01       	movw	r24, r22
    1866:	84 2b       	or	r24, r20
    1868:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1874:	89 81       	ldd	r24, Y+1	; 0x01
}
    1876:	26 96       	adiw	r28, 0x06	; 6
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8GroupNumber,u8 Copy_u8PortDirection)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <DIO_enuSetPortDirection+0x6>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <DIO_enuSetPortDirection+0x8>
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	8a 83       	std	Y+2, r24	; 0x02
    1898:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    189a:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PortDirection >= DIO_SMALLEST_PORT_DIRECTION && Copy_u8PortDirection <= DIO_LARGEST_PORT_DIRECTION))
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	84 30       	cpi	r24, 0x04	; 4
    18a0:	a8 f5       	brcc	.+106    	; 0x190c <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8GroupNumber)
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3d 83       	std	Y+5, r19	; 0x05
    18aa:	2c 83       	std	Y+4, r18	; 0x04
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	91 05       	cpc	r25, r1
    18b4:	d1 f0       	breq	.+52     	; 0x18ea <DIO_enuSetPortDirection+0x62>
    18b6:	2c 81       	ldd	r18, Y+4	; 0x04
    18b8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ba:	22 30       	cpi	r18, 0x02	; 2
    18bc:	31 05       	cpc	r19, r1
    18be:	2c f4       	brge	.+10     	; 0x18ca <DIO_enuSetPortDirection+0x42>
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	9d 81       	ldd	r25, Y+5	; 0x05
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	61 f0       	breq	.+24     	; 0x18e0 <DIO_enuSetPortDirection+0x58>
    18c8:	1e c0       	rjmp	.+60     	; 0x1906 <DIO_enuSetPortDirection+0x7e>
    18ca:	2c 81       	ldd	r18, Y+4	; 0x04
    18cc:	3d 81       	ldd	r19, Y+5	; 0x05
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	81 f0       	breq	.+32     	; 0x18f4 <DIO_enuSetPortDirection+0x6c>
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	9d 81       	ldd	r25, Y+5	; 0x05
    18d8:	83 30       	cpi	r24, 0x03	; 3
    18da:	91 05       	cpc	r25, r1
    18dc:	81 f0       	breq	.+32     	; 0x18fe <DIO_enuSetPortDirection+0x76>
    18de:	13 c0       	rjmp	.+38     	; 0x1906 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_GROUP_A:
			DDRA = Copy_u8PortDirection;
    18e0:	ea e3       	ldi	r30, 0x3A	; 58
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	80 83       	st	Z, r24
    18e8:	0e c0       	rjmp	.+28     	; 0x1906 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_GROUP_B:
			DDRB = Copy_u8PortDirection;
    18ea:	e7 e3       	ldi	r30, 0x37	; 55
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	80 83       	st	Z, r24
    18f2:	09 c0       	rjmp	.+18     	; 0x1906 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_GROUP_C:
			DDRC = Copy_u8PortDirection;
    18f4:	e4 e3       	ldi	r30, 0x34	; 52
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	80 83       	st	Z, r24
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_GROUP_D:
			DDRD = Copy_u8PortDirection;
    18fe:	e1 e3       	ldi	r30, 0x31	; 49
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8GroupNumber,u8 Copy_u8PortValue)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <DIO_enuSetPortValue+0x6>
    1928:	00 d0       	rcall	.+0      	; 0x192a <DIO_enuSetPortValue+0x8>
    192a:	0f 92       	push	r0
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	8a 83       	std	Y+2, r24	; 0x02
    1932:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1934:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PortValue >= DIO_SMALLEST_PORT_VALUE && Copy_u8PortValue <= DIO_LARGEST_PORT_VALUE))
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	a8 f5       	brcc	.+106    	; 0x19a6 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8GroupNumber)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3d 83       	std	Y+5, r19	; 0x05
    1944:	2c 83       	std	Y+4, r18	; 0x04
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	9d 81       	ldd	r25, Y+5	; 0x05
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	91 05       	cpc	r25, r1
    194e:	d1 f0       	breq	.+52     	; 0x1984 <DIO_enuSetPortValue+0x62>
    1950:	2c 81       	ldd	r18, Y+4	; 0x04
    1952:	3d 81       	ldd	r19, Y+5	; 0x05
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	2c f4       	brge	.+10     	; 0x1964 <DIO_enuSetPortValue+0x42>
    195a:	8c 81       	ldd	r24, Y+4	; 0x04
    195c:	9d 81       	ldd	r25, Y+5	; 0x05
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	61 f0       	breq	.+24     	; 0x197a <DIO_enuSetPortValue+0x58>
    1962:	1e c0       	rjmp	.+60     	; 0x19a0 <DIO_enuSetPortValue+0x7e>
    1964:	2c 81       	ldd	r18, Y+4	; 0x04
    1966:	3d 81       	ldd	r19, Y+5	; 0x05
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	81 f0       	breq	.+32     	; 0x198e <DIO_enuSetPortValue+0x6c>
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	9d 81       	ldd	r25, Y+5	; 0x05
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	81 f0       	breq	.+32     	; 0x1998 <DIO_enuSetPortValue+0x76>
    1978:	13 c0       	rjmp	.+38     	; 0x19a0 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_GROUP_A:
			PORTA = Copy_u8PortValue;
    197a:	eb e3       	ldi	r30, 0x3B	; 59
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	80 83       	st	Z, r24
    1982:	0e c0       	rjmp	.+28     	; 0x19a0 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_GROUP_B:
			PORTB = Copy_u8PortValue;
    1984:	e8 e3       	ldi	r30, 0x38	; 56
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	80 83       	st	Z, r24
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_GROUP_C:
			PORTC = Copy_u8PortValue;
    198e:	e5 e3       	ldi	r30, 0x35	; 53
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	80 83       	st	Z, r24
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_GROUP_D:
			PORTD = Copy_u8PortValue;
    1998:	e2 e3       	ldi	r30, 0x32	; 50
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <DIO_enuTogglePinValue+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <DIO_enuTogglePinValue+0x8>
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	8a 83       	std	Y+2, r24	; 0x02
    19cc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    19ce:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7))
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	84 30       	cpi	r24, 0x04	; 4
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <DIO_enuTogglePinValue+0x1c>
    19d6:	75 c0       	rjmp	.+234    	; 0x1ac2 <DIO_enuTogglePinValue+0x106>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 30       	cpi	r24, 0x08	; 8
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <DIO_enuTogglePinValue+0x24>
    19de:	71 c0       	rjmp	.+226    	; 0x1ac2 <DIO_enuTogglePinValue+0x106>
	{
		switch(Copy_u8GroupNumber)
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	3d 83       	std	Y+5, r19	; 0x05
    19e8:	2c 83       	std	Y+4, r18	; 0x04
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	91 05       	cpc	r25, r1
    19f2:	49 f1       	breq	.+82     	; 0x1a46 <DIO_enuTogglePinValue+0x8a>
    19f4:	2c 81       	ldd	r18, Y+4	; 0x04
    19f6:	3d 81       	ldd	r19, Y+5	; 0x05
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <DIO_enuTogglePinValue+0x4c>
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	9d 81       	ldd	r25, Y+5	; 0x05
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	61 f0       	breq	.+24     	; 0x1a1e <DIO_enuTogglePinValue+0x62>
    1a06:	5a c0       	rjmp	.+180    	; 0x1abc <DIO_enuTogglePinValue+0x100>
    1a08:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	71 f1       	breq	.+92     	; 0x1a6e <DIO_enuTogglePinValue+0xb2>
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	9d 81       	ldd	r25, Y+5	; 0x05
    1a16:	83 30       	cpi	r24, 0x03	; 3
    1a18:	91 05       	cpc	r25, r1
    1a1a:	e9 f1       	breq	.+122    	; 0x1a96 <DIO_enuTogglePinValue+0xda>
    1a1c:	4f c0       	rjmp	.+158    	; 0x1abc <DIO_enuTogglePinValue+0x100>
		{
		case DIO_GROUP_A:
			PORTA ^= (DIO_BIT_MASK << Copy_u8PinNumber );
    1a1e:	ab e3       	ldi	r26, 0x3B	; 59
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	eb e3       	ldi	r30, 0x3B	; 59
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_enuTogglePinValue+0x80>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_enuTogglePinValue+0x7c>
    1a40:	84 27       	eor	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	3b c0       	rjmp	.+118    	; 0x1abc <DIO_enuTogglePinValue+0x100>
			break;
		case DIO_GROUP_B:
			PORTB ^= (DIO_BIT_MASK << Copy_u8PinNumber );
    1a46:	a8 e3       	ldi	r26, 0x38	; 56
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_enuTogglePinValue+0xa8>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_enuTogglePinValue+0xa4>
    1a68:	84 27       	eor	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	27 c0       	rjmp	.+78     	; 0x1abc <DIO_enuTogglePinValue+0x100>
			break;
		case DIO_GROUP_C:
			PORTC ^= (DIO_BIT_MASK << Copy_u8PinNumber );
    1a6e:	a5 e3       	ldi	r26, 0x35	; 53
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e5 e3       	ldi	r30, 0x35	; 53
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <DIO_enuTogglePinValue+0xd0>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <DIO_enuTogglePinValue+0xcc>
    1a90:	84 27       	eor	r24, r20
    1a92:	8c 93       	st	X, r24
    1a94:	13 c0       	rjmp	.+38     	; 0x1abc <DIO_enuTogglePinValue+0x100>
			break;
		case DIO_GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinNumber );
    1a96:	a2 e3       	ldi	r26, 0x32	; 50
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e2 e3       	ldi	r30, 0x32	; 50
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_enuTogglePinValue+0xf8>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <DIO_enuTogglePinValue+0xf4>
    1ab8:	84 27       	eor	r24, r20
    1aba:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    1ac2:	82 e0       	ldi	r24, 0x02	; 2
    1ac4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <DIO_u8GetPinValue+0x6>
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <DIO_u8GetPinValue+0x8>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
    1ae8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7))
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	08 f0       	brcs	.+2      	; 0x1af2 <DIO_u8GetPinValue+0x1a>
    1af0:	6c c0       	rjmp	.+216    	; 0x1bca <DIO_u8GetPinValue+0xf2>
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	88 30       	cpi	r24, 0x08	; 8
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <DIO_u8GetPinValue+0x22>
    1af8:	68 c0       	rjmp	.+208    	; 0x1bca <DIO_u8GetPinValue+0xf2>
	{
		switch(Copy_u8GroupNumber)
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	3d 83       	std	Y+5, r19	; 0x05
    1b02:	2c 83       	std	Y+4, r18	; 0x04
    1b04:	4c 81       	ldd	r20, Y+4	; 0x04
    1b06:	5d 81       	ldd	r21, Y+5	; 0x05
    1b08:	41 30       	cpi	r20, 0x01	; 1
    1b0a:	51 05       	cpc	r21, r1
    1b0c:	41 f1       	breq	.+80     	; 0x1b5e <DIO_u8GetPinValue+0x86>
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	91 05       	cpc	r25, r1
    1b16:	34 f4       	brge	.+12     	; 0x1b24 <DIO_u8GetPinValue+0x4c>
    1b18:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1c:	21 15       	cp	r18, r1
    1b1e:	31 05       	cpc	r19, r1
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <DIO_u8GetPinValue+0x62>
    1b22:	55 c0       	rjmp	.+170    	; 0x1bce <DIO_u8GetPinValue+0xf6>
    1b24:	4c 81       	ldd	r20, Y+4	; 0x04
    1b26:	5d 81       	ldd	r21, Y+5	; 0x05
    1b28:	42 30       	cpi	r20, 0x02	; 2
    1b2a:	51 05       	cpc	r21, r1
    1b2c:	51 f1       	breq	.+84     	; 0x1b82 <DIO_u8GetPinValue+0xaa>
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	91 05       	cpc	r25, r1
    1b36:	b9 f1       	breq	.+110    	; 0x1ba6 <DIO_u8GetPinValue+0xce>
    1b38:	4a c0       	rjmp	.+148    	; 0x1bce <DIO_u8GetPinValue+0xf6>
		{
		case DIO_GROUP_A:
			Local_u8PinValue = (PINA >> Copy_u8PinNumber) & DIO_BIT_MASK;
    1b3a:	e9 e3       	ldi	r30, 0x39	; 57
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a9 01       	movw	r20, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <DIO_u8GetPinValue+0x7a>
    1b4e:	55 95       	asr	r21
    1b50:	47 95       	ror	r20
    1b52:	8a 95       	dec	r24
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <DIO_u8GetPinValue+0x76>
    1b56:	ca 01       	movw	r24, r20
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	38 c0       	rjmp	.+112    	; 0x1bce <DIO_u8GetPinValue+0xf6>
			break;
		case DIO_GROUP_B:
			Local_u8PinValue = (PINB >> Copy_u8PinNumber) & DIO_BIT_MASK;
    1b5e:	e6 e3       	ldi	r30, 0x36	; 54
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	a9 01       	movw	r20, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <DIO_u8GetPinValue+0x9e>
    1b72:	55 95       	asr	r21
    1b74:	47 95       	ror	r20
    1b76:	8a 95       	dec	r24
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <DIO_u8GetPinValue+0x9a>
    1b7a:	ca 01       	movw	r24, r20
    1b7c:	81 70       	andi	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	26 c0       	rjmp	.+76     	; 0x1bce <DIO_u8GetPinValue+0xf6>
			break;
		case DIO_GROUP_C:
			Local_u8PinValue = (PINC >> Copy_u8PinNumber) & DIO_BIT_MASK;
    1b82:	e3 e3       	ldi	r30, 0x33	; 51
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a9 01       	movw	r20, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <DIO_u8GetPinValue+0xc2>
    1b96:	55 95       	asr	r21
    1b98:	47 95       	ror	r20
    1b9a:	8a 95       	dec	r24
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <DIO_u8GetPinValue+0xbe>
    1b9e:	ca 01       	movw	r24, r20
    1ba0:	81 70       	andi	r24, 0x01	; 1
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	14 c0       	rjmp	.+40     	; 0x1bce <DIO_u8GetPinValue+0xf6>
			break;
		case DIO_GROUP_D:
			Local_u8PinValue = (PIND >> Copy_u8PinNumber) & DIO_BIT_MASK;
    1ba6:	e0 e3       	ldi	r30, 0x30	; 48
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a9 01       	movw	r20, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <DIO_u8GetPinValue+0xe6>
    1bba:	55 95       	asr	r21
    1bbc:	47 95       	ror	r20
    1bbe:	8a 95       	dec	r24
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <DIO_u8GetPinValue+0xe2>
    1bc2:	ca 01       	movw	r24, r20
    1bc4:	81 70       	andi	r24, 0x01	; 1
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <DIO_u8GetPinValue+0xf6>
			break;
		}
	}
	else
	{
		Local_u8PinValue = OUT_OF_RANGE;
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8PinValue;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8GroupNumber)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <DIO_u8GetPortValue+0x6>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <DIO_u8GetPortValue+0x8>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PORTValue;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A))
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	84 30       	cpi	r24, 0x04	; 4
    1bf2:	98 f5       	brcc	.+102    	; 0x1c5a <DIO_u8GetPortValue+0x7a>
	{
		switch(Copy_u8GroupNumber)
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	3c 83       	std	Y+4, r19	; 0x04
    1bfc:	2b 83       	std	Y+3, r18	; 0x03
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	d1 f0       	breq	.+52     	; 0x1c3c <DIO_u8GetPortValue+0x5c>
    1c08:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <DIO_u8GetPortValue+0x3c>
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <DIO_u8GetPortValue+0x52>
    1c1a:	21 c0       	rjmp	.+66     	; 0x1c5e <DIO_u8GetPortValue+0x7e>
    1c1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c20:	22 30       	cpi	r18, 0x02	; 2
    1c22:	31 05       	cpc	r19, r1
    1c24:	81 f0       	breq	.+32     	; 0x1c46 <DIO_u8GetPortValue+0x66>
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	83 30       	cpi	r24, 0x03	; 3
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <DIO_u8GetPortValue+0x70>
    1c30:	16 c0       	rjmp	.+44     	; 0x1c5e <DIO_u8GetPortValue+0x7e>
		{
		case DIO_GROUP_A:
			Local_u8PORTValue = PINA;
    1c32:	e9 e3       	ldi	r30, 0x39	; 57
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	11 c0       	rjmp	.+34     	; 0x1c5e <DIO_u8GetPortValue+0x7e>
			break;
		case DIO_GROUP_B:
			Local_u8PORTValue = PINB;
    1c3c:	e6 e3       	ldi	r30, 0x36	; 54
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	0c c0       	rjmp	.+24     	; 0x1c5e <DIO_u8GetPortValue+0x7e>
			break;
		case DIO_GROUP_C:
			Local_u8PORTValue = PINC;
    1c46:	e3 e3       	ldi	r30, 0x33	; 51
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	07 c0       	rjmp	.+14     	; 0x1c5e <DIO_u8GetPortValue+0x7e>
			break;
		case DIO_GROUP_D:
			Local_u8PORTValue = PIND;
    1c50:	e0 e3       	ldi	r30, 0x30	; 48
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_u8GetPortValue+0x7e>
		}
	}
	else
	{
		// change the value of out_of_range more than once as it may be equal to the value of PIN
		Local_u8PORTValue = OUT_OF_RANGE;
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8PORTValue;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <EEPROM_voidWriteDataByte>:
#include "EEPROM_configuration.h"
#include "LCD_interface.h"


void EEPROM_voidWriteDataByte(u16 Copy_u16Address,u8 Copy_u8Data)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	62 97       	sbiw	r28, 0x12	; 18
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	99 8b       	std	Y+17, r25	; 0x11
    1c84:	88 8b       	std	Y+16, r24	; 0x10
    1c86:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8SlaveAddress = 0;
    1c88:	1f 86       	std	Y+15, r1	; 0x0f

	Local_u8SlaveAddress = 0b1010000 | (u8)( (Copy_u16Address >> 8));
    1c8a:	88 89       	ldd	r24, Y+16	; 0x10
    1c8c:	99 89       	ldd	r25, Y+17	; 0x11
    1c8e:	89 2f       	mov	r24, r25
    1c90:	99 27       	eor	r25, r25
    1c92:	80 65       	ori	r24, 0x50	; 80
    1c94:	8f 87       	std	Y+15, r24	; 0x0f

	TWI_enuSendStartCondition();
    1c96:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <TWI_enuSendStartCondition>

	TWI_enuSendSlaveAddressWithWrite(Local_u8SlaveAddress);
    1c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <TWI_enuSendSlaveAddressWithWrite>

	TWI_enuMasterWriteDataByte((u8)Copy_u16Address);
    1ca0:	88 89       	ldd	r24, Y+16	; 0x10
    1ca2:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <TWI_enuMasterWriteDataByte>
	TWI_enuMasterWriteDataByte(Copy_u8Data);
    1ca6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ca8:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <TWI_enuMasterWriteDataByte>
	TWI_voidSendStopCondition();
    1cac:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <TWI_voidSendStopCondition>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a0 ea       	ldi	r26, 0xA0	; 160
    1cb6:	b0 e4       	ldi	r27, 0x40	; 64
    1cb8:	8b 87       	std	Y+11, r24	; 0x0b
    1cba:	9c 87       	std	Y+12, r25	; 0x0c
    1cbc:	ad 87       	std	Y+13, r26	; 0x0d
    1cbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	4a e7       	ldi	r20, 0x7A	; 122
    1cce:	55 e4       	ldi	r21, 0x45	; 69
    1cd0:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	8f 83       	std	Y+7, r24	; 0x07
    1cda:	98 87       	std	Y+8, r25	; 0x08
    1cdc:	a9 87       	std	Y+9, r26	; 0x09
    1cde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce2:	78 85       	ldd	r23, Y+8	; 0x08
    1ce4:	89 85       	ldd	r24, Y+9	; 0x09
    1ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e8       	ldi	r20, 0x80	; 128
    1cee:	5f e3       	ldi	r21, 0x3F	; 63
    1cf0:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    1cf4:	88 23       	and	r24, r24
    1cf6:	2c f4       	brge	.+10     	; 0x1d02 <EEPROM_voidWriteDataByte+0x94>
		__ticks = 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	3f c0       	rjmp	.+126    	; 0x1d80 <EEPROM_voidWriteDataByte+0x112>
	else if (__tmp > 65535)
    1d02:	6f 81       	ldd	r22, Y+7	; 0x07
    1d04:	78 85       	ldd	r23, Y+8	; 0x08
    1d06:	89 85       	ldd	r24, Y+9	; 0x09
    1d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	3f ef       	ldi	r19, 0xFF	; 255
    1d0e:	4f e7       	ldi	r20, 0x7F	; 127
    1d10:	57 e4       	ldi	r21, 0x47	; 71
    1d12:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    1d16:	18 16       	cp	r1, r24
    1d18:	4c f5       	brge	.+82     	; 0x1d6c <EEPROM_voidWriteDataByte+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e2       	ldi	r20, 0x20	; 32
    1d28:	51 e4       	ldi	r21, 0x41	; 65
    1d2a:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	0f c0       	rjmp	.+30     	; 0x1d62 <EEPROM_voidWriteDataByte+0xf4>
    1d44:	80 e9       	ldi	r24, 0x90	; 144
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	9c 83       	std	Y+4, r25	; 0x04
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <EEPROM_voidWriteDataByte+0xe2>
    1d54:	9c 83       	std	Y+4, r25	; 0x04
    1d56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	69 f7       	brne	.-38     	; 0x1d44 <EEPROM_voidWriteDataByte+0xd6>
    1d6a:	14 c0       	rjmp	.+40     	; 0x1d94 <EEPROM_voidWriteDataByte+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6e:	78 85       	ldd	r23, Y+8	; 0x08
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	8d 81       	ldd	r24, Y+5	; 0x05
    1d82:	9e 81       	ldd	r25, Y+6	; 0x06
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <EEPROM_voidWriteDataByte+0x11e>
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    1d94:	62 96       	adiw	r28, 0x12	; 18
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16Address)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <EEPROM_u8ReadDataByte+0x6>
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <EEPROM_u8ReadDataByte+0x8>
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8SlaveAddress = 0;
    1db6:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Data=0;
    1db8:	1a 82       	std	Y+2, r1	; 0x02


	Local_u8SlaveAddress = 0b1010000 | (u8)((Copy_u16Address >> 8));
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	89 2f       	mov	r24, r25
    1dc0:	99 27       	eor	r25, r25
    1dc2:	80 65       	ori	r24, 0x50	; 80
    1dc4:	89 83       	std	Y+1, r24	; 0x01

	TWI_enuSendStartCondition();
    1dc6:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <TWI_enuSendStartCondition>


	TWI_enuSendSlaveAddressWithWrite(Local_u8SlaveAddress);
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <TWI_enuSendSlaveAddressWithWrite>
	TWI_enuMasterWriteDataByte((u8)Copy_u16Address);
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <TWI_enuMasterWriteDataByte>
	TWI_enuSendRepeatedStart();
    1dd6:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <TWI_enuSendRepeatedStart>

	TWI_enuSendSlaveAddressWithRead(Local_u8SlaveAddress);
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	0e 94 03 16 	call	0x2c06	; 0x2c06 <TWI_enuSendSlaveAddressWithRead>
	TWI_enuMasterReadDataByte(&Local_u8Data);
    1de0:	ce 01       	movw	r24, r28
    1de2:	02 96       	adiw	r24, 0x02	; 2
    1de4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <TWI_enuMasterReadDataByte>
	TWI_voidSendStopCondition();
    1de8:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <TWI_voidSendStopCondition>

	return Local_u8Data;
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <Keypad_enuInit>:

#include "Keypad_configuration.h"
#include "Keypad_interface.h"

ES_t Keypad_enuInit()
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e06:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_R0_PIN,DIO_INPUT);
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_R1_PIN,DIO_INPUT);
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_R2_PIN,DIO_INPUT);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	62 e0       	ldi	r22, 0x02	; 2
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_R3_PIN,DIO_INPUT);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	63 e0       	ldi	r22, 0x03	; 3
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_C0_PIN,DIO_OUTPUT);
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	64 e0       	ldi	r22, 0x04	; 4
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_C1_PIN,DIO_OUTPUT);
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	65 e0       	ldi	r22, 0x05	; 5
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_C2_PIN,DIO_OUTPUT);
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	66 e0       	ldi	r22, 0x06	; 6
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_C3_PIN,DIO_OUTPUT);
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	67 e0       	ldi	r22, 0x07	; 7
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_C0_PIN,DIO_HIGH_LEVEL);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	64 e0       	ldi	r22, 0x04	; 4
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_C1_PIN,DIO_HIGH_LEVEL);
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	65 e0       	ldi	r22, 0x05	; 5
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_C2_PIN,DIO_HIGH_LEVEL);
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	66 e0       	ldi	r22, 0x06	; 6
    1e70:	41 e0       	ldi	r20, 0x01	; 1
    1e72:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_C3_PIN,DIO_HIGH_LEVEL);
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	67 e0       	ldi	r22, 0x07	; 7
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>

	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_R0_PIN,DIO_PULL_UP);
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_R1_PIN,DIO_PULL_UP);
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	61 e0       	ldi	r22, 0x01	; 1
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_R2_PIN,DIO_PULL_UP);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	62 e0       	ldi	r22, 0x02	; 2
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_R3_PIN,DIO_PULL_UP);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	63 e0       	ldi	r22, 0x03	; 3
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>



	return Local_enuErrorState;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eaa:	0f 90       	pop	r0
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey( u8* Copy_pu8PressedKey)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	e2 97       	sbiw	r28, 0x32	; 50
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	9c a7       	std	Y+44, r25	; 0x2c
    1ec8:	8b a7       	std	Y+43, r24	; 0x2b
	ES_t Local_enuErrorState = ES_NOK;
    1eca:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Local_u8RowIter;
	u8 Local_u8ColumnIter;
	u8 Local_u8PinValue;
	*Copy_pu8PressedKey = Keypad_NOT_PREESED;
    1ecc:	eb a5       	ldd	r30, Y+43	; 0x2b
    1ece:	fc a5       	ldd	r31, Y+44	; 0x2c
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	80 83       	st	Z, r24
	u8 Local_Au8RowsPin[KEYPAD_u8ROWS_NUMBER] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
    1ed4:	1b 8a       	std	Y+19, r1	; 0x13
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	8c 8b       	std	Y+20, r24	; 0x14
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	8d 8b       	std	Y+21, r24	; 0x15
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	8e 8b       	std	Y+22, r24	; 0x16
	u8 Local_Au8ColumnsPin[KEYPAD_u8COLUMNS_NUMBER] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
    1ee2:	84 e0       	ldi	r24, 0x04	; 4
    1ee4:	8f 8b       	std	Y+23, r24	; 0x17
    1ee6:	85 e0       	ldi	r24, 0x05	; 5
    1ee8:	88 8f       	std	Y+24, r24	; 0x18
    1eea:	86 e0       	ldi	r24, 0x06	; 6
    1eec:	89 8f       	std	Y+25, r24	; 0x19
    1eee:	87 e0       	ldi	r24, 0x07	; 7
    1ef0:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_Au8ArrayOfValue[KEYPAD_u8ROWS_NUMBER][KEYPAD_u8COLUMNS_NUMBER] = KEYPAD_Au8KEYS_VALUES ;
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	4b 96       	adiw	r24, 0x1b	; 27
    1ef6:	9f a7       	std	Y+47, r25	; 0x2f
    1ef8:	8e a7       	std	Y+46, r24	; 0x2e
    1efa:	e8 e6       	ldi	r30, 0x68	; 104
    1efc:	f1 e0       	ldi	r31, 0x01	; 1
    1efe:	f9 ab       	std	Y+49, r31	; 0x31
    1f00:	e8 ab       	std	Y+48, r30	; 0x30
    1f02:	f0 e1       	ldi	r31, 0x10	; 16
    1f04:	fa ab       	std	Y+50, r31	; 0x32
    1f06:	e8 a9       	ldd	r30, Y+48	; 0x30
    1f08:	f9 a9       	ldd	r31, Y+49	; 0x31
    1f0a:	00 80       	ld	r0, Z
    1f0c:	88 a9       	ldd	r24, Y+48	; 0x30
    1f0e:	99 a9       	ldd	r25, Y+49	; 0x31
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	99 ab       	std	Y+49, r25	; 0x31
    1f14:	88 ab       	std	Y+48, r24	; 0x30
    1f16:	ee a5       	ldd	r30, Y+46	; 0x2e
    1f18:	ff a5       	ldd	r31, Y+47	; 0x2f
    1f1a:	00 82       	st	Z, r0
    1f1c:	8e a5       	ldd	r24, Y+46	; 0x2e
    1f1e:	9f a5       	ldd	r25, Y+47	; 0x2f
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	9f a7       	std	Y+47, r25	; 0x2f
    1f24:	8e a7       	std	Y+46, r24	; 0x2e
    1f26:	9a a9       	ldd	r25, Y+50	; 0x32
    1f28:	91 50       	subi	r25, 0x01	; 1
    1f2a:	9a ab       	std	Y+50, r25	; 0x32
    1f2c:	ea a9       	ldd	r30, Y+50	; 0x32
    1f2e:	ee 23       	and	r30, r30
    1f30:	51 f7       	brne	.-44     	; 0x1f06 <Keypad_enuGetPressedKey+0x54>


	for(Local_u8ColumnIter = 0 ; Local_u8ColumnIter < KEYPAD_u8COLUMNS_NUMBER ; Local_u8ColumnIter++ )
    1f32:	18 8a       	std	Y+16, r1	; 0x10
    1f34:	e8 c0       	rjmp	.+464    	; 0x2106 <Keypad_enuGetPressedKey+0x254>
	{
		/*  set column to zero*/
		DIO_enuSetPinValue(KEYPAD_GRP, Local_Au8ColumnsPin[Local_u8ColumnIter] , DIO_LOW_LEVEL);
    1f36:	88 89       	ldd	r24, Y+16	; 0x10
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	47 96       	adiw	r24, 0x17	; 23
    1f40:	fc 01       	movw	r30, r24
    1f42:	e2 0f       	add	r30, r18
    1f44:	f3 1f       	adc	r31, r19
    1f46:	90 81       	ld	r25, Z
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	69 2f       	mov	r22, r25
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>

		for(Local_u8RowIter = 0 ; Local_u8RowIter < KEYPAD_u8ROWS_NUMBER ; Local_u8RowIter++)
    1f52:	19 8a       	std	Y+17, r1	; 0x11
    1f54:	c3 c0       	rjmp	.+390    	; 0x20dc <Keypad_enuGetPressedKey+0x22a>
		{
			Local_u8PinValue = DIO_u8GetPinValue(KEYPAD_GRP , Local_Au8RowsPin[Local_u8RowIter] );
    1f56:	89 89       	ldd	r24, Y+17	; 0x11
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	43 96       	adiw	r24, 0x13	; 19
    1f60:	fc 01       	movw	r30, r24
    1f62:	e2 0f       	add	r30, r18
    1f64:	f3 1f       	adc	r31, r19
    1f66:	90 81       	ld	r25, Z
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	69 2f       	mov	r22, r25
    1f6c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_u8GetPinValue>
    1f70:	8f 87       	std	Y+15, r24	; 0x0f

			if( Local_u8PinValue == DIO_LOW_LEVEL )
    1f72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f74:	88 23       	and	r24, r24
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <Keypad_enuGetPressedKey+0xc8>
    1f78:	ae c0       	rjmp	.+348    	; 0x20d6 <Keypad_enuGetPressedKey+0x224>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e2       	ldi	r26, 0x20	; 32
    1f80:	b1 e4       	ldi	r27, 0x41	; 65
    1f82:	8b 87       	std	Y+11, r24	; 0x0b
    1f84:	9c 87       	std	Y+12, r25	; 0x0c
    1f86:	ad 87       	std	Y+13, r26	; 0x0d
    1f88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4a e7       	ldi	r20, 0x7A	; 122
    1f98:	55 e4       	ldi	r21, 0x45	; 69
    1f9a:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	8f 83       	std	Y+7, r24	; 0x07
    1fa4:	98 87       	std	Y+8, r25	; 0x08
    1fa6:	a9 87       	std	Y+9, r26	; 0x09
    1fa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1faa:	6f 81       	ldd	r22, Y+7	; 0x07
    1fac:	78 85       	ldd	r23, Y+8	; 0x08
    1fae:	89 85       	ldd	r24, Y+9	; 0x09
    1fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <Keypad_enuGetPressedKey+0x11a>
		__ticks = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
    1fca:	3f c0       	rjmp	.+126    	; 0x204a <Keypad_enuGetPressedKey+0x198>
	else if (__tmp > 65535)
    1fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fce:	78 85       	ldd	r23, Y+8	; 0x08
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	3f ef       	ldi	r19, 0xFF	; 255
    1fd8:	4f e7       	ldi	r20, 0x7F	; 127
    1fda:	57 e4       	ldi	r21, 0x47	; 71
    1fdc:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	4c f5       	brge	.+82     	; 0x2036 <Keypad_enuGetPressedKey+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e2       	ldi	r20, 0x20	; 32
    1ff2:	51 e4       	ldi	r21, 0x41	; 65
    1ff4:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	0f c0       	rjmp	.+30     	; 0x202c <Keypad_enuGetPressedKey+0x17a>
    200e:	80 e9       	ldi	r24, 0x90	; 144
    2010:	91 e0       	ldi	r25, 0x01	; 1
    2012:	9c 83       	std	Y+4, r25	; 0x04
    2014:	8b 83       	std	Y+3, r24	; 0x03
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <Keypad_enuGetPressedKey+0x168>
    201e:	9c 83       	std	Y+4, r25	; 0x04
    2020:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	9e 81       	ldd	r25, Y+6	; 0x06
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	69 f7       	brne	.-38     	; 0x200e <Keypad_enuGetPressedKey+0x15c>
    2034:	14 c0       	rjmp	.+40     	; 0x205e <Keypad_enuGetPressedKey+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	6f 81       	ldd	r22, Y+7	; 0x07
    2038:	78 85       	ldd	r23, Y+8	; 0x08
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	9a 83       	std	Y+2, r25	; 0x02
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <Keypad_enuGetPressedKey+0x1a4>
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10); // for debouncing
				Local_u8PinValue = DIO_u8GetPinValue(KEYPAD_GRP , Local_Au8RowsPin[Local_u8RowIter]);
    205e:	89 89       	ldd	r24, Y+17	; 0x11
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	ce 01       	movw	r24, r28
    2066:	43 96       	adiw	r24, 0x13	; 19
    2068:	fc 01       	movw	r30, r24
    206a:	e2 0f       	add	r30, r18
    206c:	f3 1f       	adc	r31, r19
    206e:	90 81       	ld	r25, Z
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	69 2f       	mov	r22, r25
    2074:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_u8GetPinValue>
    2078:	8f 87       	std	Y+15, r24	; 0x0f
				if( Local_u8PinValue == DIO_LOW_LEVEL )
    207a:	8f 85       	ldd	r24, Y+15	; 0x0f
    207c:	88 23       	and	r24, r24
    207e:	59 f5       	brne	.+86     	; 0x20d6 <Keypad_enuGetPressedKey+0x224>
				{

					*Copy_pu8PressedKey = Local_Au8ArrayOfValue[Local_u8RowIter][Local_u8ColumnIter];
    2080:	89 89       	ldd	r24, Y+17	; 0x11
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	88 89       	ldd	r24, Y+16	; 0x10
    2088:	48 2f       	mov	r20, r24
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	22 0f       	add	r18, r18
    208e:	33 1f       	adc	r19, r19
    2090:	22 0f       	add	r18, r18
    2092:	33 1f       	adc	r19, r19
    2094:	ce 01       	movw	r24, r28
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	82 0f       	add	r24, r18
    209a:	93 1f       	adc	r25, r19
    209c:	84 0f       	add	r24, r20
    209e:	95 1f       	adc	r25, r21
    20a0:	fc 01       	movw	r30, r24
    20a2:	7a 96       	adiw	r30, 0x1a	; 26
    20a4:	80 81       	ld	r24, Z
    20a6:	eb a5       	ldd	r30, Y+43	; 0x2b
    20a8:	fc a5       	ldd	r31, Y+44	; 0x2c
    20aa:	80 83       	st	Z, r24
    20ac:	0e c0       	rjmp	.+28     	; 0x20ca <Keypad_enuGetPressedKey+0x218>
					//to prevent the holding press ( pooling or busy waiting )
					while(Local_u8PinValue == DIO_LOW_LEVEL )
					{
						Local_u8PinValue = DIO_u8GetPinValue(KEYPAD_GRP , Local_Au8RowsPin[Local_u8RowIter] );
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	ce 01       	movw	r24, r28
    20b6:	43 96       	adiw	r24, 0x13	; 19
    20b8:	fc 01       	movw	r30, r24
    20ba:	e2 0f       	add	r30, r18
    20bc:	f3 1f       	adc	r31, r19
    20be:	90 81       	ld	r25, Z
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	69 2f       	mov	r22, r25
    20c4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_u8GetPinValue>
    20c8:	8f 87       	std	Y+15, r24	; 0x0f
				if( Local_u8PinValue == DIO_LOW_LEVEL )
				{

					*Copy_pu8PressedKey = Local_Au8ArrayOfValue[Local_u8RowIter][Local_u8ColumnIter];
					//to prevent the holding press ( pooling or busy waiting )
					while(Local_u8PinValue == DIO_LOW_LEVEL )
    20ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    20cc:	88 23       	and	r24, r24
    20ce:	79 f3       	breq	.-34     	; 0x20ae <Keypad_enuGetPressedKey+0x1fc>
					{
						Local_u8PinValue = DIO_u8GetPinValue(KEYPAD_GRP , Local_Au8RowsPin[Local_u8RowIter] );
					}

					return ES_OK;
    20d0:	f1 e0       	ldi	r31, 0x01	; 1
    20d2:	fd a7       	std	Y+45, r31	; 0x2d
    20d4:	1e c0       	rjmp	.+60     	; 0x2112 <Keypad_enuGetPressedKey+0x260>
	for(Local_u8ColumnIter = 0 ; Local_u8ColumnIter < KEYPAD_u8COLUMNS_NUMBER ; Local_u8ColumnIter++ )
	{
		/*  set column to zero*/
		DIO_enuSetPinValue(KEYPAD_GRP, Local_Au8ColumnsPin[Local_u8ColumnIter] , DIO_LOW_LEVEL);

		for(Local_u8RowIter = 0 ; Local_u8RowIter < KEYPAD_u8ROWS_NUMBER ; Local_u8RowIter++)
    20d6:	89 89       	ldd	r24, Y+17	; 0x11
    20d8:	8f 5f       	subi	r24, 0xFF	; 255
    20da:	89 8b       	std	Y+17, r24	; 0x11
    20dc:	89 89       	ldd	r24, Y+17	; 0x11
    20de:	84 30       	cpi	r24, 0x04	; 4
    20e0:	08 f4       	brcc	.+2      	; 0x20e4 <Keypad_enuGetPressedKey+0x232>
    20e2:	39 cf       	rjmp	.-398    	; 0x1f56 <Keypad_enuGetPressedKey+0xa4>
			}

		}


		DIO_enuSetPinValue(KEYPAD_GRP, Local_Au8ColumnsPin[Local_u8ColumnIter] , DIO_HIGH_LEVEL);
    20e4:	88 89       	ldd	r24, Y+16	; 0x10
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	ce 01       	movw	r24, r28
    20ec:	47 96       	adiw	r24, 0x17	; 23
    20ee:	fc 01       	movw	r30, r24
    20f0:	e2 0f       	add	r30, r18
    20f2:	f3 1f       	adc	r31, r19
    20f4:	90 81       	ld	r25, Z
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	69 2f       	mov	r22, r25
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
	u8 Local_Au8RowsPin[KEYPAD_u8ROWS_NUMBER] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 Local_Au8ColumnsPin[KEYPAD_u8COLUMNS_NUMBER] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
	u8 Local_Au8ArrayOfValue[KEYPAD_u8ROWS_NUMBER][KEYPAD_u8COLUMNS_NUMBER] = KEYPAD_Au8KEYS_VALUES ;


	for(Local_u8ColumnIter = 0 ; Local_u8ColumnIter < KEYPAD_u8COLUMNS_NUMBER ; Local_u8ColumnIter++ )
    2100:	88 89       	ldd	r24, Y+16	; 0x10
    2102:	8f 5f       	subi	r24, 0xFF	; 255
    2104:	88 8b       	std	Y+16, r24	; 0x10
    2106:	88 89       	ldd	r24, Y+16	; 0x10
    2108:	84 30       	cpi	r24, 0x04	; 4
    210a:	08 f4       	brcc	.+2      	; 0x210e <Keypad_enuGetPressedKey+0x25c>
    210c:	14 cf       	rjmp	.-472    	; 0x1f36 <Keypad_enuGetPressedKey+0x84>

		DIO_enuSetPinValue(KEYPAD_GRP, Local_Au8ColumnsPin[Local_u8ColumnIter] , DIO_HIGH_LEVEL);
	}


	return Local_enuErrorState;
    210e:	8a 89       	ldd	r24, Y+18	; 0x12
    2110:	8d a7       	std	Y+45, r24	; 0x2d
    2112:	8d a5       	ldd	r24, Y+45	; 0x2d
}
    2114:	e2 96       	adiw	r28, 0x32	; 50
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <SendHalfDataPort>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_configuration.h"

static void SendHalfDataPort(u8 Copy_u8Data)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <SendHalfDataPort+0x6>
    212c:	00 d0       	rcall	.+0      	; 0x212e <SendHalfDataPort+0x8>
    212e:	00 d0       	rcall	.+0      	; 0x2130 <SendHalfDataPort+0xa>
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_Au8DataPins[4]={LCD_DATA_PIN4,LCD_DATA_PIN5,LCD_DATA_PIN6,LCD_DATA_PIN7};
    2136:	84 e0       	ldi	r24, 0x04	; 4
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	85 e0       	ldi	r24, 0x05	; 5
    213c:	8b 83       	std	Y+3, r24	; 0x03
    213e:	86 e0       	ldi	r24, 0x06	; 6
    2140:	8c 83       	std	Y+4, r24	; 0x04
    2142:	87 e0       	ldi	r24, 0x07	; 7
    2144:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_u8Iterator ;

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 4 ;Local_u8Iterator++ )
    2146:	19 82       	std	Y+1, r1	; 0x01
    2148:	20 c0       	rjmp	.+64     	; 0x218a <SendHalfDataPort+0x64>
	{
		DIO_enuSetPinValue(LCD_DATA_GRP , Local_Au8DataPins[Local_u8Iterator],(Copy_u8Data >> Local_u8Iterator) & 1);
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	ce 01       	movw	r24, r28
    2152:	02 96       	adiw	r24, 0x02	; 2
    2154:	fc 01       	movw	r30, r24
    2156:	e2 0f       	add	r30, r18
    2158:	f3 1f       	adc	r31, r19
    215a:	40 81       	ld	r20, Z
    215c:	8e 81       	ldd	r24, Y+6	; 0x06
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	88 2f       	mov	r24, r24
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	b9 01       	movw	r22, r18
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <SendHalfDataPort+0x4a>
    216c:	75 95       	asr	r23
    216e:	67 95       	ror	r22
    2170:	8a 95       	dec	r24
    2172:	e2 f7       	brpl	.-8      	; 0x216c <SendHalfDataPort+0x46>
    2174:	cb 01       	movw	r24, r22
    2176:	98 2f       	mov	r25, r24
    2178:	91 70       	andi	r25, 0x01	; 1
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	64 2f       	mov	r22, r20
    217e:	49 2f       	mov	r20, r25
    2180:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
static void SendHalfDataPort(u8 Copy_u8Data)
{
	u8 Local_Au8DataPins[4]={LCD_DATA_PIN4,LCD_DATA_PIN5,LCD_DATA_PIN6,LCD_DATA_PIN7};
	u8 Local_u8Iterator ;

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 4 ;Local_u8Iterator++ )
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	8f 5f       	subi	r24, 0xFF	; 255
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	e8 f2       	brcs	.-70     	; 0x214a <SendHalfDataPort+0x24>
	{
		DIO_enuSetPinValue(LCD_DATA_GRP , Local_Au8DataPins[Local_u8Iterator],(Copy_u8Data >> Local_u8Iterator) & 1);
	}

}
    2190:	26 96       	adiw	r28, 0x06	; 6
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <SendEnablePulse>:

static void SendEnablePulse()
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	2e 97       	sbiw	r28, 0x0e	; 14
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_HIGH_LEVEL);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	63 e0       	ldi	r22, 0x03	; 3
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	a0 e0       	ldi	r26, 0x00	; 0
    21c6:	b0 e4       	ldi	r27, 0x40	; 64
    21c8:	8b 87       	std	Y+11, r24	; 0x0b
    21ca:	9c 87       	std	Y+12, r25	; 0x0c
    21cc:	ad 87       	std	Y+13, r26	; 0x0d
    21ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	4a e7       	ldi	r20, 0x7A	; 122
    21de:	55 e4       	ldi	r21, 0x45	; 69
    21e0:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8f 83       	std	Y+7, r24	; 0x07
    21ea:	98 87       	std	Y+8, r25	; 0x08
    21ec:	a9 87       	std	Y+9, r26	; 0x09
    21ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e8       	ldi	r20, 0x80	; 128
    21fe:	5f e3       	ldi	r21, 0x3F	; 63
    2200:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    2204:	88 23       	and	r24, r24
    2206:	2c f4       	brge	.+10     	; 0x2212 <SendEnablePulse+0x70>
		__ticks = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9e 83       	std	Y+6, r25	; 0x06
    220e:	8d 83       	std	Y+5, r24	; 0x05
    2210:	3f c0       	rjmp	.+126    	; 0x2290 <SendEnablePulse+0xee>
	else if (__tmp > 65535)
    2212:	6f 81       	ldd	r22, Y+7	; 0x07
    2214:	78 85       	ldd	r23, Y+8	; 0x08
    2216:	89 85       	ldd	r24, Y+9	; 0x09
    2218:	9a 85       	ldd	r25, Y+10	; 0x0a
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	4f e7       	ldi	r20, 0x7F	; 127
    2220:	57 e4       	ldi	r21, 0x47	; 71
    2222:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    2226:	18 16       	cp	r1, r24
    2228:	4c f5       	brge	.+82     	; 0x227c <SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222a:	6b 85       	ldd	r22, Y+11	; 0x0b
    222c:	7c 85       	ldd	r23, Y+12	; 0x0c
    222e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2230:	9e 85       	ldd	r25, Y+14	; 0x0e
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
    2252:	0f c0       	rjmp	.+30     	; 0x2272 <SendEnablePulse+0xd0>
    2254:	80 e9       	ldi	r24, 0x90	; 144
    2256:	91 e0       	ldi	r25, 0x01	; 1
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <SendEnablePulse+0xbe>
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	9e 81       	ldd	r25, Y+6	; 0x06
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	69 f7       	brne	.-38     	; 0x2254 <SendEnablePulse+0xb2>
    227a:	14 c0       	rjmp	.+40     	; 0x22a4 <SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227c:	6f 81       	ldd	r22, Y+7	; 0x07
    227e:	78 85       	ldd	r23, Y+8	; 0x08
    2280:	89 85       	ldd	r24, Y+9	; 0x09
    2282:	9a 85       	ldd	r25, Y+10	; 0x0a
    2284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <SendEnablePulse+0xfa>
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	89 83       	std	Y+1, r24	; 0x01

	/* Wait */
	_delay_ms(2);

	DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_LOW_LEVEL);
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	63 e0       	ldi	r22, 0x03	; 3
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>

}
    22ae:	2e 96       	adiw	r28, 0x0e	; 14
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <LCD_enuSetAllDirection>:


ES_t LCD_enuSetAllDirection()
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	0f 92       	push	r0
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	89 83       	std	Y+1, r24	; 0x01

	/* Control Direction */
	DIO_enuSetPinDirection(LCD_RS_GRP,LCD_RS_PIN,DIO_OUTPUT);
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	41 e0       	ldi	r20, 0x01	; 1
    22d4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_RW_GRP,LCD_RW_PIN,DIO_OUTPUT);
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	62 e0       	ldi	r22, 0x02	; 2
    22dc:	41 e0       	ldi	r20, 0x01	; 1
    22de:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_EN_GRP,LCD_EN_PIN,DIO_OUTPUT);
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	63 e0       	ldi	r22, 0x03	; 3
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	/* Data Direction */
#if LCD_MODE == LCD_EIGHT_BIT
	DIO_enuSetPortDirection(LCD_DATA_GRP,0xff);

#elif LCD_MODE == LCD_FOUR_BIT
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN4,DIO_OUTPUT);
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	64 e0       	ldi	r22, 0x04	; 4
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN5,DIO_OUTPUT);
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	65 e0       	ldi	r22, 0x05	; 5
    22fa:	41 e0       	ldi	r20, 0x01	; 1
    22fc:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN6,DIO_OUTPUT);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	66 e0       	ldi	r22, 0x06	; 6
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN7,DIO_OUTPUT);
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	67 e0       	ldi	r22, 0x07	; 7
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>

#endif
	return Local_enuErrorState;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
}
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <LCD_enuInit>:

ES_t LCD_enuInit(void)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	2f 97       	sbiw	r28, 0x0f	; 15
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_OK;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_enuSetAllDirection();
    2336:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_enuSetAllDirection>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a0 e2       	ldi	r26, 0x20	; 32
    2340:	b2 e4       	ldi	r27, 0x42	; 66
    2342:	8b 87       	std	Y+11, r24	; 0x0b
    2344:	9c 87       	std	Y+12, r25	; 0x0c
    2346:	ad 87       	std	Y+13, r26	; 0x0d
    2348:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234a:	6b 85       	ldd	r22, Y+11	; 0x0b
    234c:	7c 85       	ldd	r23, Y+12	; 0x0c
    234e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2350:	9e 85       	ldd	r25, Y+14	; 0x0e
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a e7       	ldi	r20, 0x7A	; 122
    2358:	55 e4       	ldi	r21, 0x45	; 69
    235a:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8f 83       	std	Y+7, r24	; 0x07
    2364:	98 87       	std	Y+8, r25	; 0x08
    2366:	a9 87       	std	Y+9, r26	; 0x09
    2368:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    237e:	88 23       	and	r24, r24
    2380:	2c f4       	brge	.+10     	; 0x238c <LCD_enuInit+0x6e>
		__ticks = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	3f c0       	rjmp	.+126    	; 0x240a <LCD_enuInit+0xec>
	else if (__tmp > 65535)
    238c:	6f 81       	ldd	r22, Y+7	; 0x07
    238e:	78 85       	ldd	r23, Y+8	; 0x08
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	3f ef       	ldi	r19, 0xFF	; 255
    2398:	4f e7       	ldi	r20, 0x7F	; 127
    239a:	57 e4       	ldi	r21, 0x47	; 71
    239c:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    23a0:	18 16       	cp	r1, r24
    23a2:	4c f5       	brge	.+82     	; 0x23f6 <LCD_enuInit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e2       	ldi	r20, 0x20	; 32
    23b2:	51 e4       	ldi	r21, 0x41	; 65
    23b4:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	bc 01       	movw	r22, r24
    23be:	cd 01       	movw	r24, r26
    23c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9e 83       	std	Y+6, r25	; 0x06
    23ca:	8d 83       	std	Y+5, r24	; 0x05
    23cc:	0f c0       	rjmp	.+30     	; 0x23ec <LCD_enuInit+0xce>
    23ce:	80 e9       	ldi	r24, 0x90	; 144
    23d0:	91 e0       	ldi	r25, 0x01	; 1
    23d2:	9c 83       	std	Y+4, r25	; 0x04
    23d4:	8b 83       	std	Y+3, r24	; 0x03
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_enuInit+0xbc>
    23de:	9c 83       	std	Y+4, r25	; 0x04
    23e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	9e 81       	ldd	r25, Y+6	; 0x06
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	69 f7       	brne	.-38     	; 0x23ce <LCD_enuInit+0xb0>
    23f4:	14 c0       	rjmp	.+40     	; 0x241e <LCD_enuInit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f6:	6f 81       	ldd	r22, Y+7	; 0x07
    23f8:	78 85       	ldd	r23, Y+8	; 0x08
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	9a 83       	std	Y+2, r25	; 0x02
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	9a 81       	ldd	r25, Y+2	; 0x02
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <LCD_enuInit+0xf8>
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuWriteCommand(0b00111000);

#elif LCD_MODE == LCD_FOUR_BIT

	/* Function Set */
	SendHalfDataPort(0b0010);
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	0e 94 93 10 	call	0x2126	; 0x2126 <SendHalfDataPort>
	SendEnablePulse();
    2424:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <SendEnablePulse>
	SendHalfDataPort(0b0010);
    2428:	82 e0       	ldi	r24, 0x02	; 2
    242a:	0e 94 93 10 	call	0x2126	; 0x2126 <SendHalfDataPort>
	SendEnablePulse();
    242e:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <SendEnablePulse>
	SendHalfDataPort(0b1100);
    2432:	8c e0       	ldi	r24, 0x0C	; 12
    2434:	0e 94 93 10 	call	0x2126	; 0x2126 <SendHalfDataPort>
	SendEnablePulse();
    2438:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <SendEnablePulse>
#else
	Error : " The configuration is wrong "
#endif

	/* Display Control */
	LCD_enuWriteCommand(0b00001111);
    243c:	8f e0       	ldi	r24, 0x0F	; 15
    243e:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_enuWriteCommand>

	/* Display Clear */
	LCD_enuClear();
    2442:	0e 94 51 12 	call	0x24a2	; 0x24a2 <LCD_enuClear>



	return Local_enuErrorState;
    2446:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2448:	2f 96       	adiw	r28, 0x0f	; 15
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Command)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	00 d0       	rcall	.+0      	; 0x2460 <LCD_enuWriteCommand+0x6>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	89 83       	std	Y+1, r24	; 0x01

	/* Set RS to zero for writing command */
	DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW_LEVEL);
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>

	/* Set RW to zero for writing */
	DIO_enuSetPinValue(LCD_RW_GRP,LCD_RW_PIN,DIO_LOW_LEVEL);
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	62 e0       	ldi	r22, 0x02	; 2
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
	SendEnablePulse();

#elif LCD_MODE == LCD_FOUR_BIT

	/* Write higher command to data pins */
	SendHalfDataPort(Copy_u8Command >> 4);
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	82 95       	swap	r24
    2482:	8f 70       	andi	r24, 0x0F	; 15
    2484:	0e 94 93 10 	call	0x2126	; 0x2126 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
    2488:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <SendEnablePulse>

	/* Write lower command to data pins */
	SendHalfDataPort(Copy_u8Command);
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	0e 94 93 10 	call	0x2126	; 0x2126 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
    2492:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <SendEnablePulse>

#endif



	return Local_enuErrorState;
    2496:	89 81       	ldd	r24, Y+1	; 0x01


}
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <LCD_enuClear>:

ES_t LCD_enuClear()
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	2f 97       	sbiw	r28, 0x0f	; 15
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_OK;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_enuWriteCommand(0b00000001);
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_enuWriteCommand>
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a0 e0       	ldi	r26, 0x00	; 0
    24c6:	b0 e4       	ldi	r27, 0x40	; 64
    24c8:	8b 87       	std	Y+11, r24	; 0x0b
    24ca:	9c 87       	std	Y+12, r25	; 0x0c
    24cc:	ad 87       	std	Y+13, r26	; 0x0d
    24ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a e7       	ldi	r20, 0x7A	; 122
    24de:	55 e4       	ldi	r21, 0x45	; 69
    24e0:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	8f 83       	std	Y+7, r24	; 0x07
    24ea:	98 87       	std	Y+8, r25	; 0x08
    24ec:	a9 87       	std	Y+9, r26	; 0x09
    24ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <LCD_enuClear+0x70>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	3f c0       	rjmp	.+126    	; 0x2590 <LCD_enuClear+0xee>
	else if (__tmp > 65535)
    2512:	6f 81       	ldd	r22, Y+7	; 0x07
    2514:	78 85       	ldd	r23, Y+8	; 0x08
    2516:	89 85       	ldd	r24, Y+9	; 0x09
    2518:	9a 85       	ldd	r25, Y+10	; 0x0a
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	57 e4       	ldi	r21, 0x47	; 71
    2522:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	4c f5       	brge	.+82     	; 0x257c <LCD_enuClear+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	6b 85       	ldd	r22, Y+11	; 0x0b
    252c:	7c 85       	ldd	r23, Y+12	; 0x0c
    252e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2530:	9e 85       	ldd	r25, Y+14	; 0x0e
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <LCD_enuClear+0xd0>
    2554:	80 e9       	ldi	r24, 0x90	; 144
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <LCD_enuClear+0xbe>
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	69 f7       	brne	.-38     	; 0x2554 <LCD_enuClear+0xb2>
    257a:	14 c0       	rjmp	.+40     	; 0x25a4 <LCD_enuClear+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <LCD_enuClear+0xfa>
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01

	/* Wait */
	_delay_ms(2);

	return Local_enuErrorState;
    25a4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    25a6:	2f 96       	adiw	r28, 0x0f	; 15
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	00 d0       	rcall	.+0      	; 0x25be <LCD_enuWriteData+0x6>
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	89 83       	std	Y+1, r24	; 0x01

	/* Set RS to one for writing data */
	DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH_LEVEL);
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	61 e0       	ldi	r22, 0x01	; 1
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>

	/* Set RW to zero for writing */
	DIO_enuSetPinValue(LCD_RW_GRP,LCD_RW_PIN,DIO_LOW_LEVEL);
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	62 e0       	ldi	r22, 0x02	; 2
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_enuSetPinValue>
	SendEnablePulse();

#elif LCD_MODE == LCD_FOUR_BIT

	/* Write higher data to data pins */
	SendHalfDataPort(Copy_u8Data >> 4);
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	82 95       	swap	r24
    25e0:	8f 70       	andi	r24, 0x0F	; 15
    25e2:	0e 94 93 10 	call	0x2126	; 0x2126 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
    25e6:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <SendEnablePulse>

	/* Write lower data to data pins */
	SendHalfDataPort(Copy_u8Data);
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	0e 94 93 10 	call	0x2126	; 0x2126 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
    25f0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <SendEnablePulse>

#endif

	return Local_enuErrorState;
    25f4:	89 81       	ldd	r24, Y+1	; 0x01

}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char* Copy_pchString)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	00 d0       	rcall	.+0      	; 0x2606 <LCD_enuWriteString+0x6>
    2606:	00 d0       	rcall	.+0      	; 0x2608 <LCD_enuWriteString+0x8>
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	9c 83       	std	Y+4, r25	; 0x04
    260e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2610:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter = 0;
    2612:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pchString != NULL )
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	e9 f0       	breq	.+58     	; 0x2656 <LCD_enuWriteString+0x56>
    261c:	0e c0       	rjmp	.+28     	; 0x263a <LCD_enuWriteString+0x3a>
	{
		while(Copy_pchString[Local_u8Counter] != '\0')
		{
			LCD_enuWriteData(Copy_pchString[Local_u8Counter]);
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	fc 01       	movw	r30, r24
    262a:	e2 0f       	add	r30, r18
    262c:	f3 1f       	adc	r31, r19
    262e:	80 81       	ld	r24, Z
    2630:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_enuWriteData>
			Local_u8Counter++;
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	8f 5f       	subi	r24, 0xFF	; 255
    2638:	89 83       	std	Y+1, r24	; 0x01
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter = 0;

	if(Copy_pchString != NULL )
	{
		while(Copy_pchString[Local_u8Counter] != '\0')
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	fc 01       	movw	r30, r24
    2646:	e2 0f       	add	r30, r18
    2648:	f3 1f       	adc	r31, r19
    264a:	80 81       	ld	r24, Z
    264c:	88 23       	and	r24, r24
    264e:	39 f7       	brne	.-50     	; 0x261e <LCD_enuWriteString+0x1e>
		{
			LCD_enuWriteData(Copy_pchString[Local_u8Counter]);
			Local_u8Counter++;
		}
		Local_enuErrorState = ES_OK;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	8a 83       	std	Y+2, r24	; 0x02
    2654:	02 c0       	rjmp	.+4      	; 0x265a <LCD_enuWriteString+0x5a>
	}
	else
	{
		Local_enuErrorState = NULL_POINTER;
    2656:	83 e0       	ldi	r24, 0x03	; 3
    2658:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <LCD_enuWriteIntegerNumber>:

ES_t LCD_enuWriteIntegerNumber(s32 Copy_s32IntegerNumber)
{
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	2a 97       	sbiw	r28, 0x0a	; 10
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	6f 83       	std	Y+7, r22	; 0x07
    2688:	78 87       	std	Y+8, r23	; 0x08
    268a:	89 87       	std	Y+9, r24	; 0x09
    268c:	9a 87       	std	Y+10, r25	; 0x0a
	ES_t Local_enuErrorState = ES_OK;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32OppositedNumber = 0;
    2692:	1a 82       	std	Y+2, r1	; 0x02
    2694:	1b 82       	std	Y+3, r1	; 0x03
    2696:	1c 82       	std	Y+4, r1	; 0x04
    2698:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8CurrentDigit = 0;
    269a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32IntegerNumber < 0)
    269c:	8f 81       	ldd	r24, Y+7	; 0x07
    269e:	98 85       	ldd	r25, Y+8	; 0x08
    26a0:	a9 85       	ldd	r26, Y+9	; 0x09
    26a2:	ba 85       	ldd	r27, Y+10	; 0x0a
    26a4:	bb 23       	and	r27, r27
    26a6:	0c f0       	brlt	.+2      	; 0x26aa <LCD_enuWriteIntegerNumber+0x40>
    26a8:	49 c0       	rjmp	.+146    	; 0x273c <LCD_enuWriteIntegerNumber+0xd2>
	{
		LCD_enuWriteData('-');
    26aa:	8d e2       	ldi	r24, 0x2D	; 45
    26ac:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_enuWriteData>
		Copy_s32IntegerNumber *= -1;
    26b0:	8f 81       	ldd	r24, Y+7	; 0x07
    26b2:	98 85       	ldd	r25, Y+8	; 0x08
    26b4:	a9 85       	ldd	r26, Y+9	; 0x09
    26b6:	ba 85       	ldd	r27, Y+10	; 0x0a
    26b8:	b0 95       	com	r27
    26ba:	a0 95       	com	r26
    26bc:	90 95       	com	r25
    26be:	81 95       	neg	r24
    26c0:	9f 4f       	sbci	r25, 0xFF	; 255
    26c2:	af 4f       	sbci	r26, 0xFF	; 255
    26c4:	bf 4f       	sbci	r27, 0xFF	; 255
    26c6:	8f 83       	std	Y+7, r24	; 0x07
    26c8:	98 87       	std	Y+8, r25	; 0x08
    26ca:	a9 87       	std	Y+9, r26	; 0x09
    26cc:	ba 87       	std	Y+10, r27	; 0x0a
    26ce:	36 c0       	rjmp	.+108    	; 0x273c <LCD_enuWriteIntegerNumber+0xd2>
	}

	while(Copy_s32IntegerNumber != 0)
	{
		Local_u32OppositedNumber = Local_u32OppositedNumber * 10 +  Copy_s32IntegerNumber % 10 ;
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	9b 81       	ldd	r25, Y+3	; 0x03
    26d4:	ac 81       	ldd	r26, Y+4	; 0x04
    26d6:	bd 81       	ldd	r27, Y+5	; 0x05
    26d8:	2a e0       	ldi	r18, 0x0A	; 10
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	bc 01       	movw	r22, r24
    26e2:	cd 01       	movw	r24, r26
    26e4:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__mulsi3>
    26e8:	7b 01       	movw	r14, r22
    26ea:	8c 01       	movw	r16, r24
    26ec:	8f 81       	ldd	r24, Y+7	; 0x07
    26ee:	98 85       	ldd	r25, Y+8	; 0x08
    26f0:	a9 85       	ldd	r26, Y+9	; 0x09
    26f2:	ba 85       	ldd	r27, Y+10	; 0x0a
    26f4:	2a e0       	ldi	r18, 0x0A	; 10
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 17 18 	call	0x302e	; 0x302e <__divmodsi4>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	8e 0d       	add	r24, r14
    270a:	9f 1d       	adc	r25, r15
    270c:	a0 1f       	adc	r26, r16
    270e:	b1 1f       	adc	r27, r17
    2710:	8a 83       	std	Y+2, r24	; 0x02
    2712:	9b 83       	std	Y+3, r25	; 0x03
    2714:	ac 83       	std	Y+4, r26	; 0x04
    2716:	bd 83       	std	Y+5, r27	; 0x05
		Copy_s32IntegerNumber /= 10;
    2718:	8f 81       	ldd	r24, Y+7	; 0x07
    271a:	98 85       	ldd	r25, Y+8	; 0x08
    271c:	a9 85       	ldd	r26, Y+9	; 0x09
    271e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2720:	2a e0       	ldi	r18, 0x0A	; 10
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 17 18 	call	0x302e	; 0x302e <__divmodsi4>
    2730:	da 01       	movw	r26, r20
    2732:	c9 01       	movw	r24, r18
    2734:	8f 83       	std	Y+7, r24	; 0x07
    2736:	98 87       	std	Y+8, r25	; 0x08
    2738:	a9 87       	std	Y+9, r26	; 0x09
    273a:	ba 87       	std	Y+10, r27	; 0x0a
	{
		LCD_enuWriteData('-');
		Copy_s32IntegerNumber *= -1;
	}

	while(Copy_s32IntegerNumber != 0)
    273c:	8f 81       	ldd	r24, Y+7	; 0x07
    273e:	98 85       	ldd	r25, Y+8	; 0x08
    2740:	a9 85       	ldd	r26, Y+9	; 0x09
    2742:	ba 85       	ldd	r27, Y+10	; 0x0a
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	a1 05       	cpc	r26, r1
    2748:	b1 05       	cpc	r27, r1
    274a:	11 f6       	brne	.-124    	; 0x26d0 <LCD_enuWriteIntegerNumber+0x66>
		Copy_s32IntegerNumber /= 10;
	}

	do
	{
		Local_u8CurrentDigit = Local_u32OppositedNumber % 10;
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	9b 81       	ldd	r25, Y+3	; 0x03
    2750:	ac 81       	ldd	r26, Y+4	; 0x04
    2752:	bd 81       	ldd	r27, Y+5	; 0x05
    2754:	2a e0       	ldi	r18, 0x0A	; 10
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__udivmodsi4>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteData(Local_u8CurrentDigit + 48);
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	80 5d       	subi	r24, 0xD0	; 208
    276e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_enuWriteData>
		Local_u32OppositedNumber /= 10;
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	9b 81       	ldd	r25, Y+3	; 0x03
    2776:	ac 81       	ldd	r26, Y+4	; 0x04
    2778:	bd 81       	ldd	r27, Y+5	; 0x05
    277a:	2a e0       	ldi	r18, 0x0A	; 10
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__udivmodsi4>
    278a:	da 01       	movw	r26, r20
    278c:	c9 01       	movw	r24, r18
    278e:	8a 83       	std	Y+2, r24	; 0x02
    2790:	9b 83       	std	Y+3, r25	; 0x03
    2792:	ac 83       	std	Y+4, r26	; 0x04
    2794:	bd 83       	std	Y+5, r27	; 0x05
	}while(Local_u32OppositedNumber != 0);
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	9b 81       	ldd	r25, Y+3	; 0x03
    279a:	ac 81       	ldd	r26, Y+4	; 0x04
    279c:	bd 81       	ldd	r27, Y+5	; 0x05
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	a1 05       	cpc	r26, r1
    27a2:	b1 05       	cpc	r27, r1
    27a4:	99 f6       	brne	.-90     	; 0x274c <LCD_enuWriteIntegerNumber+0xe2>


	return Local_enuErrorState;
    27a6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    27a8:	2a 96       	adiw	r28, 0x0a	; 10
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	08 95       	ret

000027c2 <LCD_enuWriteFloatNumber>:

ES_t LCD_enuWriteFloatNumber(f64 Copy_f64FloatNumber)
{
    27c2:	af 92       	push	r10
    27c4:	bf 92       	push	r11
    27c6:	cf 92       	push	r12
    27c8:	df 92       	push	r13
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	2e 97       	sbiw	r28, 0x0e	; 14
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	6b 87       	std	Y+11, r22	; 0x0b
    27e8:	7c 87       	std	Y+12, r23	; 0x0c
    27ea:	8d 87       	std	Y+13, r24	; 0x0d
    27ec:	9e 87       	std	Y+14, r25	; 0x0e
	ES_t Local_enuErrorState = ES_OK;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	8a 87       	std	Y+10, r24	; 0x0a
	u64 Local_u64IntegerNumber = 0;
    27f2:	1a 82       	std	Y+2, r1	; 0x02
    27f4:	1b 82       	std	Y+3, r1	; 0x03
    27f6:	1c 82       	std	Y+4, r1	; 0x04
    27f8:	1d 82       	std	Y+5, r1	; 0x05
    27fa:	1e 82       	std	Y+6, r1	; 0x06
    27fc:	1f 82       	std	Y+7, r1	; 0x07
    27fe:	18 86       	std	Y+8, r1	; 0x08
    2800:	19 86       	std	Y+9, r1	; 0x09
	u8 Local_u8Decimal = 0;
    2802:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_f64FloatNumber < 0)
    2804:	6b 85       	ldd	r22, Y+11	; 0x0b
    2806:	7c 85       	ldd	r23, Y+12	; 0x0c
    2808:	8d 85       	ldd	r24, Y+13	; 0x0d
    280a:	9e 85       	ldd	r25, Y+14	; 0x0e
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    2818:	88 23       	and	r24, r24
    281a:	64 f4       	brge	.+24     	; 0x2834 <LCD_enuWriteFloatNumber+0x72>
	{
		LCD_enuWriteData('-');
    281c:	8d e2       	ldi	r24, 0x2D	; 45
    281e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_enuWriteData>
		Copy_f64FloatNumber *= -1;
    2822:	8b 85       	ldd	r24, Y+11	; 0x0b
    2824:	9c 85       	ldd	r25, Y+12	; 0x0c
    2826:	ad 85       	ldd	r26, Y+13	; 0x0d
    2828:	be 85       	ldd	r27, Y+14	; 0x0e
    282a:	b0 58       	subi	r27, 0x80	; 128
    282c:	8b 87       	std	Y+11, r24	; 0x0b
    282e:	9c 87       	std	Y+12, r25	; 0x0c
    2830:	ad 87       	std	Y+13, r26	; 0x0d
    2832:	be 87       	std	Y+14, r27	; 0x0e
	}

	Local_u64IntegerNumber = Copy_f64FloatNumber;
    2834:	6b 85       	ldd	r22, Y+11	; 0x0b
    2836:	7c 85       	ldd	r23, Y+12	; 0x0c
    2838:	8d 85       	ldd	r24, Y+13	; 0x0d
    283a:	9e 85       	ldd	r25, Y+14	; 0x0e
    283c:	0e 94 6d 00 	call	0xda	; 0xda <__fixunssfdi>
    2840:	a2 2e       	mov	r10, r18
    2842:	b3 2e       	mov	r11, r19
    2844:	c4 2e       	mov	r12, r20
    2846:	d5 2e       	mov	r13, r21
    2848:	e6 2e       	mov	r14, r22
    284a:	f7 2e       	mov	r15, r23
    284c:	08 2f       	mov	r16, r24
    284e:	19 2f       	mov	r17, r25
    2850:	aa 82       	std	Y+2, r10	; 0x02
    2852:	bb 82       	std	Y+3, r11	; 0x03
    2854:	cc 82       	std	Y+4, r12	; 0x04
    2856:	dd 82       	std	Y+5, r13	; 0x05
    2858:	ee 82       	std	Y+6, r14	; 0x06
    285a:	ff 82       	std	Y+7, r15	; 0x07
    285c:	08 87       	std	Y+8, r16	; 0x08
    285e:	19 87       	std	Y+9, r17	; 0x09
	Local_u8Decimal = (Copy_f64FloatNumber - (f64)Local_u64IntegerNumber) * 100;
    2860:	2a 81       	ldd	r18, Y+2	; 0x02
    2862:	3b 81       	ldd	r19, Y+3	; 0x03
    2864:	4c 81       	ldd	r20, Y+4	; 0x04
    2866:	5d 81       	ldd	r21, Y+5	; 0x05
    2868:	6e 81       	ldd	r22, Y+6	; 0x06
    286a:	7f 81       	ldd	r23, Y+7	; 0x07
    286c:	88 85       	ldd	r24, Y+8	; 0x08
    286e:	99 85       	ldd	r25, Y+9	; 0x09
    2870:	0e 94 15 01 	call	0x22a	; 0x22a <__floatundisf>
    2874:	9b 01       	movw	r18, r22
    2876:	ac 01       	movw	r20, r24
    2878:	6b 85       	ldd	r22, Y+11	; 0x0b
    287a:	7c 85       	ldd	r23, Y+12	; 0x0c
    287c:	8d 85       	ldd	r24, Y+13	; 0x0d
    287e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2880:	0e 94 3d 03 	call	0x67a	; 0x67a <__subsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	48 ec       	ldi	r20, 0xC8	; 200
    2892:	52 e4       	ldi	r21, 0x42	; 66
    2894:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	89 83       	std	Y+1, r24	; 0x01

	LCD_enuWriteIntegerNumber(Local_u64IntegerNumber);
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	9b 81       	ldd	r25, Y+3	; 0x03
    28ae:	ac 81       	ldd	r26, Y+4	; 0x04
    28b0:	bd 81       	ldd	r27, Y+5	; 0x05
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_enuWriteIntegerNumber>
	LCD_enuWriteData('.');
    28ba:	8e e2       	ldi	r24, 0x2E	; 46
    28bc:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_enuWriteData>
	LCD_enuWriteIntegerNumber(Local_u8Decimal);
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	88 2f       	mov	r24, r24
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	a0 e0       	ldi	r26, 0x00	; 0
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_enuWriteIntegerNumber>

	return Local_enuErrorState;
    28d2:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    28d4:	2e 96       	adiw	r28, 0x0e	; 14
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	cd bf       	out	0x3d, r28	; 61
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	df 90       	pop	r13
    28ee:	cf 90       	pop	r12
    28f0:	bf 90       	pop	r11
    28f2:	af 90       	pop	r10
    28f4:	08 95       	ret

000028f6 <LCD_enuReturnHome>:

ES_t LCD_enuReturnHome()
{
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	0f 92       	push	r0
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	89 83       	std	Y+1, r24	; 0x01

	LCD_enuWriteCommand(0b00000010);
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_enuWriteCommand>

	return Local_enuErrorState;
    290a:	89 81       	ldd	r24, Y+1	; 0x01
}
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <LCD_enuGoToXYPosition>:

ES_t LCD_enuGoToXYPosition(u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	00 d0       	rcall	.+0      	; 0x291a <LCD_enuGoToXYPosition+0x6>
    291a:	00 d0       	rcall	.+0      	; 0x291c <LCD_enuGoToXYPosition+0x8>
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	8b 83       	std	Y+3, r24	; 0x03
    2922:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2924:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8DDRAMAddress;

	if( Copy_u8YPosition == 0 || Copy_u8YPosition == 1)
    2926:	8c 81       	ldd	r24, Y+4	; 0x04
    2928:	88 23       	and	r24, r24
    292a:	19 f0       	breq	.+6      	; 0x2932 <LCD_enuGoToXYPosition+0x1e>
    292c:	8c 81       	ldd	r24, Y+4	; 0x04
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	c9 f4       	brne	.+50     	; 0x2964 <LCD_enuGoToXYPosition+0x50>
	{

		Local_u8DDRAMAddress = Copy_u8XPosition + Copy_u8YPosition * 0x40 ;
    2932:	8c 81       	ldd	r24, Y+4	; 0x04
    2934:	88 2f       	mov	r24, r24
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	00 24       	eor	r0, r0
    293a:	96 95       	lsr	r25
    293c:	87 95       	ror	r24
    293e:	07 94       	ror	r0
    2940:	96 95       	lsr	r25
    2942:	87 95       	ror	r24
    2944:	07 94       	ror	r0
    2946:	98 2f       	mov	r25, r24
    2948:	80 2d       	mov	r24, r0
    294a:	98 2f       	mov	r25, r24
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	89 0f       	add	r24, r25
    2950:	89 83       	std	Y+1, r24	; 0x01
		Local_u8DDRAMAddress = Local_u8DDRAMAddress | (LCD_BIT_MASK << 7 );
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	80 68       	ori	r24, 0x80	; 128
    2956:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteCommand(Local_u8DDRAMAddress);
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_enuWriteCommand>


		Local_enuErrorState = ES_OK;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	8a 83       	std	Y+2, r24	; 0x02
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <LCD_enuGoToXYPosition+0x54>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
}
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <LCD_enuWriteSpecialCharacter>:

ES_t LCD_enuWriteSpecialCharacter(u8 Copy_Au8LetterArray[] ,u8 Copy_u8BlockNumber,u8 Copy_u8XPosition ,u8 Copy_u8YPosition)
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	28 97       	sbiw	r28, 0x08	; 8
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	9d 83       	std	Y+5, r25	; 0x05
    298e:	8c 83       	std	Y+4, r24	; 0x04
    2990:	6e 83       	std	Y+6, r22	; 0x06
    2992:	4f 83       	std	Y+7, r20	; 0x07
    2994:	28 87       	std	Y+8, r18	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    2996:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8CGRAMAddress;
	u8 Local_u8Iterator;

	/* Calculate the starting address in CGRAM */
	Local_u8CGRAMAddress = Copy_u8BlockNumber * LCD_u8BLOCKBYTES ;
    2998:	8e 81       	ldd	r24, Y+6	; 0x06
    299a:	88 2f       	mov	r24, r24
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	88 0f       	add	r24, r24
    29a8:	99 1f       	adc	r25, r25
    29aa:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8CGRAMAddress = Local_u8CGRAMAddress | (LCD_BIT_MASK << 6 );
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	80 64       	ori	r24, 0x40	; 64
    29b0:	8a 83       	std	Y+2, r24	; 0x02
	//Local_u8CGRAMAddress = Local_u8CGRAMAddress & (~(LCD_BIT_MASK << 7 ));

	/* Set CGRAM address command */
	LCD_enuWriteCommand(Local_u8CGRAMAddress);
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_enuWriteCommand>

	/* Draw the pattern inside CGRAM */
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
    29b8:	19 82       	std	Y+1, r1	; 0x01
    29ba:	0e c0       	rjmp	.+28     	; 0x29d8 <LCD_enuWriteSpecialCharacter+0x60>
	{
		LCD_enuWriteData(Copy_Au8LetterArray[Local_u8Iterator] );
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	8c 81       	ldd	r24, Y+4	; 0x04
    29c4:	9d 81       	ldd	r25, Y+5	; 0x05
    29c6:	fc 01       	movw	r30, r24
    29c8:	e2 0f       	add	r30, r18
    29ca:	f3 1f       	adc	r31, r19
    29cc:	80 81       	ld	r24, Z
    29ce:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_enuWriteData>

	/* Set CGRAM address command */
	LCD_enuWriteCommand(Local_u8CGRAMAddress);

	/* Draw the pattern inside CGRAM */
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	88 30       	cpi	r24, 0x08	; 8
    29dc:	78 f3       	brcs	.-34     	; 0x29bc <LCD_enuWriteSpecialCharacter+0x44>
	{
		LCD_enuWriteData(Copy_Au8LetterArray[Local_u8Iterator] );
	}

	/* Go back to DDRAM to display the pattern */
	LCD_enuGoToXYPosition(Copy_u8XPosition,Copy_u8YPosition);
    29de:	8f 81       	ldd	r24, Y+7	; 0x07
    29e0:	68 85       	ldd	r22, Y+8	; 0x08
    29e2:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_enuGoToXYPosition>

	/* Display the drawn pattern */
	LCD_enuWriteData(Copy_u8BlockNumber);
    29e6:	8e 81       	ldd	r24, Y+6	; 0x06
    29e8:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_enuWriteData>

	return Local_enuErrorState;
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
}
    29ee:	28 96       	adiw	r28, 0x08	; 8
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <LCD_enuDeleteCharacter>:

ES_t LCD_enuDeleteCharacter(u8 Copy_u8ShiftedNumber)
{
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <LCD_enuDeleteCharacter+0x6>
    2a06:	0f 92       	push	r0
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_OK;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8ShiftedNumber ; Local_u8Iterator ++)
    2a12:	19 82       	std	Y+1, r1	; 0x01
    2a14:	06 c0       	rjmp	.+12     	; 0x2a22 <LCD_enuDeleteCharacter+0x22>
	{
		LCD_enuWriteCommand(0x10);
    2a16:	80 e1       	ldi	r24, 0x10	; 16
    2a18:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_enuWriteCommand>

ES_t LCD_enuDeleteCharacter(u8 Copy_u8ShiftedNumber)
{
	ES_t Local_enuErrorState = ES_OK;

	for(u8 Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8ShiftedNumber ; Local_u8Iterator ++)
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	8f 5f       	subi	r24, 0xFF	; 255
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	99 81       	ldd	r25, Y+1	; 0x01
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	98 17       	cp	r25, r24
    2a28:	b0 f3       	brcs	.-20     	; 0x2a16 <LCD_enuDeleteCharacter+0x16>
	{
		LCD_enuWriteCommand(0x10);
	}
	LCD_enuWriteData(' ');
    2a2a:	80 e2       	ldi	r24, 0x20	; 32
    2a2c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_enuWriteData>
	LCD_enuWriteCommand(0x10);
    2a30:	80 e1       	ldi	r24, 0x10	; 16
    2a32:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_enuWriteCommand>

	return Local_enuErrorState;
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <TWI_voidInitMaster>:
#include "TWI_private.h"
#include "LCD_interface.h"


void TWI_voidInitMaster(u8 Copy_u8Address)  /* Set Master address to 0 if master will not be addressed */
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	0f 92       	push	r0
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	89 83       	std	Y+1, r24	; 0x01
	/* Set SCL frequency to 400 kbps with 16MHz system frequency */
	/* 1- set TWBR to 12  */
	TWBR=12;
    2a50:	e0 e2       	ldi	r30, 0x20	; 32
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	8c e0       	ldi	r24, 0x0C	; 12
    2a56:	80 83       	st	Z, r24

	/* 2- clear the prescaler bits(TWPS)*/
	CLR_BIT(TWSR,TWSR_TWPS0);
    2a58:	a1 e2       	ldi	r26, 0x21	; 33
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e1 e2       	ldi	r30, 0x21	; 33
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	8e 7f       	andi	r24, 0xFE	; 254
    2a64:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    2a66:	a1 e2       	ldi	r26, 0x21	; 33
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e1 e2       	ldi	r30, 0x21	; 33
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	8d 7f       	andi	r24, 0xFD	; 253
    2a72:	8c 93       	st	X, r24

	/* check if the master will not be addressed */
	if(Copy_u8Address != 0)
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	88 23       	and	r24, r24
    2a78:	29 f0       	breq	.+10     	; 0x2a84 <TWI_voidInitMaster+0x40>
	{
		TWAR = Copy_u8Address << 1;
    2a7a:	e2 e2       	ldi	r30, 0x22	; 34
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	88 0f       	add	r24, r24
    2a82:	80 83       	st	Z, r24
	{
		/* Do Nothing */
	}

	/* Enable Acknowledge bit */
	SET_BIT(TWCR,TWCR_TWEA);
    2a84:	a6 e5       	ldi	r26, 0x56	; 86
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e6 e5       	ldi	r30, 0x56	; 86
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	80 64       	ori	r24, 0x40	; 64
    2a90:	8c 93       	st	X, r24

	/* Enable TWI */
	SET_BIT(TWCR,TWCR_TWEN);
    2a92:	a6 e5       	ldi	r26, 0x56	; 86
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e6 e5       	ldi	r30, 0x56	; 86
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	84 60       	ori	r24, 0x04	; 4
    2a9e:	8c 93       	st	X, r24
}
    2aa0:	0f 90       	pop	r0
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	0f 92       	push	r0
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	89 83       	std	Y+1, r24	; 0x01
	/* Set Slave Address  */
	TWAR = Copy_u8Address << 1;
    2ab4:	e2 e2       	ldi	r30, 0x22	; 34
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	88 0f       	add	r24, r24
    2abc:	80 83       	st	Z, r24

	/* Enable Acknowledge bit */
	SET_BIT(TWCR,TWCR_TWEA);
    2abe:	a6 e5       	ldi	r26, 0x56	; 86
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e6 e5       	ldi	r30, 0x56	; 86
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	80 64       	ori	r24, 0x40	; 64
    2aca:	8c 93       	st	X, r24

	/* Enable TWI */
	SET_BIT(TWCR,TWCR_TWEN);
    2acc:	a6 e5       	ldi	r26, 0x56	; 86
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e6 e5       	ldi	r30, 0x56	; 86
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	84 60       	ori	r24, 0x04	; 4
    2ad8:	8c 93       	st	X, r24
}
    2ada:	0f 90       	pop	r0
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <TWI_enuSendStartCondition>:

ES_t TWI_enuSendStartCondition(void)
{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	0f 92       	push	r0
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	89 83       	std	Y+1, r24	; 0x01

	/* Set start condition bit */
	SET_BIT(TWCR,TWCR_TWSTA);
    2af0:	a6 e5       	ldi	r26, 0x56	; 86
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e6 e5       	ldi	r30, 0x56	; 86
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	80 62       	ori	r24, 0x20	; 32
    2afc:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    2afe:	a6 e5       	ldi	r26, 0x56	; 86
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e6 e5       	ldi	r30, 0x56	; 86
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	80 68       	ori	r24, 0x80	; 128
    2b0a:	8c 93       	st	X, r24



	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    2b0c:	e6 e5       	ldi	r30, 0x56	; 86
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	88 23       	and	r24, r24
    2b14:	dc f7       	brge	.-10     	; 0x2b0c <TWI_enuSendStartCondition+0x2a>

	LCD_enuWriteData('*');
    2b16:	8a e2       	ldi	r24, 0x2A	; 42
    2b18:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_enuWriteData>


	/* Check the operation status*/
	if( (TWSR & 0xF8) != START_ACK )
    2b1c:	e1 e2       	ldi	r30, 0x21	; 33
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	88 7f       	andi	r24, 0xF8	; 248
    2b28:	90 70       	andi	r25, 0x00	; 0
    2b2a:	88 30       	cpi	r24, 0x08	; 8
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	11 f0       	breq	.+4      	; 0x2b34 <TWI_enuSendStartCondition+0x52>
	{
		Local_enuErrorState = StartConditionError ;
    2b30:	84 e0       	ldi	r24, 0x04	; 4
    2b32:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Do Nothing */
	}


	return Local_enuErrorState;
    2b34:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b36:	0f 90       	pop	r0
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <TWI_enuSendRepeatedStart>:

ES_t TWI_enuSendRepeatedStart(void)
{
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	0f 92       	push	r0
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	89 83       	std	Y+1, r24	; 0x01

	/* Set start condition bit */
	SET_BIT(TWCR,TWCR_TWSTA);
    2b4c:	a6 e5       	ldi	r26, 0x56	; 86
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e6 e5       	ldi	r30, 0x56	; 86
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	80 62       	ori	r24, 0x20	; 32
    2b58:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    2b5a:	a6 e5       	ldi	r26, 0x56	; 86
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	e6 e5       	ldi	r30, 0x56	; 86
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	80 68       	ori	r24, 0x80	; 128
    2b66:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    2b68:	e6 e5       	ldi	r30, 0x56	; 86
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	88 23       	and	r24, r24
    2b70:	dc f7       	brge	.-10     	; 0x2b68 <TWI_enuSendRepeatedStart+0x2a>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != REP_START_ACK )
    2b72:	e1 e2       	ldi	r30, 0x21	; 33
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	88 2f       	mov	r24, r24
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	88 7f       	andi	r24, 0xF8	; 248
    2b7e:	90 70       	andi	r25, 0x00	; 0
    2b80:	80 31       	cpi	r24, 0x10	; 16
    2b82:	91 05       	cpc	r25, r1
    2b84:	11 f0       	breq	.+4      	; 0x2b8a <TWI_enuSendRepeatedStart+0x4c>
	{
		Local_enuErrorState = RepeatedStartError ;
    2b86:	85 e0       	ldi	r24, 0x05	; 5
    2b88:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_enuErrorState;
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b8c:	0f 90       	pop	r0
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <TWI_enuSendSlaveAddressWithWrite>:

ES_t TWI_enuSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <TWI_enuSendSlaveAddressWithWrite+0x6>
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	89 83       	std	Y+1, r24	; 0x01

	/* Send the 7bit Slave address on the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    2ba4:	e3 e2       	ldi	r30, 0x23	; 35
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	88 0f       	add	r24, r24
    2bac:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
    2bae:	a3 e2       	ldi	r26, 0x23	; 35
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	e3 e2       	ldi	r30, 0x23	; 35
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	8e 7f       	andi	r24, 0xFE	; 254
    2bba:	8c 93       	st	X, r24

	/*Clear the start condition bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
    2bbc:	a6 e5       	ldi	r26, 0x56	; 86
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e6 e5       	ldi	r30, 0x56	; 86
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	8f 7d       	andi	r24, 0xDF	; 223
    2bc8:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    2bca:	a6 e5       	ldi	r26, 0x56	; 86
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e6 e5       	ldi	r30, 0x56	; 86
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	80 68       	ori	r24, 0x80	; 128
    2bd6:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    2bd8:	e6 e5       	ldi	r30, 0x56	; 86
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	88 23       	and	r24, r24
    2be0:	dc f7       	brge	.-10     	; 0x2bd8 <TWI_enuSendSlaveAddressWithWrite+0x44>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
    2be2:	e1 e2       	ldi	r30, 0x21	; 33
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	88 2f       	mov	r24, r24
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	88 7f       	andi	r24, 0xF8	; 248
    2bee:	90 70       	andi	r25, 0x00	; 0
    2bf0:	88 31       	cpi	r24, 0x18	; 24
    2bf2:	91 05       	cpc	r25, r1
    2bf4:	11 f0       	breq	.+4      	; 0x2bfa <TWI_enuSendSlaveAddressWithWrite+0x66>
	{
		Local_enuErrorState = SlaveAddressWithWriteError ;
    2bf6:	86 e0       	ldi	r24, 0x06	; 6
    2bf8:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_enuErrorState;
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <TWI_enuSendSlaveAddressWithRead>:

ES_t TWI_enuSendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <TWI_enuSendSlaveAddressWithRead+0x6>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	89 83       	std	Y+1, r24	; 0x01

	/* Send the 7bit Slave address on the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    2c16:	e3 e2       	ldi	r30, 0x23	; 35
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	88 0f       	add	r24, r24
    2c1e:	80 83       	st	Z, r24

	/* Set bit0 for reading */
	SET_BIT(TWDR,0);
    2c20:	a3 e2       	ldi	r26, 0x23	; 35
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e3 e2       	ldi	r30, 0x23	; 35
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	81 60       	ori	r24, 0x01	; 1
    2c2c:	8c 93       	st	X, r24

	/*Clear the start condition bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
    2c2e:	a6 e5       	ldi	r26, 0x56	; 86
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e6 e5       	ldi	r30, 0x56	; 86
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	8f 7d       	andi	r24, 0xDF	; 223
    2c3a:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    2c3c:	a6 e5       	ldi	r26, 0x56	; 86
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e6 e5       	ldi	r30, 0x56	; 86
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	80 68       	ori	r24, 0x80	; 128
    2c48:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    2c4a:	e6 e5       	ldi	r30, 0x56	; 86
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	88 23       	and	r24, r24
    2c52:	dc f7       	brge	.-10     	; 0x2c4a <TWI_enuSendSlaveAddressWithRead+0x44>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
    2c54:	e1 e2       	ldi	r30, 0x21	; 33
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	88 2f       	mov	r24, r24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	88 7f       	andi	r24, 0xF8	; 248
    2c60:	90 70       	andi	r25, 0x00	; 0
    2c62:	80 34       	cpi	r24, 0x40	; 64
    2c64:	91 05       	cpc	r25, r1
    2c66:	11 f0       	breq	.+4      	; 0x2c6c <TWI_enuSendSlaveAddressWithRead+0x66>
	{
		Local_enuErrorState = SlaveAddressWithReadError ;
    2c68:	87 e0       	ldi	r24, 0x07	; 7
    2c6a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_enuErrorState;
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <TWI_enuMasterWriteDataByte>:

ES_t TWI_enuMasterWriteDataByte(u8 Copy_u8DataByte)
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <TWI_enuMasterWriteDataByte+0x6>
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	89 83       	std	Y+1, r24	; 0x01

	/* Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    2c88:	e3 e2       	ldi	r30, 0x23	; 35
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	80 83       	st	Z, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    2c90:	a6 e5       	ldi	r26, 0x56	; 86
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e6 e5       	ldi	r30, 0x56	; 86
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 68       	ori	r24, 0x80	; 128
    2c9c:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    2c9e:	e6 e5       	ldi	r30, 0x56	; 86
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	88 23       	and	r24, r24
    2ca6:	dc f7       	brge	.-10     	; 0x2c9e <TWI_enuMasterWriteDataByte+0x26>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != MSTR_WR_BYTE_ACK )
    2ca8:	e1 e2       	ldi	r30, 0x21	; 33
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	88 2f       	mov	r24, r24
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	88 7f       	andi	r24, 0xF8	; 248
    2cb4:	90 70       	andi	r25, 0x00	; 0
    2cb6:	88 32       	cpi	r24, 0x28	; 40
    2cb8:	91 05       	cpc	r25, r1
    2cba:	11 f0       	breq	.+4      	; 0x2cc0 <TWI_enuMasterWriteDataByte+0x48>
	{
		Local_enuErrorState = MasterWriteByteError ;
    2cbc:	88 e0       	ldi	r24, 0x08	; 8
    2cbe:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Do Nothing */
	}


	return Local_enuErrorState;
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <TWI_enuMasterReadDataByte>:

ES_t TWI_enuMasterReadDataByte(u8* Copy_u8DataByte)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <TWI_enuMasterReadDataByte+0x6>
    2cd2:	0f 92       	push	r0
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	9b 83       	std	Y+3, r25	; 0x03
    2cda:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	89 83       	std	Y+1, r24	; 0x01

	/* Clear the interrupt flag to allow the slave to send the data */
	SET_BIT(TWCR,TWCR_TWINT);
    2ce0:	a6 e5       	ldi	r26, 0x56	; 86
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e6 e5       	ldi	r30, 0x56	; 86
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	80 68       	ori	r24, 0x80	; 128
    2cec:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    2cee:	e6 e5       	ldi	r30, 0x56	; 86
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	88 23       	and	r24, r24
    2cf6:	dc f7       	brge	.-10     	; 0x2cee <TWI_enuMasterReadDataByte+0x22>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK )
    2cf8:	e1 e2       	ldi	r30, 0x21	; 33
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	88 2f       	mov	r24, r24
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	88 7f       	andi	r24, 0xF8	; 248
    2d04:	90 70       	andi	r25, 0x00	; 0
    2d06:	80 35       	cpi	r24, 0x50	; 80
    2d08:	91 05       	cpc	r25, r1
    2d0a:	19 f0       	breq	.+6      	; 0x2d12 <TWI_enuMasterReadDataByte+0x46>
	{
		Local_enuErrorState = MasterReadByteError ;
    2d0c:	89 e0       	ldi	r24, 0x09	; 9
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	06 c0       	rjmp	.+12     	; 0x2d1e <TWI_enuMasterReadDataByte+0x52>
	}
	else
	{
		/* Read the received data*/
		*Copy_u8DataByte = TWDR;
    2d12:	e3 e2       	ldi	r30, 0x23	; 35
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	ea 81       	ldd	r30, Y+2	; 0x02
    2d1a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d1c:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
	/* Send Stop condition on the bus */
	SET_BIT(TWCR,TWCR_TWSTO);
    2d34:	a6 e5       	ldi	r26, 0x56	; 86
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e6 e5       	ldi	r30, 0x56	; 86
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	80 61       	ori	r24, 0x10	; 16
    2d40:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    2d42:	a6 e5       	ldi	r26, 0x56	; 86
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e6 e5       	ldi	r30, 0x56	; 86
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	80 68       	ori	r24, 0x80	; 128
    2d4e:	8c 93       	st	X, r24
}
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <Timer1_enuWave_FastPWM>:
#include "Timer1_interface.h"
#include "Timer1_configuration.h"
#include "Timer1_private.h"

ES_t Timer1_enuWave_FastPWM(f32 Copy_f32ComparedValue)
{
    2d56:	0f 93       	push	r16
    2d58:	1f 93       	push	r17
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <Timer1_enuWave_FastPWM+0xa>
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <Timer1_enuWave_FastPWM+0xc>
    2d62:	0f 92       	push	r0
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	6a 83       	std	Y+2, r22	; 0x02
    2d6a:	7b 83       	std	Y+3, r23	; 0x03
    2d6c:	8c 83       	std	Y+4, r24	; 0x04
    2d6e:	9d 83       	std	Y+5, r25	; 0x05
	ES_t Local_enuErrorState = ES_OK;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	89 83       	std	Y+1, r24	; 0x01

	/*Set OC1A as output*/
	DIO_enuSetPinDirection(DIO_GROUP_D,DIO_PIN_5,DIO_OUTPUT);
    2d74:	83 e0       	ldi	r24, 0x03	; 3
    2d76:	65 e0       	ldi	r22, 0x05	; 5
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <DIO_enuSetPinDirection>

	/*Select Fast PWM Mode , Set on Compare Clear on Top*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2d7e:	af e4       	ldi	r26, 0x4F	; 79
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	ef e4       	ldi	r30, 0x4F	; 79
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	80 68       	ori	r24, 0x80	; 128
    2d8a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2d8c:	af e4       	ldi	r26, 0x4F	; 79
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	ef e4       	ldi	r30, 0x4F	; 79
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	8f 7b       	andi	r24, 0xBF	; 191
    2d98:	8c 93       	st	X, r24

	/*Set Prescaler = 64 */
	SET_BIT(TCCR1B,TCCR1B_CS10);
    2d9a:	ae e4       	ldi	r26, 0x4E	; 78
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	ee e4       	ldi	r30, 0x4E	; 78
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	81 60       	ori	r24, 0x01	; 1
    2da6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    2da8:	ae e4       	ldi	r26, 0x4E	; 78
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	ee e4       	ldi	r30, 0x4E	; 78
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	82 60       	ori	r24, 0x02	; 2
    2db4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    2db6:	ae e4       	ldi	r26, 0x4E	; 78
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	ee e4       	ldi	r30, 0x4E	; 78
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8b 7f       	andi	r24, 0xFB	; 251
    2dc2:	8c 93       	st	X, r24

	/*Select Fast PWM mode Top in ICR1*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2dc4:	af e4       	ldi	r26, 0x4F	; 79
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	ef e4       	ldi	r30, 0x4F	; 79
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	8e 7f       	andi	r24, 0xFE	; 254
    2dd0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    2dd2:	af e4       	ldi	r26, 0x4F	; 79
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	ef e4       	ldi	r30, 0x4F	; 79
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	82 60       	ori	r24, 0x02	; 2
    2dde:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    2de0:	ae e4       	ldi	r26, 0x4E	; 78
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	ee e4       	ldi	r30, 0x4E	; 78
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	88 60       	ori	r24, 0x08	; 8
    2dec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    2dee:	ae e4       	ldi	r26, 0x4E	; 78
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	ee e4       	ldi	r30, 0x4E	; 78
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	80 61       	ori	r24, 0x10	; 16
    2dfa:	8c 93       	st	X, r24

	/*Set Top in ICR1*/
	ICR1 = 4999;
    2dfc:	e6 e4       	ldi	r30, 0x46	; 70
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	87 e8       	ldi	r24, 0x87	; 135
    2e02:	93 e1       	ldi	r25, 0x13	; 19
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24

	/*Set Compare Value*/
	OCR1A = Copy_f32ComparedValue * 250;
    2e08:	0a e4       	ldi	r16, 0x4A	; 74
    2e0a:	10 e0       	ldi	r17, 0x00	; 0
    2e0c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e0e:	7b 81       	ldd	r23, Y+3	; 0x03
    2e10:	8c 81       	ldd	r24, Y+4	; 0x04
    2e12:	9d 81       	ldd	r25, Y+5	; 0x05
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	4a e7       	ldi	r20, 0x7A	; 122
    2e1a:	53 e4       	ldi	r21, 0x43	; 67
    2e1c:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	f8 01       	movw	r30, r16
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24

	return Local_enuErrorState;
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	08 95       	ret

00002e4c <UART_enuInit>:
#include "UART_private.h"
#include "UART_register.h"
#include "UART_interface.h"

ES_t UART_enuInit(void)
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	00 d0       	rcall	.+0      	; 0x2e52 <UART_enuInit+0x6>
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCVal=0;
    2e5a:	19 82       	std	Y+1, r1	; 0x01

	/* Set bit 7 for UCSRC*/
	SET_BIT(Local_u8UCSRCVal,UCSRC_URSEL);
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	80 68       	ori	r24, 0x80	; 128
    2e60:	89 83       	std	Y+1, r24	; 0x01

	/* Set Character Size = 8-bit */
	SET_BIT(Local_u8UCSRCVal,UCSRC_UCSZ0);
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	82 60       	ori	r24, 0x02	; 2
    2e66:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCVal,UCSRC_UCSZ1);
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	84 60       	ori	r24, 0x04	; 4
    2e6c:	89 83       	std	Y+1, r24	; 0x01

	/* Send val to register */
	UCSRC = Local_u8UCSRCVal;
    2e6e:	e0 e4       	ldi	r30, 0x40	; 64
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	80 83       	st	Z, r24

	/*Baud Rate (bps) = 9600 */
	UBRRL = 103;
    2e76:	e9 e2       	ldi	r30, 0x29	; 41
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	87 e6       	ldi	r24, 0x67	; 103
    2e7c:	80 83       	st	Z, r24

	/* Enable Receive */
	SET_BIT(UCSRB,UCSRB_RXEN);
    2e7e:	aa e2       	ldi	r26, 0x2A	; 42
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	ea e2       	ldi	r30, 0x2A	; 42
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	80 61       	ori	r24, 0x10	; 16
    2e8a:	8c 93       	st	X, r24

	/* Enable Transmitter */
	SET_BIT(UCSRB,UCSRB_TXEN);
    2e8c:	aa e2       	ldi	r26, 0x2A	; 42
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	ea e2       	ldi	r30, 0x2A	; 42
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	88 60       	ori	r24, 0x08	; 8
    2e98:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <UART_enuReceiveData>:

ES_t UART_enuReceiveData(u8* Copy_u8ReceivedData)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <UART_enuReceiveData+0x6>
    2eac:	0f 92       	push	r0
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	9b 83       	std	Y+3, r25	; 0x03
    2eb4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	89 83       	std	Y+1, r24	; 0x01

	while( (GET_BIT(UCSRA,UCSRA_RXC)) ==0 );//wait until receive data
    2eba:	ab e2       	ldi	r26, 0x2B	; 43
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	eb e2       	ldi	r30, 0x2B	; 43
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	88 1f       	adc	r24, r24
    2ec6:	88 27       	eor	r24, r24
    2ec8:	88 1f       	adc	r24, r24
    2eca:	8c 93       	st	X, r24
    2ecc:	8c 91       	ld	r24, X
    2ece:	88 23       	and	r24, r24
    2ed0:	a1 f3       	breq	.-24     	; 0x2eba <UART_enuReceiveData+0x14>

	*Copy_u8ReceivedData = UDR;
    2ed2:	ec e2       	ldi	r30, 0x2C	; 44
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	ea 81       	ldd	r30, Y+2	; 0x02
    2eda:	fb 81       	ldd	r31, Y+3	; 0x03
    2edc:	80 83       	st	Z, r24

	return Local_enuErrorState;
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <UART_enuSendData>:

ES_t UART_enuSendData(u8 Copy_u8Data)
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <UART_enuSendData+0x6>
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	89 83       	std	Y+1, r24	; 0x01

	while((GET_BIT(UCSRA,UCSRA_UDRE)) ==0); // wait until UDR is empty
    2efc:	ab e2       	ldi	r26, 0x2B	; 43
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	eb e2       	ldi	r30, 0x2B	; 43
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	82 95       	swap	r24
    2f08:	86 95       	lsr	r24
    2f0a:	87 70       	andi	r24, 0x07	; 7
    2f0c:	81 70       	andi	r24, 0x01	; 1
    2f0e:	8c 93       	st	X, r24
    2f10:	8c 91       	ld	r24, X
    2f12:	88 23       	and	r24, r24
    2f14:	99 f3       	breq	.-26     	; 0x2efc <UART_enuSendData+0x10>

	UDR = Copy_u8Data;
    2f16:	ec e2       	ldi	r30, 0x2C	; 44
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	80 83       	st	Z, r24

	return Local_enuErrorState;
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <main>:
#include "Timer1_interface.h"



int main()
{
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	0f 92       	push	r0
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ReceivedData = 0 ;
    2f34:	19 82       	std	Y+1, r1	; 0x01

	//HEXA_enuInit();
	LCD_enuInit();
    2f36:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_enuInit>
	TWI_voidInitMaster(0);
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <TWI_voidInitMaster>

	EEPROM_voidWriteDataByte(43,1);
    2f40:	8b e2       	ldi	r24, 0x2B	; 43
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	61 e0       	ldi	r22, 0x01	; 1
    2f46:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <EEPROM_voidWriteDataByte>
	EEPROM_voidWriteDataByte(44,2);
    2f4a:	8c e2       	ldi	r24, 0x2C	; 44
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	62 e0       	ldi	r22, 0x02	; 2
    2f50:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <EEPROM_voidWriteDataByte>
	EEPROM_voidWriteDataByte(45,6);
    2f54:	8d e2       	ldi	r24, 0x2D	; 45
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	66 e0       	ldi	r22, 0x06	; 6
    2f5a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <EEPROM_voidWriteDataByte>
	EEPROM_voidWriteDataByte(46,4);
    2f5e:	8e e2       	ldi	r24, 0x2E	; 46
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	64 e0       	ldi	r22, 0x04	; 4
    2f64:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <EEPROM_voidWriteDataByte>



	Local_u8ReceivedData = EEPROM_u8ReadDataByte(45);
    2f68:	8d e2       	ldi	r24, 0x2D	; 45
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <EEPROM_u8ReadDataByte>
    2f70:	89 83       	std	Y+1, r24	; 0x01


	LCD_enuWriteIntegerNumber(Local_u8ReceivedData);
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	88 2f       	mov	r24, r24
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	a0 e0       	ldi	r26, 0x00	; 0
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_enuWriteIntegerNumber>


	Local_u8ReceivedData = EEPROM_u8ReadDataByte(46);
    2f84:	8e e2       	ldi	r24, 0x2E	; 46
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <EEPROM_u8ReadDataByte>
    2f8c:	89 83       	std	Y+1, r24	; 0x01


	LCD_enuWriteIntegerNumber(Local_u8ReceivedData);
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	a0 e0       	ldi	r26, 0x00	; 0
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	bc 01       	movw	r22, r24
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_enuWriteIntegerNumber>
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	90 e0       	ldi	r25, 0x00	; 0

}
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <__mulsi3>:
    2fac:	62 9f       	mul	r22, r18
    2fae:	d0 01       	movw	r26, r0
    2fb0:	73 9f       	mul	r23, r19
    2fb2:	f0 01       	movw	r30, r0
    2fb4:	82 9f       	mul	r24, r18
    2fb6:	e0 0d       	add	r30, r0
    2fb8:	f1 1d       	adc	r31, r1
    2fba:	64 9f       	mul	r22, r20
    2fbc:	e0 0d       	add	r30, r0
    2fbe:	f1 1d       	adc	r31, r1
    2fc0:	92 9f       	mul	r25, r18
    2fc2:	f0 0d       	add	r31, r0
    2fc4:	83 9f       	mul	r24, r19
    2fc6:	f0 0d       	add	r31, r0
    2fc8:	74 9f       	mul	r23, r20
    2fca:	f0 0d       	add	r31, r0
    2fcc:	65 9f       	mul	r22, r21
    2fce:	f0 0d       	add	r31, r0
    2fd0:	99 27       	eor	r25, r25
    2fd2:	72 9f       	mul	r23, r18
    2fd4:	b0 0d       	add	r27, r0
    2fd6:	e1 1d       	adc	r30, r1
    2fd8:	f9 1f       	adc	r31, r25
    2fda:	63 9f       	mul	r22, r19
    2fdc:	b0 0d       	add	r27, r0
    2fde:	e1 1d       	adc	r30, r1
    2fe0:	f9 1f       	adc	r31, r25
    2fe2:	bd 01       	movw	r22, r26
    2fe4:	cf 01       	movw	r24, r30
    2fe6:	11 24       	eor	r1, r1
    2fe8:	08 95       	ret

00002fea <__udivmodsi4>:
    2fea:	a1 e2       	ldi	r26, 0x21	; 33
    2fec:	1a 2e       	mov	r1, r26
    2fee:	aa 1b       	sub	r26, r26
    2ff0:	bb 1b       	sub	r27, r27
    2ff2:	fd 01       	movw	r30, r26
    2ff4:	0d c0       	rjmp	.+26     	; 0x3010 <__udivmodsi4_ep>

00002ff6 <__udivmodsi4_loop>:
    2ff6:	aa 1f       	adc	r26, r26
    2ff8:	bb 1f       	adc	r27, r27
    2ffa:	ee 1f       	adc	r30, r30
    2ffc:	ff 1f       	adc	r31, r31
    2ffe:	a2 17       	cp	r26, r18
    3000:	b3 07       	cpc	r27, r19
    3002:	e4 07       	cpc	r30, r20
    3004:	f5 07       	cpc	r31, r21
    3006:	20 f0       	brcs	.+8      	; 0x3010 <__udivmodsi4_ep>
    3008:	a2 1b       	sub	r26, r18
    300a:	b3 0b       	sbc	r27, r19
    300c:	e4 0b       	sbc	r30, r20
    300e:	f5 0b       	sbc	r31, r21

00003010 <__udivmodsi4_ep>:
    3010:	66 1f       	adc	r22, r22
    3012:	77 1f       	adc	r23, r23
    3014:	88 1f       	adc	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	1a 94       	dec	r1
    301a:	69 f7       	brne	.-38     	; 0x2ff6 <__udivmodsi4_loop>
    301c:	60 95       	com	r22
    301e:	70 95       	com	r23
    3020:	80 95       	com	r24
    3022:	90 95       	com	r25
    3024:	9b 01       	movw	r18, r22
    3026:	ac 01       	movw	r20, r24
    3028:	bd 01       	movw	r22, r26
    302a:	cf 01       	movw	r24, r30
    302c:	08 95       	ret

0000302e <__divmodsi4>:
    302e:	97 fb       	bst	r25, 7
    3030:	09 2e       	mov	r0, r25
    3032:	05 26       	eor	r0, r21
    3034:	0e d0       	rcall	.+28     	; 0x3052 <__divmodsi4_neg1>
    3036:	57 fd       	sbrc	r21, 7
    3038:	04 d0       	rcall	.+8      	; 0x3042 <__divmodsi4_neg2>
    303a:	d7 df       	rcall	.-82     	; 0x2fea <__udivmodsi4>
    303c:	0a d0       	rcall	.+20     	; 0x3052 <__divmodsi4_neg1>
    303e:	00 1c       	adc	r0, r0
    3040:	38 f4       	brcc	.+14     	; 0x3050 <__divmodsi4_exit>

00003042 <__divmodsi4_neg2>:
    3042:	50 95       	com	r21
    3044:	40 95       	com	r20
    3046:	30 95       	com	r19
    3048:	21 95       	neg	r18
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
    304c:	4f 4f       	sbci	r20, 0xFF	; 255
    304e:	5f 4f       	sbci	r21, 0xFF	; 255

00003050 <__divmodsi4_exit>:
    3050:	08 95       	ret

00003052 <__divmodsi4_neg1>:
    3052:	f6 f7       	brtc	.-4      	; 0x3050 <__divmodsi4_exit>
    3054:	90 95       	com	r25
    3056:	80 95       	com	r24
    3058:	70 95       	com	r23
    305a:	61 95       	neg	r22
    305c:	7f 4f       	sbci	r23, 0xFF	; 255
    305e:	8f 4f       	sbci	r24, 0xFF	; 255
    3060:	9f 4f       	sbci	r25, 0xFF	; 255
    3062:	08 95       	ret

00003064 <__prologue_saves__>:
    3064:	2f 92       	push	r2
    3066:	3f 92       	push	r3
    3068:	4f 92       	push	r4
    306a:	5f 92       	push	r5
    306c:	6f 92       	push	r6
    306e:	7f 92       	push	r7
    3070:	8f 92       	push	r8
    3072:	9f 92       	push	r9
    3074:	af 92       	push	r10
    3076:	bf 92       	push	r11
    3078:	cf 92       	push	r12
    307a:	df 92       	push	r13
    307c:	ef 92       	push	r14
    307e:	ff 92       	push	r15
    3080:	0f 93       	push	r16
    3082:	1f 93       	push	r17
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	ca 1b       	sub	r28, r26
    308e:	db 0b       	sbc	r29, r27
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	09 94       	ijmp

0000309c <__epilogue_restores__>:
    309c:	2a 88       	ldd	r2, Y+18	; 0x12
    309e:	39 88       	ldd	r3, Y+17	; 0x11
    30a0:	48 88       	ldd	r4, Y+16	; 0x10
    30a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    30a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    30a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    30a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    30aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    30ae:	b9 84       	ldd	r11, Y+9	; 0x09
    30b0:	c8 84       	ldd	r12, Y+8	; 0x08
    30b2:	df 80       	ldd	r13, Y+7	; 0x07
    30b4:	ee 80       	ldd	r14, Y+6	; 0x06
    30b6:	fd 80       	ldd	r15, Y+5	; 0x05
    30b8:	0c 81       	ldd	r16, Y+4	; 0x04
    30ba:	1b 81       	ldd	r17, Y+3	; 0x03
    30bc:	aa 81       	ldd	r26, Y+2	; 0x02
    30be:	b9 81       	ldd	r27, Y+1	; 0x01
    30c0:	ce 0f       	add	r28, r30
    30c2:	d1 1d       	adc	r29, r1
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	ed 01       	movw	r28, r26
    30d0:	08 95       	ret

000030d2 <_exit>:
    30d2:	f8 94       	cli

000030d4 <__stop_program>:
    30d4:	ff cf       	rjmp	.-2      	; 0x30d4 <__stop_program>
