
Watch_Dog_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000834  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000960  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000055f  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 cc 03 	call	0x798	; 0x798 <main>
  64:	0c 94 18 04 	jmp	0x830	; 0x830 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enuSetPinDirection>:
#include "errorState.h"
#include "stdTypes.h"


ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID,u8 Copy_u8PinID,u8 Copy_u8PinDirection)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_enuSetPinDirection+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_enuSetPinDirection+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <DIO_enuSetPinDirection+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8a 83       	std	Y+2, r24	; 0x02
  7c:	6b 83       	std	Y+3, r22	; 0x03
  7e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
  80:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN_7 && Copy_u8PinDirection <= DIO_u8OUTPUT)
  82:	8a 81       	ldd	r24, Y+2	; 0x02
  84:	84 30       	cpi	r24, 0x04	; 4
  86:	08 f0       	brcs	.+2      	; 0x8a <DIO_enuSetPinDirection+0x1e>
  88:	d1 c0       	rjmp	.+418    	; 0x22c <DIO_enuSetPinDirection+0x1c0>
  8a:	8b 81       	ldd	r24, Y+3	; 0x03
  8c:	88 30       	cpi	r24, 0x08	; 8
  8e:	08 f0       	brcs	.+2      	; 0x92 <DIO_enuSetPinDirection+0x26>
  90:	cd c0       	rjmp	.+410    	; 0x22c <DIO_enuSetPinDirection+0x1c0>
  92:	8c 81       	ldd	r24, Y+4	; 0x04
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	08 f0       	brcs	.+2      	; 0x9a <DIO_enuSetPinDirection+0x2e>
  98:	c9 c0       	rjmp	.+402    	; 0x22c <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8GroupID)
  9a:	8a 81       	ldd	r24, Y+2	; 0x02
  9c:	28 2f       	mov	r18, r24
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	3e 83       	std	Y+6, r19	; 0x06
  a2:	2d 83       	std	Y+5, r18	; 0x05
  a4:	6d 81       	ldd	r22, Y+5	; 0x05
  a6:	7e 81       	ldd	r23, Y+6	; 0x06
  a8:	61 30       	cpi	r22, 0x01	; 1
  aa:	71 05       	cpc	r23, r1
  ac:	09 f4       	brne	.+2      	; 0xb0 <DIO_enuSetPinDirection+0x44>
  ae:	41 c0       	rjmp	.+130    	; 0x132 <DIO_enuSetPinDirection+0xc6>
  b0:	8d 81       	ldd	r24, Y+5	; 0x05
  b2:	9e 81       	ldd	r25, Y+6	; 0x06
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	34 f4       	brge	.+12     	; 0xc6 <DIO_enuSetPinDirection+0x5a>
  ba:	2d 81       	ldd	r18, Y+5	; 0x05
  bc:	3e 81       	ldd	r19, Y+6	; 0x06
  be:	21 15       	cp	r18, r1
  c0:	31 05       	cpc	r19, r1
  c2:	71 f0       	breq	.+28     	; 0xe0 <DIO_enuSetPinDirection+0x74>
  c4:	b0 c0       	rjmp	.+352    	; 0x226 <DIO_enuSetPinDirection+0x1ba>
  c6:	6d 81       	ldd	r22, Y+5	; 0x05
  c8:	7e 81       	ldd	r23, Y+6	; 0x06
  ca:	62 30       	cpi	r22, 0x02	; 2
  cc:	71 05       	cpc	r23, r1
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_enuSetPinDirection+0x66>
  d0:	59 c0       	rjmp	.+178    	; 0x184 <DIO_enuSetPinDirection+0x118>
  d2:	8d 81       	ldd	r24, Y+5	; 0x05
  d4:	9e 81       	ldd	r25, Y+6	; 0x06
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	91 05       	cpc	r25, r1
  da:	09 f4       	brne	.+2      	; 0xde <DIO_enuSetPinDirection+0x72>
  dc:	7c c0       	rjmp	.+248    	; 0x1d6 <DIO_enuSetPinDirection+0x16a>
  de:	a3 c0       	rjmp	.+326    	; 0x226 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A :
			DDRA &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
  e0:	aa e3       	ldi	r26, 0x3A	; 58
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	ea e3       	ldi	r30, 0x3A	; 58
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	48 2f       	mov	r20, r24
  ec:	8b 81       	ldd	r24, Y+3	; 0x03
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_enuSetPinDirection+0x90>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	2a 95       	dec	r18
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_enuSetPinDirection+0x8c>
 100:	80 95       	com	r24
 102:	84 23       	and	r24, r20
 104:	8c 93       	st	X, r24
			DDRA |= Copy_u8PinDirection << Copy_u8PinID ;
 106:	aa e3       	ldi	r26, 0x3A	; 58
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	ea e3       	ldi	r30, 0x3A	; 58
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	48 2f       	mov	r20, r24
 112:	8c 81       	ldd	r24, Y+4	; 0x04
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	8b 81       	ldd	r24, Y+3	; 0x03
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	b9 01       	movw	r22, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_enuSetPinDirection+0xba>
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	8a 95       	dec	r24
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_enuSetPinDirection+0xb6>
 12a:	cb 01       	movw	r24, r22
 12c:	84 2b       	or	r24, r20
 12e:	8c 93       	st	X, r24
 130:	7a c0       	rjmp	.+244    	; 0x226 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
 132:	a7 e3       	ldi	r26, 0x37	; 55
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e7 e3       	ldi	r30, 0x37	; 55
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	48 2f       	mov	r20, r24
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	28 2f       	mov	r18, r24
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_enuSetPinDirection+0xe2>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	2a 95       	dec	r18
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_enuSetPinDirection+0xde>
 152:	80 95       	com	r24
 154:	84 23       	and	r24, r20
 156:	8c 93       	st	X, r24
			DDRB |= Copy_u8PinDirection << Copy_u8PinID ;
 158:	a7 e3       	ldi	r26, 0x37	; 55
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e7 e3       	ldi	r30, 0x37	; 55
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	48 2f       	mov	r20, r24
 164:	8c 81       	ldd	r24, Y+4	; 0x04
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_enuSetPinDirection+0x10c>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_enuSetPinDirection+0x108>
 17c:	cb 01       	movw	r24, r22
 17e:	84 2b       	or	r24, r20
 180:	8c 93       	st	X, r24
 182:	51 c0       	rjmp	.+162    	; 0x226 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
 184:	a4 e3       	ldi	r26, 0x34	; 52
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	e4 e3       	ldi	r30, 0x34	; 52
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	48 2f       	mov	r20, r24
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_enuSetPinDirection+0x134>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	2a 95       	dec	r18
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_enuSetPinDirection+0x130>
 1a4:	80 95       	com	r24
 1a6:	84 23       	and	r24, r20
 1a8:	8c 93       	st	X, r24
			DDRC |= Copy_u8PinDirection << Copy_u8PinID ;
 1aa:	a4 e3       	ldi	r26, 0x34	; 52
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e4 e3       	ldi	r30, 0x34	; 52
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	8b 81       	ldd	r24, Y+3	; 0x03
 1be:	88 2f       	mov	r24, r24
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	b9 01       	movw	r22, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_enuSetPinDirection+0x15e>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	8a 95       	dec	r24
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_enuSetPinDirection+0x15a>
 1ce:	cb 01       	movw	r24, r22
 1d0:	84 2b       	or	r24, r20
 1d2:	8c 93       	st	X, r24
 1d4:	28 c0       	rjmp	.+80     	; 0x226 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
 1d6:	a1 e3       	ldi	r26, 0x31	; 49
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e1 e3       	ldi	r30, 0x31	; 49
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_enuSetPinDirection+0x186>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_enuSetPinDirection+0x182>
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8c 93       	st	X, r24
			DDRD |= Copy_u8PinDirection << Copy_u8PinID ;
 1fc:	a1 e3       	ldi	r26, 0x31	; 49
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e1 e3       	ldi	r30, 0x31	; 49
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8c 81       	ldd	r24, Y+4	; 0x04
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	88 2f       	mov	r24, r24
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_enuSetPinDirection+0x1b0>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_enuSetPinDirection+0x1ac>
 220:	cb 01       	movw	r24, r22
 222:	84 2b       	or	r24, r20
 224:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	89 83       	std	Y+1, r24	; 0x01
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 230:	89 81       	ldd	r24, Y+1	; 0x01
}
 232:	26 96       	adiw	r28, 0x06	; 6
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	cf 91       	pop	r28
 240:	df 91       	pop	r29
 242:	08 95       	ret

00000244 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	00 d0       	rcall	.+0      	; 0x24a <DIO_enuSetPinValue+0x6>
 24a:	00 d0       	rcall	.+0      	; 0x24c <DIO_enuSetPinValue+0x8>
 24c:	00 d0       	rcall	.+0      	; 0x24e <DIO_enuSetPinValue+0xa>
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	8a 83       	std	Y+2, r24	; 0x02
 254:	6b 83       	std	Y+3, r22	; 0x03
 256:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 258:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN_7 && Copy_u8PinValue <= DIO_u8HIGH_LEVEL)
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	08 f0       	brcs	.+2      	; 0x262 <DIO_enuSetPinValue+0x1e>
 260:	d1 c0       	rjmp	.+418    	; 0x404 <DIO_enuSetPinValue+0x1c0>
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	08 f0       	brcs	.+2      	; 0x26a <DIO_enuSetPinValue+0x26>
 268:	cd c0       	rjmp	.+410    	; 0x404 <DIO_enuSetPinValue+0x1c0>
 26a:	8c 81       	ldd	r24, Y+4	; 0x04
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	08 f0       	brcs	.+2      	; 0x272 <DIO_enuSetPinValue+0x2e>
 270:	c9 c0       	rjmp	.+402    	; 0x404 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8GroupID)
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	3e 83       	std	Y+6, r19	; 0x06
 27a:	2d 83       	std	Y+5, r18	; 0x05
 27c:	6d 81       	ldd	r22, Y+5	; 0x05
 27e:	7e 81       	ldd	r23, Y+6	; 0x06
 280:	61 30       	cpi	r22, 0x01	; 1
 282:	71 05       	cpc	r23, r1
 284:	09 f4       	brne	.+2      	; 0x288 <DIO_enuSetPinValue+0x44>
 286:	41 c0       	rjmp	.+130    	; 0x30a <DIO_enuSetPinValue+0xc6>
 288:	8d 81       	ldd	r24, Y+5	; 0x05
 28a:	9e 81       	ldd	r25, Y+6	; 0x06
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	91 05       	cpc	r25, r1
 290:	34 f4       	brge	.+12     	; 0x29e <DIO_enuSetPinValue+0x5a>
 292:	2d 81       	ldd	r18, Y+5	; 0x05
 294:	3e 81       	ldd	r19, Y+6	; 0x06
 296:	21 15       	cp	r18, r1
 298:	31 05       	cpc	r19, r1
 29a:	71 f0       	breq	.+28     	; 0x2b8 <DIO_enuSetPinValue+0x74>
 29c:	b0 c0       	rjmp	.+352    	; 0x3fe <DIO_enuSetPinValue+0x1ba>
 29e:	6d 81       	ldd	r22, Y+5	; 0x05
 2a0:	7e 81       	ldd	r23, Y+6	; 0x06
 2a2:	62 30       	cpi	r22, 0x02	; 2
 2a4:	71 05       	cpc	r23, r1
 2a6:	09 f4       	brne	.+2      	; 0x2aa <DIO_enuSetPinValue+0x66>
 2a8:	59 c0       	rjmp	.+178    	; 0x35c <DIO_enuSetPinValue+0x118>
 2aa:	8d 81       	ldd	r24, Y+5	; 0x05
 2ac:	9e 81       	ldd	r25, Y+6	; 0x06
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	91 05       	cpc	r25, r1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <DIO_enuSetPinValue+0x72>
 2b4:	7c c0       	rjmp	.+248    	; 0x3ae <DIO_enuSetPinValue+0x16a>
 2b6:	a3 c0       	rjmp	.+326    	; 0x3fe <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_u8GROUP_A :
			PORTA &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
 2b8:	ab e3       	ldi	r26, 0x3B	; 59
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	eb e3       	ldi	r30, 0x3B	; 59
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	48 2f       	mov	r20, r24
 2c4:	8b 81       	ldd	r24, Y+3	; 0x03
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_enuSetPinValue+0x90>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	2a 95       	dec	r18
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_enuSetPinValue+0x8c>
 2d8:	80 95       	com	r24
 2da:	84 23       	and	r24, r20
 2dc:	8c 93       	st	X, r24
			PORTA |= Copy_u8PinValue << Copy_u8PinID ;
 2de:	ab e3       	ldi	r26, 0x3B	; 59
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	eb e3       	ldi	r30, 0x3B	; 59
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	48 2f       	mov	r20, r24
 2ea:	8c 81       	ldd	r24, Y+4	; 0x04
 2ec:	28 2f       	mov	r18, r24
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	88 2f       	mov	r24, r24
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_enuSetPinValue+0xba>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	8a 95       	dec	r24
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_enuSetPinValue+0xb6>
 302:	cb 01       	movw	r24, r22
 304:	84 2b       	or	r24, r20
 306:	8c 93       	st	X, r24
 308:	7a c0       	rjmp	.+244    	; 0x3fe <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_B :
			PORTB &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
 30a:	a8 e3       	ldi	r26, 0x38	; 56
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e8 e3       	ldi	r30, 0x38	; 56
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_enuSetPinValue+0xe2>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_enuSetPinValue+0xde>
 32a:	80 95       	com	r24
 32c:	84 23       	and	r24, r20
 32e:	8c 93       	st	X, r24
			PORTB |= Copy_u8PinValue << Copy_u8PinID ;
 330:	a8 e3       	ldi	r26, 0x38	; 56
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	e8 e3       	ldi	r30, 0x38	; 56
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	48 2f       	mov	r20, r24
 33c:	8c 81       	ldd	r24, Y+4	; 0x04
 33e:	28 2f       	mov	r18, r24
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	8b 81       	ldd	r24, Y+3	; 0x03
 344:	88 2f       	mov	r24, r24
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	b9 01       	movw	r22, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_enuSetPinValue+0x10c>
 34c:	66 0f       	add	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	8a 95       	dec	r24
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_enuSetPinValue+0x108>
 354:	cb 01       	movw	r24, r22
 356:	84 2b       	or	r24, r20
 358:	8c 93       	st	X, r24
 35a:	51 c0       	rjmp	.+162    	; 0x3fe <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
 35c:	a5 e3       	ldi	r26, 0x35	; 53
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e5 e3       	ldi	r30, 0x35	; 53
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_enuSetPinValue+0x134>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	2a 95       	dec	r18
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_enuSetPinValue+0x130>
 37c:	80 95       	com	r24
 37e:	84 23       	and	r24, r20
 380:	8c 93       	st	X, r24
			PORTC |= Copy_u8PinValue << Copy_u8PinID ;
 382:	a5 e3       	ldi	r26, 0x35	; 53
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	e5 e3       	ldi	r30, 0x35	; 53
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	48 2f       	mov	r20, r24
 38e:	8c 81       	ldd	r24, Y+4	; 0x04
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	8b 81       	ldd	r24, Y+3	; 0x03
 396:	88 2f       	mov	r24, r24
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	b9 01       	movw	r22, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_enuSetPinValue+0x15e>
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	8a 95       	dec	r24
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_enuSetPinValue+0x15a>
 3a6:	cb 01       	movw	r24, r22
 3a8:	84 2b       	or	r24, r20
 3aa:	8c 93       	st	X, r24
 3ac:	28 c0       	rjmp	.+80     	; 0x3fe <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
 3ae:	a2 e3       	ldi	r26, 0x32	; 50
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e2 e3       	ldi	r30, 0x32	; 50
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	48 2f       	mov	r20, r24
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_enuSetPinValue+0x186>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	2a 95       	dec	r18
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_enuSetPinValue+0x182>
 3ce:	80 95       	com	r24
 3d0:	84 23       	and	r24, r20
 3d2:	8c 93       	st	X, r24
			PORTD |= Copy_u8PinValue << Copy_u8PinID ;
 3d4:	a2 e3       	ldi	r26, 0x32	; 50
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e2 e3       	ldi	r30, 0x32	; 50
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	48 2f       	mov	r20, r24
 3e0:	8c 81       	ldd	r24, Y+4	; 0x04
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	b9 01       	movw	r22, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_enuSetPinValue+0x1b0>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_enuSetPinValue+0x1ac>
 3f8:	cb 01       	movw	r24, r22
 3fa:	84 2b       	or	r24, r20
 3fc:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	89 83       	std	Y+1, r24	; 0x01
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 408:	89 81       	ldd	r24, Y+1	; 0x01

}
 40a:	26 96       	adiw	r28, 0x06	; 6
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	cf 91       	pop	r28
 418:	df 91       	pop	r29
 41a:	08 95       	ret

0000041c <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID,u8 Copy_u8PinID,u8* Copy_pu8PinValue)
{
 41c:	df 93       	push	r29
 41e:	cf 93       	push	r28
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	27 97       	sbiw	r28, 0x07	; 7
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
 430:	8a 83       	std	Y+2, r24	; 0x02
 432:	6b 83       	std	Y+3, r22	; 0x03
 434:	5d 83       	std	Y+5, r21	; 0x05
 436:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 438:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN_7 )
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	84 30       	cpi	r24, 0x04	; 4
 43e:	08 f0       	brcs	.+2      	; 0x442 <DIO_enuGetPinValue+0x26>
 440:	77 c0       	rjmp	.+238    	; 0x530 <DIO_enuGetPinValue+0x114>
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	88 30       	cpi	r24, 0x08	; 8
 446:	08 f0       	brcs	.+2      	; 0x44a <DIO_enuGetPinValue+0x2e>
 448:	73 c0       	rjmp	.+230    	; 0x530 <DIO_enuGetPinValue+0x114>
    {
    	switch(Copy_u8GroupID)
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	3f 83       	std	Y+7, r19	; 0x07
 452:	2e 83       	std	Y+6, r18	; 0x06
 454:	4e 81       	ldd	r20, Y+6	; 0x06
 456:	5f 81       	ldd	r21, Y+7	; 0x07
 458:	41 30       	cpi	r20, 0x01	; 1
 45a:	51 05       	cpc	r21, r1
 45c:	59 f1       	breq	.+86     	; 0x4b4 <DIO_enuGetPinValue+0x98>
 45e:	8e 81       	ldd	r24, Y+6	; 0x06
 460:	9f 81       	ldd	r25, Y+7	; 0x07
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	91 05       	cpc	r25, r1
 466:	34 f4       	brge	.+12     	; 0x474 <DIO_enuGetPinValue+0x58>
 468:	2e 81       	ldd	r18, Y+6	; 0x06
 46a:	3f 81       	ldd	r19, Y+7	; 0x07
 46c:	21 15       	cp	r18, r1
 46e:	31 05       	cpc	r19, r1
 470:	69 f0       	breq	.+26     	; 0x48c <DIO_enuGetPinValue+0x70>
 472:	5b c0       	rjmp	.+182    	; 0x52a <DIO_enuGetPinValue+0x10e>
 474:	4e 81       	ldd	r20, Y+6	; 0x06
 476:	5f 81       	ldd	r21, Y+7	; 0x07
 478:	42 30       	cpi	r20, 0x02	; 2
 47a:	51 05       	cpc	r21, r1
 47c:	79 f1       	breq	.+94     	; 0x4dc <DIO_enuGetPinValue+0xc0>
 47e:	8e 81       	ldd	r24, Y+6	; 0x06
 480:	9f 81       	ldd	r25, Y+7	; 0x07
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	91 05       	cpc	r25, r1
 486:	09 f4       	brne	.+2      	; 0x48a <DIO_enuGetPinValue+0x6e>
 488:	3d c0       	rjmp	.+122    	; 0x504 <DIO_enuGetPinValue+0xe8>
 48a:	4f c0       	rjmp	.+158    	; 0x52a <DIO_enuGetPinValue+0x10e>
    	{
    	case DIO_u8GROUP_A :
    		*Copy_pu8PinValue = ( PINA >> Copy_u8PinID ) & DIO_u8BIT_MASK;
 48c:	e9 e3       	ldi	r30, 0x39	; 57
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	28 2f       	mov	r18, r24
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	88 2f       	mov	r24, r24
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	a9 01       	movw	r20, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_enuGetPinValue+0x88>
 4a0:	55 95       	asr	r21
 4a2:	47 95       	ror	r20
 4a4:	8a 95       	dec	r24
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_enuGetPinValue+0x84>
 4a8:	ca 01       	movw	r24, r20
 4aa:	81 70       	andi	r24, 0x01	; 1
 4ac:	ec 81       	ldd	r30, Y+4	; 0x04
 4ae:	fd 81       	ldd	r31, Y+5	; 0x05
 4b0:	80 83       	st	Z, r24
 4b2:	3b c0       	rjmp	.+118    	; 0x52a <DIO_enuGetPinValue+0x10e>
    		break;
    	case DIO_u8GROUP_B :
    		*Copy_pu8PinValue = ( PINB >> Copy_u8PinID ) & DIO_u8BIT_MASK;
 4b4:	e6 e3       	ldi	r30, 0x36	; 54
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	28 2f       	mov	r18, r24
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	88 2f       	mov	r24, r24
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	a9 01       	movw	r20, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_enuGetPinValue+0xb0>
 4c8:	55 95       	asr	r21
 4ca:	47 95       	ror	r20
 4cc:	8a 95       	dec	r24
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_enuGetPinValue+0xac>
 4d0:	ca 01       	movw	r24, r20
 4d2:	81 70       	andi	r24, 0x01	; 1
 4d4:	ec 81       	ldd	r30, Y+4	; 0x04
 4d6:	fd 81       	ldd	r31, Y+5	; 0x05
 4d8:	80 83       	st	Z, r24
 4da:	27 c0       	rjmp	.+78     	; 0x52a <DIO_enuGetPinValue+0x10e>
    		break;
    	case DIO_u8GROUP_C:
    		*Copy_pu8PinValue = ( PINC >> Copy_u8PinID ) & DIO_u8BIT_MASK;
 4dc:	e3 e3       	ldi	r30, 0x33	; 51
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	88 2f       	mov	r24, r24
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	a9 01       	movw	r20, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_enuGetPinValue+0xd8>
 4f0:	55 95       	asr	r21
 4f2:	47 95       	ror	r20
 4f4:	8a 95       	dec	r24
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_enuGetPinValue+0xd4>
 4f8:	ca 01       	movw	r24, r20
 4fa:	81 70       	andi	r24, 0x01	; 1
 4fc:	ec 81       	ldd	r30, Y+4	; 0x04
 4fe:	fd 81       	ldd	r31, Y+5	; 0x05
 500:	80 83       	st	Z, r24
 502:	13 c0       	rjmp	.+38     	; 0x52a <DIO_enuGetPinValue+0x10e>
    		break;
    	case DIO_u8GROUP_D:
    		*Copy_pu8PinValue = ( PIND >> Copy_u8PinID ) & DIO_u8BIT_MASK;
 504:	e0 e3       	ldi	r30, 0x30	; 48
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	a9 01       	movw	r20, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_enuGetPinValue+0x100>
 518:	55 95       	asr	r21
 51a:	47 95       	ror	r20
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_enuGetPinValue+0xfc>
 520:	ca 01       	movw	r24, r20
 522:	81 70       	andi	r24, 0x01	; 1
 524:	ec 81       	ldd	r30, Y+4	; 0x04
 526:	fd 81       	ldd	r31, Y+5	; 0x05
 528:	80 83       	st	Z, r24
    		break;
    	}

		Local_enuErrorState = ES_OK;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	89 83       	std	Y+1, r24	; 0x01
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_enuGetPinValue+0x118>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 534:	89 81       	ldd	r24, Y+1	; 0x01
}
 536:	27 96       	adiw	r28, 0x07	; 7
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	08 95       	ret

00000548 <DIO_enuTogglePinVlaue>:

ES_t DIO_enuTogglePinVlaue(u8 Copy_u8GroupID,u8 Copy_u8PinID)
{
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	00 d0       	rcall	.+0      	; 0x54e <DIO_enuTogglePinVlaue+0x6>
 54e:	00 d0       	rcall	.+0      	; 0x550 <DIO_enuTogglePinVlaue+0x8>
 550:	0f 92       	push	r0
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	8a 83       	std	Y+2, r24	; 0x02
 558:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 55a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN_7 )
 55c:	8a 81       	ldd	r24, Y+2	; 0x02
 55e:	84 30       	cpi	r24, 0x04	; 4
 560:	08 f0       	brcs	.+2      	; 0x564 <DIO_enuTogglePinVlaue+0x1c>
 562:	75 c0       	rjmp	.+234    	; 0x64e <DIO_enuTogglePinVlaue+0x106>
 564:	8b 81       	ldd	r24, Y+3	; 0x03
 566:	88 30       	cpi	r24, 0x08	; 8
 568:	08 f0       	brcs	.+2      	; 0x56c <DIO_enuTogglePinVlaue+0x24>
 56a:	71 c0       	rjmp	.+226    	; 0x64e <DIO_enuTogglePinVlaue+0x106>
    {
    	switch(Copy_u8GroupID)
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	3d 83       	std	Y+5, r19	; 0x05
 574:	2c 83       	std	Y+4, r18	; 0x04
 576:	8c 81       	ldd	r24, Y+4	; 0x04
 578:	9d 81       	ldd	r25, Y+5	; 0x05
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	91 05       	cpc	r25, r1
 57e:	49 f1       	breq	.+82     	; 0x5d2 <DIO_enuTogglePinVlaue+0x8a>
 580:	2c 81       	ldd	r18, Y+4	; 0x04
 582:	3d 81       	ldd	r19, Y+5	; 0x05
 584:	22 30       	cpi	r18, 0x02	; 2
 586:	31 05       	cpc	r19, r1
 588:	2c f4       	brge	.+10     	; 0x594 <DIO_enuTogglePinVlaue+0x4c>
 58a:	8c 81       	ldd	r24, Y+4	; 0x04
 58c:	9d 81       	ldd	r25, Y+5	; 0x05
 58e:	00 97       	sbiw	r24, 0x00	; 0
 590:	61 f0       	breq	.+24     	; 0x5aa <DIO_enuTogglePinVlaue+0x62>
 592:	5a c0       	rjmp	.+180    	; 0x648 <DIO_enuTogglePinVlaue+0x100>
 594:	2c 81       	ldd	r18, Y+4	; 0x04
 596:	3d 81       	ldd	r19, Y+5	; 0x05
 598:	22 30       	cpi	r18, 0x02	; 2
 59a:	31 05       	cpc	r19, r1
 59c:	71 f1       	breq	.+92     	; 0x5fa <DIO_enuTogglePinVlaue+0xb2>
 59e:	8c 81       	ldd	r24, Y+4	; 0x04
 5a0:	9d 81       	ldd	r25, Y+5	; 0x05
 5a2:	83 30       	cpi	r24, 0x03	; 3
 5a4:	91 05       	cpc	r25, r1
 5a6:	e9 f1       	breq	.+122    	; 0x622 <DIO_enuTogglePinVlaue+0xda>
 5a8:	4f c0       	rjmp	.+158    	; 0x648 <DIO_enuTogglePinVlaue+0x100>
    	{
    	case DIO_u8GROUP_A :
    		PORTA ^= (DIO_u8BIT_MASK << Copy_u8PinID);
 5aa:	ab e3       	ldi	r26, 0x3B	; 59
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	eb e3       	ldi	r30, 0x3B	; 59
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	48 2f       	mov	r20, r24
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 2e       	mov	r0, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_enuTogglePinVlaue+0x80>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_enuTogglePinVlaue+0x7c>
 5cc:	84 27       	eor	r24, r20
 5ce:	8c 93       	st	X, r24
 5d0:	3b c0       	rjmp	.+118    	; 0x648 <DIO_enuTogglePinVlaue+0x100>
    		break;
    	case DIO_u8GROUP_B :
    		PORTB ^= (DIO_u8BIT_MASK << Copy_u8PinID);
 5d2:	a8 e3       	ldi	r26, 0x38	; 56
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	e8 e3       	ldi	r30, 0x38	; 56
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	48 2f       	mov	r20, r24
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	28 2f       	mov	r18, r24
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 2e       	mov	r0, r18
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_enuTogglePinVlaue+0xa8>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	0a 94       	dec	r0
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_enuTogglePinVlaue+0xa4>
 5f4:	84 27       	eor	r24, r20
 5f6:	8c 93       	st	X, r24
 5f8:	27 c0       	rjmp	.+78     	; 0x648 <DIO_enuTogglePinVlaue+0x100>
    		break;
    	case DIO_u8GROUP_C:
    		PORTC ^= (DIO_u8BIT_MASK << Copy_u8PinID);
 5fa:	a5 e3       	ldi	r26, 0x35	; 53
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	e5 e3       	ldi	r30, 0x35	; 53
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	48 2f       	mov	r20, r24
 606:	8b 81       	ldd	r24, Y+3	; 0x03
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 2e       	mov	r0, r18
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_enuTogglePinVlaue+0xd0>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	0a 94       	dec	r0
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_enuTogglePinVlaue+0xcc>
 61c:	84 27       	eor	r24, r20
 61e:	8c 93       	st	X, r24
 620:	13 c0       	rjmp	.+38     	; 0x648 <DIO_enuTogglePinVlaue+0x100>
    		break;
    	case DIO_u8GROUP_D:
    		PORTD ^= (DIO_u8BIT_MASK << Copy_u8PinID);
 622:	a2 e3       	ldi	r26, 0x32	; 50
 624:	b0 e0       	ldi	r27, 0x00	; 0
 626:	e2 e3       	ldi	r30, 0x32	; 50
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	48 2f       	mov	r20, r24
 62e:	8b 81       	ldd	r24, Y+3	; 0x03
 630:	28 2f       	mov	r18, r24
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 2e       	mov	r0, r18
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_enuTogglePinVlaue+0xf8>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	0a 94       	dec	r0
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_enuTogglePinVlaue+0xf4>
 644:	84 27       	eor	r24, r20
 646:	8c 93       	st	X, r24
    		break;
    	}

		Local_enuErrorState = ES_OK;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	89 83       	std	Y+1, r24	; 0x01
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_enuTogglePinVlaue+0x10a>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 652:	89 81       	ldd	r24, Y+1	; 0x01
}
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	cf 91       	pop	r28
 660:	df 91       	pop	r29
 662:	08 95       	ret

00000664 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8GroupID,u8 Copy_u8PortValue)
{
 664:	df 93       	push	r29
 666:	cf 93       	push	r28
 668:	00 d0       	rcall	.+0      	; 0x66a <DIO_enuSetPortValue+0x6>
 66a:	00 d0       	rcall	.+0      	; 0x66c <DIO_enuSetPortValue+0x8>
 66c:	0f 92       	push	r0
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	8a 83       	std	Y+2, r24	; 0x02
 674:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 676:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D )
 678:	8a 81       	ldd	r24, Y+2	; 0x02
 67a:	84 30       	cpi	r24, 0x04	; 4
 67c:	a8 f5       	brcc	.+106    	; 0x6e8 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8GroupID)
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	3d 83       	std	Y+5, r19	; 0x05
 686:	2c 83       	std	Y+4, r18	; 0x04
 688:	8c 81       	ldd	r24, Y+4	; 0x04
 68a:	9d 81       	ldd	r25, Y+5	; 0x05
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	91 05       	cpc	r25, r1
 690:	d1 f0       	breq	.+52     	; 0x6c6 <DIO_enuSetPortValue+0x62>
 692:	2c 81       	ldd	r18, Y+4	; 0x04
 694:	3d 81       	ldd	r19, Y+5	; 0x05
 696:	22 30       	cpi	r18, 0x02	; 2
 698:	31 05       	cpc	r19, r1
 69a:	2c f4       	brge	.+10     	; 0x6a6 <DIO_enuSetPortValue+0x42>
 69c:	8c 81       	ldd	r24, Y+4	; 0x04
 69e:	9d 81       	ldd	r25, Y+5	; 0x05
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	61 f0       	breq	.+24     	; 0x6bc <DIO_enuSetPortValue+0x58>
 6a4:	1e c0       	rjmp	.+60     	; 0x6e2 <DIO_enuSetPortValue+0x7e>
 6a6:	2c 81       	ldd	r18, Y+4	; 0x04
 6a8:	3d 81       	ldd	r19, Y+5	; 0x05
 6aa:	22 30       	cpi	r18, 0x02	; 2
 6ac:	31 05       	cpc	r19, r1
 6ae:	81 f0       	breq	.+32     	; 0x6d0 <DIO_enuSetPortValue+0x6c>
 6b0:	8c 81       	ldd	r24, Y+4	; 0x04
 6b2:	9d 81       	ldd	r25, Y+5	; 0x05
 6b4:	83 30       	cpi	r24, 0x03	; 3
 6b6:	91 05       	cpc	r25, r1
 6b8:	81 f0       	breq	.+32     	; 0x6da <DIO_enuSetPortValue+0x76>
 6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_u8GROUP_A :
			PORTA = Copy_u8PortValue ;
 6bc:	eb e3       	ldi	r30, 0x3B	; 59
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	8b 81       	ldd	r24, Y+3	; 0x03
 6c2:	80 83       	st	Z, r24
 6c4:	0e c0       	rjmp	.+28     	; 0x6e2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_u8GROUP_B :
			PORTB = Copy_u8PortValue ;
 6c6:	e8 e3       	ldi	r30, 0x38	; 56
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	80 83       	st	Z, r24
 6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_u8GROUP_C:
			PORTC = Copy_u8PortValue ;
 6d0:	e5 e3       	ldi	r30, 0x35	; 53
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	80 83       	st	Z, r24
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_u8GROUP_D:
			PORTD = Copy_u8PortValue ;
 6da:	e2 e3       	ldi	r30, 0x32	; 50
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
 6e0:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	89 83       	std	Y+1, r24	; 0x01
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
 6e8:	82 e0       	ldi	r24, 0x02	; 2
 6ea:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 6ec:	89 81       	ldd	r24, Y+1	; 0x01

}
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
 6f6:	0f 90       	pop	r0
 6f8:	cf 91       	pop	r28
 6fa:	df 91       	pop	r29
 6fc:	08 95       	ret

000006fe <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8GroupID,u8 Copy_u8PortDirection)
{
 6fe:	df 93       	push	r29
 700:	cf 93       	push	r28
 702:	00 d0       	rcall	.+0      	; 0x704 <DIO_enuSetPortDirection+0x6>
 704:	00 d0       	rcall	.+0      	; 0x706 <DIO_enuSetPortDirection+0x8>
 706:	0f 92       	push	r0
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
 70c:	8a 83       	std	Y+2, r24	; 0x02
 70e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 710:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D )
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	84 30       	cpi	r24, 0x04	; 4
 716:	a8 f5       	brcc	.+106    	; 0x782 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8GroupID)
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	28 2f       	mov	r18, r24
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	3d 83       	std	Y+5, r19	; 0x05
 720:	2c 83       	std	Y+4, r18	; 0x04
 722:	8c 81       	ldd	r24, Y+4	; 0x04
 724:	9d 81       	ldd	r25, Y+5	; 0x05
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	91 05       	cpc	r25, r1
 72a:	d1 f0       	breq	.+52     	; 0x760 <DIO_enuSetPortDirection+0x62>
 72c:	2c 81       	ldd	r18, Y+4	; 0x04
 72e:	3d 81       	ldd	r19, Y+5	; 0x05
 730:	22 30       	cpi	r18, 0x02	; 2
 732:	31 05       	cpc	r19, r1
 734:	2c f4       	brge	.+10     	; 0x740 <DIO_enuSetPortDirection+0x42>
 736:	8c 81       	ldd	r24, Y+4	; 0x04
 738:	9d 81       	ldd	r25, Y+5	; 0x05
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	61 f0       	breq	.+24     	; 0x756 <DIO_enuSetPortDirection+0x58>
 73e:	1e c0       	rjmp	.+60     	; 0x77c <DIO_enuSetPortDirection+0x7e>
 740:	2c 81       	ldd	r18, Y+4	; 0x04
 742:	3d 81       	ldd	r19, Y+5	; 0x05
 744:	22 30       	cpi	r18, 0x02	; 2
 746:	31 05       	cpc	r19, r1
 748:	81 f0       	breq	.+32     	; 0x76a <DIO_enuSetPortDirection+0x6c>
 74a:	8c 81       	ldd	r24, Y+4	; 0x04
 74c:	9d 81       	ldd	r25, Y+5	; 0x05
 74e:	83 30       	cpi	r24, 0x03	; 3
 750:	91 05       	cpc	r25, r1
 752:	81 f0       	breq	.+32     	; 0x774 <DIO_enuSetPortDirection+0x76>
 754:	13 c0       	rjmp	.+38     	; 0x77c <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_u8GROUP_A :
			DDRA = Copy_u8PortDirection ;
 756:	ea e3       	ldi	r30, 0x3A	; 58
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	8b 81       	ldd	r24, Y+3	; 0x03
 75c:	80 83       	st	Z, r24
 75e:	0e c0       	rjmp	.+28     	; 0x77c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_u8GROUP_B :
			DDRB = Copy_u8PortDirection ;
 760:	e7 e3       	ldi	r30, 0x37	; 55
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	80 83       	st	Z, r24
 768:	09 c0       	rjmp	.+18     	; 0x77c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_u8GROUP_C:
			DDRC = Copy_u8PortDirection ;
 76a:	e4 e3       	ldi	r30, 0x34	; 52
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	8b 81       	ldd	r24, Y+3	; 0x03
 770:	80 83       	st	Z, r24
 772:	04 c0       	rjmp	.+8      	; 0x77c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_u8GROUP_D:
			DDRD = Copy_u8PortDirection ;
 774:	e1 e3       	ldi	r30, 0x31	; 49
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	8b 81       	ldd	r24, Y+3	; 0x03
 77a:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	89 83       	std	Y+1, r24	; 0x01
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 786:	89 81       	ldd	r24, Y+1	; 0x01

}
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	cf 91       	pop	r28
 794:	df 91       	pop	r29
 796:	08 95       	ret

00000798 <main>:
void WDT_voidDisable();
void WDT_voidEnable();
void WDT_voidSetSleepValue(u8 Copy_u8Prescaler);

int main()
{
 798:	df 93       	push	r29
 79a:	cf 93       	push	r28
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62

	DIO_enuSetPinDirection(DIO_u8GROUP_C,DIO_u8PIN_2,DIO_u8OUTPUT);
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	62 e0       	ldi	r22, 0x02	; 2
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enuSetPinDirection>


	DIO_enuSetPinValue(DIO_u8GROUP_C,DIO_u8PIN_2,DIO_u8LOW_LEVEL);
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	62 e0       	ldi	r22, 0x02	; 2
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	0e 94 22 01 	call	0x244	; 0x244 <DIO_enuSetPinValue>

	//_delay_ms(1000);
	DIO_enuSetPinValue(DIO_u8GROUP_C,DIO_u8PIN_2,DIO_u8HIGH_LEVEL);
 7b4:	82 e0       	ldi	r24, 0x02	; 2
 7b6:	62 e0       	ldi	r22, 0x02	; 2
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	0e 94 22 01 	call	0x244	; 0x244 <DIO_enuSetPinValue>

	WDT_voidSetSleepValue(6);
 7be:	86 e0       	ldi	r24, 0x06	; 6
 7c0:	0e 94 03 04 	call	0x806	; 0x806 <WDT_voidSetSleepValue>
	WDT_voidEnable();
 7c4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <WDT_voidEnable>
	WDT_voidDisable();
 7c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <WDT_voidDisable>
 7cc:	ff cf       	rjmp	.-2      	; 0x7cc <main+0x34>

000007ce <WDT_voidEnable>:


}

void WDT_voidEnable()
{
 7ce:	df 93       	push	r29
 7d0:	cf 93       	push	r28
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
 7d6:	a1 e4       	ldi	r26, 0x41	; 65
 7d8:	b0 e0       	ldi	r27, 0x00	; 0
 7da:	e1 e4       	ldi	r30, 0x41	; 65
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	88 60       	ori	r24, 0x08	; 8
 7e2:	8c 93       	st	X, r24
}
 7e4:	cf 91       	pop	r28
 7e6:	df 91       	pop	r29
 7e8:	08 95       	ret

000007ea <WDT_voidDisable>:

void WDT_voidDisable()
{
 7ea:	df 93       	push	r29
 7ec:	cf 93       	push	r28
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
	WDTCR = (1<<WDTCR_WDE) | (1<<WDTCR_WDTOE) ;
 7f2:	e1 e4       	ldi	r30, 0x41	; 65
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	88 e1       	ldi	r24, 0x18	; 24
 7f8:	80 83       	st	Z, r24
	WDTCR = 0;
 7fa:	e1 e4       	ldi	r30, 0x41	; 65
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	10 82       	st	Z, r1
}
 800:	cf 91       	pop	r28
 802:	df 91       	pop	r29
 804:	08 95       	ret

00000806 <WDT_voidSetSleepValue>:

void WDT_voidSetSleepValue(u8 Copy_u8Prescaler)
{
 806:	df 93       	push	r29
 808:	cf 93       	push	r28
 80a:	0f 92       	push	r0
 80c:	cd b7       	in	r28, 0x3d	; 61
 80e:	de b7       	in	r29, 0x3e	; 62
 810:	89 83       	std	Y+1, r24	; 0x01

	WDTCR &= 0b11111000;
 812:	a1 e4       	ldi	r26, 0x41	; 65
 814:	b0 e0       	ldi	r27, 0x00	; 0
 816:	e1 e4       	ldi	r30, 0x41	; 65
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	88 7f       	andi	r24, 0xF8	; 248
 81e:	8c 93       	st	X, r24
	WDTCR = Copy_u8Prescaler;
 820:	e1 e4       	ldi	r30, 0x41	; 65
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	80 83       	st	Z, r24
}
 828:	0f 90       	pop	r0
 82a:	cf 91       	pop	r28
 82c:	df 91       	pop	r29
 82e:	08 95       	ret

00000830 <_exit>:
 830:	f8 94       	cli

00000832 <__stop_program>:
 832:	ff cf       	rjmp	.-2      	; 0x832 <__stop_program>
