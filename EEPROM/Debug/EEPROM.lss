
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000229a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000229a  0000230e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f5c  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010c4  00000000  00000000  00004274  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000055e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000811c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000092b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009a87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ac 10 	call	0x2158	; 0x2158 <main>
      7a:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e6       	ldi	r26, 0x62	; 98
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e6       	ldi	r24, 0x62	; 98
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_enuSetPinDirection>:
#include "errorState.h"
#include "stdTypes.h"


ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID,u8 Copy_u8PinID,u8 Copy_u8PinDirection)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_enuSetPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_enuSetPinDirection+0x8>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <DIO_enuSetPinDirection+0xa>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	6b 83       	std	Y+3, r22	; 0x03
     b48:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     b4a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN_7 && Copy_u8PinDirection <= DIO_u8OUTPUT)
     b4c:	8a 81       	ldd	r24, Y+2	; 0x02
     b4e:	84 30       	cpi	r24, 0x04	; 4
     b50:	08 f0       	brcs	.+2      	; 0xb54 <DIO_enuSetPinDirection+0x1e>
     b52:	d1 c0       	rjmp	.+418    	; 0xcf6 <DIO_enuSetPinDirection+0x1c0>
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	88 30       	cpi	r24, 0x08	; 8
     b58:	08 f0       	brcs	.+2      	; 0xb5c <DIO_enuSetPinDirection+0x26>
     b5a:	cd c0       	rjmp	.+410    	; 0xcf6 <DIO_enuSetPinDirection+0x1c0>
     b5c:	8c 81       	ldd	r24, Y+4	; 0x04
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	08 f0       	brcs	.+2      	; 0xb64 <DIO_enuSetPinDirection+0x2e>
     b62:	c9 c0       	rjmp	.+402    	; 0xcf6 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8GroupID)
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	3e 83       	std	Y+6, r19	; 0x06
     b6c:	2d 83       	std	Y+5, r18	; 0x05
     b6e:	6d 81       	ldd	r22, Y+5	; 0x05
     b70:	7e 81       	ldd	r23, Y+6	; 0x06
     b72:	61 30       	cpi	r22, 0x01	; 1
     b74:	71 05       	cpc	r23, r1
     b76:	09 f4       	brne	.+2      	; 0xb7a <DIO_enuSetPinDirection+0x44>
     b78:	41 c0       	rjmp	.+130    	; 0xbfc <DIO_enuSetPinDirection+0xc6>
     b7a:	8d 81       	ldd	r24, Y+5	; 0x05
     b7c:	9e 81       	ldd	r25, Y+6	; 0x06
     b7e:	82 30       	cpi	r24, 0x02	; 2
     b80:	91 05       	cpc	r25, r1
     b82:	34 f4       	brge	.+12     	; 0xb90 <DIO_enuSetPinDirection+0x5a>
     b84:	2d 81       	ldd	r18, Y+5	; 0x05
     b86:	3e 81       	ldd	r19, Y+6	; 0x06
     b88:	21 15       	cp	r18, r1
     b8a:	31 05       	cpc	r19, r1
     b8c:	71 f0       	breq	.+28     	; 0xbaa <DIO_enuSetPinDirection+0x74>
     b8e:	b0 c0       	rjmp	.+352    	; 0xcf0 <DIO_enuSetPinDirection+0x1ba>
     b90:	6d 81       	ldd	r22, Y+5	; 0x05
     b92:	7e 81       	ldd	r23, Y+6	; 0x06
     b94:	62 30       	cpi	r22, 0x02	; 2
     b96:	71 05       	cpc	r23, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <DIO_enuSetPinDirection+0x66>
     b9a:	59 c0       	rjmp	.+178    	; 0xc4e <DIO_enuSetPinDirection+0x118>
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f4       	brne	.+2      	; 0xba8 <DIO_enuSetPinDirection+0x72>
     ba6:	7c c0       	rjmp	.+248    	; 0xca0 <DIO_enuSetPinDirection+0x16a>
     ba8:	a3 c0       	rjmp	.+326    	; 0xcf0 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A :
			DDRA &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
     baa:	aa e3       	ldi	r26, 0x3A	; 58
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	ea e3       	ldi	r30, 0x3A	; 58
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	48 2f       	mov	r20, r24
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <DIO_enuSetPinDirection+0x90>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	2a 95       	dec	r18
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <DIO_enuSetPinDirection+0x8c>
     bca:	80 95       	com	r24
     bcc:	84 23       	and	r24, r20
     bce:	8c 93       	st	X, r24
			DDRA |= Copy_u8PinDirection << Copy_u8PinID ;
     bd0:	aa e3       	ldi	r26, 0x3A	; 58
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ea e3       	ldi	r30, 0x3A	; 58
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	48 2f       	mov	r20, r24
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	88 2f       	mov	r24, r24
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	b9 01       	movw	r22, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_enuSetPinDirection+0xba>
     bec:	66 0f       	add	r22, r22
     bee:	77 1f       	adc	r23, r23
     bf0:	8a 95       	dec	r24
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_enuSetPinDirection+0xb6>
     bf4:	cb 01       	movw	r24, r22
     bf6:	84 2b       	or	r24, r20
     bf8:	8c 93       	st	X, r24
     bfa:	7a c0       	rjmp	.+244    	; 0xcf0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_enuSetPinDirection+0xe2>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	2a 95       	dec	r18
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_enuSetPinDirection+0xde>
     c1c:	80 95       	com	r24
     c1e:	84 23       	and	r24, r20
     c20:	8c 93       	st	X, r24
			DDRB |= Copy_u8PinDirection << Copy_u8PinID ;
     c22:	a7 e3       	ldi	r26, 0x37	; 55
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e7 e3       	ldi	r30, 0x37	; 55
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	48 2f       	mov	r20, r24
     c2e:	8c 81       	ldd	r24, Y+4	; 0x04
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	b9 01       	movw	r22, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_enuSetPinDirection+0x10c>
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	8a 95       	dec	r24
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_enuSetPinDirection+0x108>
     c46:	cb 01       	movw	r24, r22
     c48:	84 2b       	or	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	51 c0       	rjmp	.+162    	; 0xcf0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
     c4e:	a4 e3       	ldi	r26, 0x34	; 52
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e4 e3       	ldi	r30, 0x34	; 52
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	48 2f       	mov	r20, r24
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_enuSetPinDirection+0x134>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	2a 95       	dec	r18
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_enuSetPinDirection+0x130>
     c6e:	80 95       	com	r24
     c70:	84 23       	and	r24, r20
     c72:	8c 93       	st	X, r24
			DDRC |= Copy_u8PinDirection << Copy_u8PinID ;
     c74:	a4 e3       	ldi	r26, 0x34	; 52
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e4 e3       	ldi	r30, 0x34	; 52
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	b9 01       	movw	r22, r18
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <DIO_enuSetPinDirection+0x15e>
     c90:	66 0f       	add	r22, r22
     c92:	77 1f       	adc	r23, r23
     c94:	8a 95       	dec	r24
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <DIO_enuSetPinDirection+0x15a>
     c98:	cb 01       	movw	r24, r22
     c9a:	84 2b       	or	r24, r20
     c9c:	8c 93       	st	X, r24
     c9e:	28 c0       	rjmp	.+80     	; 0xcf0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
     ca0:	a1 e3       	ldi	r26, 0x31	; 49
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e1 e3       	ldi	r30, 0x31	; 49
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	48 2f       	mov	r20, r24
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_enuSetPinDirection+0x186>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	2a 95       	dec	r18
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_enuSetPinDirection+0x182>
     cc0:	80 95       	com	r24
     cc2:	84 23       	and	r24, r20
     cc4:	8c 93       	st	X, r24
			DDRD |= Copy_u8PinDirection << Copy_u8PinID ;
     cc6:	a1 e3       	ldi	r26, 0x31	; 49
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e1 e3       	ldi	r30, 0x31	; 49
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	b9 01       	movw	r22, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_enuSetPinDirection+0x1b0>
     ce2:	66 0f       	add	r22, r22
     ce4:	77 1f       	adc	r23, r23
     ce6:	8a 95       	dec	r24
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_enuSetPinDirection+0x1ac>
     cea:	cb 01       	movw	r24, r22
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     cfc:	26 96       	adiw	r28, 0x06	; 6
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_enuSetPinValue+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_enuSetPinValue+0x8>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <DIO_enuSetPinValue+0xa>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	8a 83       	std	Y+2, r24	; 0x02
     d1e:	6b 83       	std	Y+3, r22	; 0x03
     d20:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     d22:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN_7 && Copy_u8PinValue <= DIO_u8HIGH_LEVEL)
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	08 f0       	brcs	.+2      	; 0xd2c <DIO_enuSetPinValue+0x1e>
     d2a:	d1 c0       	rjmp	.+418    	; 0xece <DIO_enuSetPinValue+0x1c0>
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	88 30       	cpi	r24, 0x08	; 8
     d30:	08 f0       	brcs	.+2      	; 0xd34 <DIO_enuSetPinValue+0x26>
     d32:	cd c0       	rjmp	.+410    	; 0xece <DIO_enuSetPinValue+0x1c0>
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	08 f0       	brcs	.+2      	; 0xd3c <DIO_enuSetPinValue+0x2e>
     d3a:	c9 c0       	rjmp	.+402    	; 0xece <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8GroupID)
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	3e 83       	std	Y+6, r19	; 0x06
     d44:	2d 83       	std	Y+5, r18	; 0x05
     d46:	6d 81       	ldd	r22, Y+5	; 0x05
     d48:	7e 81       	ldd	r23, Y+6	; 0x06
     d4a:	61 30       	cpi	r22, 0x01	; 1
     d4c:	71 05       	cpc	r23, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <DIO_enuSetPinValue+0x44>
     d50:	41 c0       	rjmp	.+130    	; 0xdd4 <DIO_enuSetPinValue+0xc6>
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	91 05       	cpc	r25, r1
     d5a:	34 f4       	brge	.+12     	; 0xd68 <DIO_enuSetPinValue+0x5a>
     d5c:	2d 81       	ldd	r18, Y+5	; 0x05
     d5e:	3e 81       	ldd	r19, Y+6	; 0x06
     d60:	21 15       	cp	r18, r1
     d62:	31 05       	cpc	r19, r1
     d64:	71 f0       	breq	.+28     	; 0xd82 <DIO_enuSetPinValue+0x74>
     d66:	b0 c0       	rjmp	.+352    	; 0xec8 <DIO_enuSetPinValue+0x1ba>
     d68:	6d 81       	ldd	r22, Y+5	; 0x05
     d6a:	7e 81       	ldd	r23, Y+6	; 0x06
     d6c:	62 30       	cpi	r22, 0x02	; 2
     d6e:	71 05       	cpc	r23, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <DIO_enuSetPinValue+0x66>
     d72:	59 c0       	rjmp	.+178    	; 0xe26 <DIO_enuSetPinValue+0x118>
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <DIO_enuSetPinValue+0x72>
     d7e:	7c c0       	rjmp	.+248    	; 0xe78 <DIO_enuSetPinValue+0x16a>
     d80:	a3 c0       	rjmp	.+326    	; 0xec8 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_u8GROUP_A :
			PORTA &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
     d82:	ab e3       	ldi	r26, 0x3B	; 59
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	eb e3       	ldi	r30, 0x3B	; 59
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_enuSetPinValue+0x90>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	2a 95       	dec	r18
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_enuSetPinValue+0x8c>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
			PORTA |= Copy_u8PinValue << Copy_u8PinID ;
     da8:	ab e3       	ldi	r26, 0x3B	; 59
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	b9 01       	movw	r22, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_enuSetPinValue+0xba>
     dc4:	66 0f       	add	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_enuSetPinValue+0xb6>
     dcc:	cb 01       	movw	r24, r22
     dce:	84 2b       	or	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	7a c0       	rjmp	.+244    	; 0xec8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_B :
			PORTB &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
     dd4:	a8 e3       	ldi	r26, 0x38	; 56
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e8 e3       	ldi	r30, 0x38	; 56
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_enuSetPinValue+0xe2>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	2a 95       	dec	r18
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_enuSetPinValue+0xde>
     df4:	80 95       	com	r24
     df6:	84 23       	and	r24, r20
     df8:	8c 93       	st	X, r24
			PORTB |= Copy_u8PinValue << Copy_u8PinID ;
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	b9 01       	movw	r22, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_enuSetPinValue+0x10c>
     e16:	66 0f       	add	r22, r22
     e18:	77 1f       	adc	r23, r23
     e1a:	8a 95       	dec	r24
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_enuSetPinValue+0x108>
     e1e:	cb 01       	movw	r24, r22
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	51 c0       	rjmp	.+162    	; 0xec8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
     e26:	a5 e3       	ldi	r26, 0x35	; 53
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e5 e3       	ldi	r30, 0x35	; 53
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_enuSetPinValue+0x134>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	2a 95       	dec	r18
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_enuSetPinValue+0x130>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
			PORTC |= Copy_u8PinValue << Copy_u8PinID ;
     e4c:	a5 e3       	ldi	r26, 0x35	; 53
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e5 e3       	ldi	r30, 0x35	; 53
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	b9 01       	movw	r22, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_enuSetPinValue+0x15e>
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	8a 95       	dec	r24
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_enuSetPinValue+0x15a>
     e70:	cb 01       	movw	r24, r22
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	28 c0       	rjmp	.+80     	; 0xec8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~ ( DIO_u8BIT_MASK << Copy_u8PinID ) ;
     e78:	a2 e3       	ldi	r26, 0x32	; 50
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e2 e3       	ldi	r30, 0x32	; 50
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_enuSetPinValue+0x186>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	2a 95       	dec	r18
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_enuSetPinValue+0x182>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
			PORTD |= Copy_u8PinValue << Copy_u8PinID ;
     e9e:	a2 e3       	ldi	r26, 0x32	; 50
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e2 e3       	ldi	r30, 0x32	; 50
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	b9 01       	movw	r22, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_enuSetPinValue+0x1b0>
     eba:	66 0f       	add	r22, r22
     ebc:	77 1f       	adc	r23, r23
     ebe:	8a 95       	dec	r24
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_enuSetPinValue+0x1ac>
     ec2:	cb 01       	movw	r24, r22
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     ed2:	89 81       	ldd	r24, Y+1	; 0x01

}
     ed4:	26 96       	adiw	r28, 0x06	; 6
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID,u8 Copy_u8PinID,u8* Copy_pu8PinValue)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	27 97       	sbiw	r28, 0x07	; 7
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	8a 83       	std	Y+2, r24	; 0x02
     efc:	6b 83       	std	Y+3, r22	; 0x03
     efe:	5d 83       	std	Y+5, r21	; 0x05
     f00:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     f02:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN_7 )
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	08 f0       	brcs	.+2      	; 0xf0c <DIO_enuGetPinValue+0x26>
     f0a:	77 c0       	rjmp	.+238    	; 0xffa <DIO_enuGetPinValue+0x114>
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 30       	cpi	r24, 0x08	; 8
     f10:	08 f0       	brcs	.+2      	; 0xf14 <DIO_enuGetPinValue+0x2e>
     f12:	73 c0       	rjmp	.+230    	; 0xffa <DIO_enuGetPinValue+0x114>
    {
    	switch(Copy_u8GroupID)
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3f 83       	std	Y+7, r19	; 0x07
     f1c:	2e 83       	std	Y+6, r18	; 0x06
     f1e:	4e 81       	ldd	r20, Y+6	; 0x06
     f20:	5f 81       	ldd	r21, Y+7	; 0x07
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	59 f1       	breq	.+86     	; 0xf7e <DIO_enuGetPinValue+0x98>
     f28:	8e 81       	ldd	r24, Y+6	; 0x06
     f2a:	9f 81       	ldd	r25, Y+7	; 0x07
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <DIO_enuGetPinValue+0x58>
     f32:	2e 81       	ldd	r18, Y+6	; 0x06
     f34:	3f 81       	ldd	r19, Y+7	; 0x07
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	69 f0       	breq	.+26     	; 0xf56 <DIO_enuGetPinValue+0x70>
     f3c:	5b c0       	rjmp	.+182    	; 0xff4 <DIO_enuGetPinValue+0x10e>
     f3e:	4e 81       	ldd	r20, Y+6	; 0x06
     f40:	5f 81       	ldd	r21, Y+7	; 0x07
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	79 f1       	breq	.+94     	; 0xfa6 <DIO_enuGetPinValue+0xc0>
     f48:	8e 81       	ldd	r24, Y+6	; 0x06
     f4a:	9f 81       	ldd	r25, Y+7	; 0x07
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <DIO_enuGetPinValue+0x6e>
     f52:	3d c0       	rjmp	.+122    	; 0xfce <DIO_enuGetPinValue+0xe8>
     f54:	4f c0       	rjmp	.+158    	; 0xff4 <DIO_enuGetPinValue+0x10e>
    	{
    	case DIO_u8GROUP_A :
    		*Copy_pu8PinValue = ( PINA >> Copy_u8PinID ) & DIO_u8BIT_MASK;
     f56:	e9 e3       	ldi	r30, 0x39	; 57
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_enuGetPinValue+0x88>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_enuGetPinValue+0x84>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	ec 81       	ldd	r30, Y+4	; 0x04
     f78:	fd 81       	ldd	r31, Y+5	; 0x05
     f7a:	80 83       	st	Z, r24
     f7c:	3b c0       	rjmp	.+118    	; 0xff4 <DIO_enuGetPinValue+0x10e>
    		break;
    	case DIO_u8GROUP_B :
    		*Copy_pu8PinValue = ( PINB >> Copy_u8PinID ) & DIO_u8BIT_MASK;
     f7e:	e6 e3       	ldi	r30, 0x36	; 54
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a9 01       	movw	r20, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_enuGetPinValue+0xb0>
     f92:	55 95       	asr	r21
     f94:	47 95       	ror	r20
     f96:	8a 95       	dec	r24
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_enuGetPinValue+0xac>
     f9a:	ca 01       	movw	r24, r20
     f9c:	81 70       	andi	r24, 0x01	; 1
     f9e:	ec 81       	ldd	r30, Y+4	; 0x04
     fa0:	fd 81       	ldd	r31, Y+5	; 0x05
     fa2:	80 83       	st	Z, r24
     fa4:	27 c0       	rjmp	.+78     	; 0xff4 <DIO_enuGetPinValue+0x10e>
    		break;
    	case DIO_u8GROUP_C:
    		*Copy_pu8PinValue = ( PINC >> Copy_u8PinID ) & DIO_u8BIT_MASK;
     fa6:	e3 e3       	ldi	r30, 0x33	; 51
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	a9 01       	movw	r20, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_enuGetPinValue+0xd8>
     fba:	55 95       	asr	r21
     fbc:	47 95       	ror	r20
     fbe:	8a 95       	dec	r24
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_enuGetPinValue+0xd4>
     fc2:	ca 01       	movw	r24, r20
     fc4:	81 70       	andi	r24, 0x01	; 1
     fc6:	ec 81       	ldd	r30, Y+4	; 0x04
     fc8:	fd 81       	ldd	r31, Y+5	; 0x05
     fca:	80 83       	st	Z, r24
     fcc:	13 c0       	rjmp	.+38     	; 0xff4 <DIO_enuGetPinValue+0x10e>
    		break;
    	case DIO_u8GROUP_D:
    		*Copy_pu8PinValue = ( PIND >> Copy_u8PinID ) & DIO_u8BIT_MASK;
     fce:	e0 e3       	ldi	r30, 0x30	; 48
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a9 01       	movw	r20, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_enuGetPinValue+0x100>
     fe2:	55 95       	asr	r21
     fe4:	47 95       	ror	r20
     fe6:	8a 95       	dec	r24
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_enuGetPinValue+0xfc>
     fea:	ca 01       	movw	r24, r20
     fec:	81 70       	andi	r24, 0x01	; 1
     fee:	ec 81       	ldd	r30, Y+4	; 0x04
     ff0:	fd 81       	ldd	r31, Y+5	; 0x05
     ff2:	80 83       	st	Z, r24
    		break;
    	}

		Local_enuErrorState = ES_OK;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_enuGetPinValue+0x118>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1000:	27 96       	adiw	r28, 0x07	; 7
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_enuTogglePinVlaue>:

ES_t DIO_enuTogglePinVlaue(u8 Copy_u8GroupID,u8 Copy_u8PinID)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_enuTogglePinVlaue+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <DIO_enuTogglePinVlaue+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1024:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN_7 )
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	08 f0       	brcs	.+2      	; 0x102e <DIO_enuTogglePinVlaue+0x1c>
    102c:	75 c0       	rjmp	.+234    	; 0x1118 <DIO_enuTogglePinVlaue+0x106>
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 30       	cpi	r24, 0x08	; 8
    1032:	08 f0       	brcs	.+2      	; 0x1036 <DIO_enuTogglePinVlaue+0x24>
    1034:	71 c0       	rjmp	.+226    	; 0x1118 <DIO_enuTogglePinVlaue+0x106>
    {
    	switch(Copy_u8GroupID)
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3d 83       	std	Y+5, r19	; 0x05
    103e:	2c 83       	std	Y+4, r18	; 0x04
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	91 05       	cpc	r25, r1
    1048:	49 f1       	breq	.+82     	; 0x109c <DIO_enuTogglePinVlaue+0x8a>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	2c f4       	brge	.+10     	; 0x105e <DIO_enuTogglePinVlaue+0x4c>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	61 f0       	breq	.+24     	; 0x1074 <DIO_enuTogglePinVlaue+0x62>
    105c:	5a c0       	rjmp	.+180    	; 0x1112 <DIO_enuTogglePinVlaue+0x100>
    105e:	2c 81       	ldd	r18, Y+4	; 0x04
    1060:	3d 81       	ldd	r19, Y+5	; 0x05
    1062:	22 30       	cpi	r18, 0x02	; 2
    1064:	31 05       	cpc	r19, r1
    1066:	71 f1       	breq	.+92     	; 0x10c4 <DIO_enuTogglePinVlaue+0xb2>
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	e9 f1       	breq	.+122    	; 0x10ec <DIO_enuTogglePinVlaue+0xda>
    1072:	4f c0       	rjmp	.+158    	; 0x1112 <DIO_enuTogglePinVlaue+0x100>
    	{
    	case DIO_u8GROUP_A :
    		PORTA ^= (DIO_u8BIT_MASK << Copy_u8PinID);
    1074:	ab e3       	ldi	r26, 0x3B	; 59
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	eb e3       	ldi	r30, 0x3B	; 59
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_enuTogglePinVlaue+0x80>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_enuTogglePinVlaue+0x7c>
    1096:	84 27       	eor	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	3b c0       	rjmp	.+118    	; 0x1112 <DIO_enuTogglePinVlaue+0x100>
    		break;
    	case DIO_u8GROUP_B :
    		PORTB ^= (DIO_u8BIT_MASK << Copy_u8PinID);
    109c:	a8 e3       	ldi	r26, 0x38	; 56
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e8 e3       	ldi	r30, 0x38	; 56
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_enuTogglePinVlaue+0xa8>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_enuTogglePinVlaue+0xa4>
    10be:	84 27       	eor	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	27 c0       	rjmp	.+78     	; 0x1112 <DIO_enuTogglePinVlaue+0x100>
    		break;
    	case DIO_u8GROUP_C:
    		PORTC ^= (DIO_u8BIT_MASK << Copy_u8PinID);
    10c4:	a5 e3       	ldi	r26, 0x35	; 53
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e5 e3       	ldi	r30, 0x35	; 53
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_enuTogglePinVlaue+0xd0>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_enuTogglePinVlaue+0xcc>
    10e6:	84 27       	eor	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	13 c0       	rjmp	.+38     	; 0x1112 <DIO_enuTogglePinVlaue+0x100>
    		break;
    	case DIO_u8GROUP_D:
    		PORTD ^= (DIO_u8BIT_MASK << Copy_u8PinID);
    10ec:	a2 e3       	ldi	r26, 0x32	; 50
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e2 e3       	ldi	r30, 0x32	; 50
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_enuTogglePinVlaue+0xf8>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_enuTogglePinVlaue+0xf4>
    110e:	84 27       	eor	r24, r20
    1110:	8c 93       	st	X, r24
    		break;
    	}

		Local_enuErrorState = ES_OK;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_enuTogglePinVlaue+0x10a>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8GroupID,u8 Copy_u8PortValue)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_enuSetPortValue+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_enuSetPortValue+0x8>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	8a 83       	std	Y+2, r24	; 0x02
    113e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1140:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D )
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	84 30       	cpi	r24, 0x04	; 4
    1146:	a8 f5       	brcc	.+106    	; 0x11b2 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8GroupID)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3d 83       	std	Y+5, r19	; 0x05
    1150:	2c 83       	std	Y+4, r18	; 0x04
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	d1 f0       	breq	.+52     	; 0x1190 <DIO_enuSetPortValue+0x62>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <DIO_enuSetPortValue+0x42>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f0       	breq	.+24     	; 0x1186 <DIO_enuSetPortValue+0x58>
    116e:	1e c0       	rjmp	.+60     	; 0x11ac <DIO_enuSetPortValue+0x7e>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	81 f0       	breq	.+32     	; 0x119a <DIO_enuSetPortValue+0x6c>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	81 f0       	breq	.+32     	; 0x11a4 <DIO_enuSetPortValue+0x76>
    1184:	13 c0       	rjmp	.+38     	; 0x11ac <DIO_enuSetPortValue+0x7e>
		{
		case DIO_u8GROUP_A :
			PORTA = Copy_u8PortValue ;
    1186:	eb e3       	ldi	r30, 0x3B	; 59
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	80 83       	st	Z, r24
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_u8GROUP_B :
			PORTB = Copy_u8PortValue ;
    1190:	e8 e3       	ldi	r30, 0x38	; 56
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	80 83       	st	Z, r24
    1198:	09 c0       	rjmp	.+18     	; 0x11ac <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_u8GROUP_C:
			PORTC = Copy_u8PortValue ;
    119a:	e5 e3       	ldi	r30, 0x35	; 53
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	80 83       	st	Z, r24
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_u8GROUP_D:
			PORTD = Copy_u8PortValue ;
    11a4:	e2 e3       	ldi	r30, 0x32	; 50
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8GroupID,u8 Copy_u8PortDirection)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <DIO_enuSetPortDirection+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_enuSetPortDirection+0x8>
    11d0:	0f 92       	push	r0
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    11da:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D )
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	a8 f5       	brcc	.+106    	; 0x124c <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8GroupID)
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3d 83       	std	Y+5, r19	; 0x05
    11ea:	2c 83       	std	Y+4, r18	; 0x04
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	d1 f0       	breq	.+52     	; 0x122a <DIO_enuSetPortDirection+0x62>
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <DIO_enuSetPortDirection+0x42>
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	9d 81       	ldd	r25, Y+5	; 0x05
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	61 f0       	breq	.+24     	; 0x1220 <DIO_enuSetPortDirection+0x58>
    1208:	1e c0       	rjmp	.+60     	; 0x1246 <DIO_enuSetPortDirection+0x7e>
    120a:	2c 81       	ldd	r18, Y+4	; 0x04
    120c:	3d 81       	ldd	r19, Y+5	; 0x05
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	81 f0       	breq	.+32     	; 0x1234 <DIO_enuSetPortDirection+0x6c>
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	81 f0       	breq	.+32     	; 0x123e <DIO_enuSetPortDirection+0x76>
    121e:	13 c0       	rjmp	.+38     	; 0x1246 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_u8GROUP_A :
			DDRA = Copy_u8PortDirection ;
    1220:	ea e3       	ldi	r30, 0x3A	; 58
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	80 83       	st	Z, r24
    1228:	0e c0       	rjmp	.+28     	; 0x1246 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_u8GROUP_B :
			DDRB = Copy_u8PortDirection ;
    122a:	e7 e3       	ldi	r30, 0x37	; 55
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	80 83       	st	Z, r24
    1232:	09 c0       	rjmp	.+18     	; 0x1246 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_u8GROUP_C:
			DDRC = Copy_u8PortDirection ;
    1234:	e4 e3       	ldi	r30, 0x34	; 52
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	80 83       	st	Z, r24
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_u8GROUP_D:
			DDRD = Copy_u8PortDirection ;
    123e:	e1 e3       	ldi	r30, 0x31	; 49
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1250:	89 81       	ldd	r24, Y+1	; 0x01

}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <EEPROM_ui8ReadByteFromAddress>:

#include "EEPROM.h"
#include <avr/io.h>

u8 EEPROM_ui8ReadByteFromAddress(const u16 u16Address)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <EEPROM_ui8ReadByteFromAddress+0x6>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    1270:	ec e3       	ldi	r30, 0x3C	; 60
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	82 70       	andi	r24, 0x02	; 2
    127c:	90 70       	andi	r25, 0x00	; 0
    127e:	95 95       	asr	r25
    1280:	87 95       	ror	r24
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	a1 f3       	breq	.-24     	; 0x1270 <EEPROM_ui8ReadByteFromAddress+0xe>
	;
	/* Set up address register */
	EEAR = u16Address;
    1288:	ee e3       	ldi	r30, 0x3E	; 62
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	80 83       	st	Z, r24
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    1294:	ac e3       	ldi	r26, 0x3C	; 60
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ec e3       	ldi	r30, 0x3C	; 60
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	81 60       	ori	r24, 0x01	; 1
    12a0:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR;
    12a2:	ed e3       	ldi	r30, 0x3D	; 61
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const u16 uiAddress, u8* dist,const u16 size)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	28 97       	sbiw	r28, 0x08	; 8
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	9c 83       	std	Y+4, r25	; 0x04
    12c8:	8b 83       	std	Y+3, r24	; 0x03
    12ca:	7e 83       	std	Y+6, r23	; 0x06
    12cc:	6d 83       	std	Y+5, r22	; 0x05
    12ce:	58 87       	std	Y+8, r21	; 0x08
    12d0:	4f 83       	std	Y+7, r20	; 0x07
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    12d2:	ec e3       	ldi	r30, 0x3C	; 60
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	82 70       	andi	r24, 0x02	; 2
    12de:	90 70       	andi	r25, 0x00	; 0
    12e0:	95 95       	asr	r25
    12e2:	87 95       	ror	r24
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	91 05       	cpc	r25, r1
    12e8:	a1 f3       	breq	.-24     	; 0x12d2 <EEPROM_vReadBlockFromAddress+0x20>
	;

	u16 counter = 0;//the counter of bytes that are read
    12ea:	1a 82       	std	Y+2, r1	; 0x02
    12ec:	19 82       	std	Y+1, r1	; 0x01
    12ee:	21 c0       	rjmp	.+66     	; 0x1332 <EEPROM_vReadBlockFromAddress+0x80>

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
    12f0:	ee e3       	ldi	r30, 0x3E	; 62
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	2b 81       	ldd	r18, Y+3	; 0x03
    12f6:	3c 81       	ldd	r19, Y+4	; 0x04
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
    1304:	ac e3       	ldi	r26, 0x3C	; 60
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ec e3       	ldi	r30, 0x3C	; 60
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	81 60       	ori	r24, 0x01	; 1
    1310:	8c 93       	st	X, r24
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
    1312:	2d 81       	ldd	r18, Y+5	; 0x05
    1314:	3e 81       	ldd	r19, Y+6	; 0x06
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	d9 01       	movw	r26, r18
    131c:	a8 0f       	add	r26, r24
    131e:	b9 1f       	adc	r27, r25
    1320:	ed e3       	ldi	r30, 0x3D	; 61
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8c 93       	st	X, r24

		counter++;//increase the bytes counter
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
    1332:	29 81       	ldd	r18, Y+1	; 0x01
    1334:	3a 81       	ldd	r19, Y+2	; 0x02
    1336:	8f 81       	ldd	r24, Y+7	; 0x07
    1338:	98 85       	ldd	r25, Y+8	; 0x08
    133a:	28 17       	cp	r18, r24
    133c:	39 07       	cpc	r19, r25
    133e:	c0 f2       	brcs	.-80     	; 0x12f0 <EEPROM_vReadBlockFromAddress+0x3e>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
    1340:	28 96       	adiw	r28, 0x08	; 8
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <EEPROM_vWriteByteToAddress+0x6>
    1358:	0f 92       	push	r0
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    1364:	ec e3       	ldi	r30, 0x3C	; 60
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	82 70       	andi	r24, 0x02	; 2
    1370:	90 70       	andi	r25, 0x00	; 0
    1372:	95 95       	asr	r25
    1374:	87 95       	ror	r24
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	91 05       	cpc	r25, r1
    137a:	a1 f3       	breq	.-24     	; 0x1364 <EEPROM_vWriteByteToAddress+0x12>
	;
	/* Set up address register */
	EEAR = uiAddress;
    137c:	ee e3       	ldi	r30, 0x3E	; 62
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	80 83       	st	Z, r24

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
    1388:	ac e3       	ldi	r26, 0x3C	; 60
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ec e3       	ldi	r30, 0x3C	; 60
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	81 60       	ori	r24, 0x01	; 1
    1394:	8c 93       	st	X, r24
	if (EEDR != uiData)//compare the value read to the value to be written
    1396:	ed e3       	ldi	r30, 0x3D	; 61
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	90 81       	ld	r25, Z
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	98 17       	cp	r25, r24
    13a0:	91 f0       	breq	.+36     	; 0x13c6 <EEPROM_vWriteByteToAddress+0x74>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
    13a2:	ed e3       	ldi	r30, 0x3D	; 61
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	80 83       	st	Z, r24

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
    13aa:	ac e3       	ldi	r26, 0x3C	; 60
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ec e3       	ldi	r30, 0x3C	; 60
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	84 60       	ori	r24, 0x04	; 4
    13b6:	8c 93       	st	X, r24
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
    13b8:	ac e3       	ldi	r26, 0x3C	; 60
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ec e3       	ldi	r30, 0x3C	; 60
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	82 60       	ori	r24, 0x02	; 2
    13c4:	8c 93       	st	X, r24
	else
	{

	}

}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <EEPROM_vWriteBlockToAddress>:

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	28 97       	sbiw	r28, 0x08	; 8
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03
    13ea:	7e 83       	std	Y+6, r23	; 0x06
    13ec:	6d 83       	std	Y+5, r22	; 0x05
    13ee:	58 87       	std	Y+8, r21	; 0x08
    13f0:	4f 83       	std	Y+7, r20	; 0x07
	u16 counter = 0;//Bytes write counter
    13f2:	1a 82       	std	Y+2, r1	; 0x02
    13f4:	19 82       	std	Y+1, r1	; 0x01
    13f6:	48 c0       	rjmp	.+144    	; 0x1488 <EEPROM_vWriteBlockToAddress+0xb6>
	while (counter < size)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1);
    13f8:	ec e3       	ldi	r30, 0x3C	; 60
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	82 70       	andi	r24, 0x02	; 2
    1404:	90 70       	andi	r25, 0x00	; 0
    1406:	95 95       	asr	r25
    1408:	87 95       	ror	r24
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	91 05       	cpc	r25, r1
    140e:	a1 f3       	breq	.-24     	; 0x13f8 <EEPROM_vWriteBlockToAddress+0x26>



		/* Set up address register */
		EEAR = uiAddress + counter;
    1410:	ee e3       	ldi	r30, 0x3E	; 62
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	91 83       	std	Z+1, r25	; 0x01
    1422:	80 83       	st	Z, r24

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
    1424:	ac e3       	ldi	r26, 0x3C	; 60
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ec e3       	ldi	r30, 0x3C	; 60
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	81 60       	ori	r24, 0x01	; 1
    1430:	8c 93       	st	X, r24
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
    1432:	ed e3       	ldi	r30, 0x3D	; 61
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	40 81       	ld	r20, Z
    1438:	2d 81       	ldd	r18, Y+5	; 0x05
    143a:	3e 81       	ldd	r19, Y+6	; 0x06
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	f9 01       	movw	r30, r18
    1442:	e8 0f       	add	r30, r24
    1444:	f9 1f       	adc	r31, r25
    1446:	80 81       	ld	r24, Z
    1448:	48 17       	cp	r20, r24
    144a:	c9 f0       	breq	.+50     	; 0x147e <EEPROM_vWriteBlockToAddress+0xac>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
    144c:	ad e3       	ldi	r26, 0x3D	; 61
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	2d 81       	ldd	r18, Y+5	; 0x05
    1452:	3e 81       	ldd	r19, Y+6	; 0x06
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	f9 01       	movw	r30, r18
    145a:	e8 0f       	add	r30, r24
    145c:	f9 1f       	adc	r31, r25
    145e:	80 81       	ld	r24, Z
    1460:	8c 93       	st	X, r24

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
    1462:	ac e3       	ldi	r26, 0x3C	; 60
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ec e3       	ldi	r30, 0x3C	; 60
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	84 60       	ori	r24, 0x04	; 4
    146e:	8c 93       	st	X, r24
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
    1470:	ac e3       	ldi	r26, 0x3C	; 60
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ec e3       	ldi	r30, 0x3C	; 60
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	8c 93       	st	X, r24
		}
		else
		{

		}
		counter++;//increase bytes counter
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
	u16 counter = 0;//Bytes write counter
	while (counter < size)
    1488:	29 81       	ldd	r18, Y+1	; 0x01
    148a:	3a 81       	ldd	r19, Y+2	; 0x02
    148c:	8f 81       	ldd	r24, Y+7	; 0x07
    148e:	98 85       	ldd	r25, Y+8	; 0x08
    1490:	28 17       	cp	r18, r24
    1492:	39 07       	cpc	r19, r25
    1494:	08 f4       	brcc	.+2      	; 0x1498 <EEPROM_vWriteBlockToAddress+0xc6>
    1496:	b0 cf       	rjmp	.-160    	; 0x13f8 <EEPROM_vWriteBlockToAddress+0x26>
		{

		}
		counter++;//increase bytes counter
	}
	LCD_enuWriteIntegerNumber(85);
    1498:	85 e5       	ldi	r24, 0x55	; 85
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <LCD_enuWriteIntegerNumber>
}
    14a0:	28 96       	adiw	r28, 0x08	; 8
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <EEPROM_voidWriteByte>:

#include "EEPROM_private.h"
#include "EEPROM_interface.h"

void EEPROM_voidWriteByte(u16 Copy_u16Address , u8 Copy_u8Data )
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <EEPROM_voidWriteByte+0x6>
    14b8:	0f 92       	push	r0
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(((EECR & (BIT_MASK << EECR_EEWE)) >> EECR_EEWE )== 1);
    14c4:	ec e3       	ldi	r30, 0x3C	; 60
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	82 70       	andi	r24, 0x02	; 2
    14d0:	90 70       	andi	r25, 0x00	; 0
    14d2:	95 95       	asr	r25
    14d4:	87 95       	ror	r24
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	a1 f3       	breq	.-24     	; 0x14c4 <EEPROM_voidWriteByte+0x12>

	/* Set up address and data registers */
	EEAR = Copy_u16Address;
    14dc:	ee e3       	ldi	r30, 0x3E	; 62
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	80 83       	st	Z, r24
	EEDR = Copy_u8Data;
    14e8:	ed e3       	ldi	r30, 0x3D	; 61
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	80 83       	st	Z, r24

	/* Write logical one to EEMWE */
//	SET_BIT(EECR,EECR_EEMWE);
	asm("SBI 0x1C,2");
    14f0:	e2 9a       	sbi	0x1c, 2	; 28

	/* Start eeprom write by setting EEWE */
//	SET_BIT(EECR,EECR_EEWE);
	asm("SBI 0x1C,1");
    14f2:	e1 9a       	sbi	0x1c, 1	; 28

}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <EEPROM_u8ReadByte>:

u8  EEPROM_u8ReadByte(u16 Copy_u16Address)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <EEPROM_u8ReadByte+0x6>
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(((EECR & (BIT_MASK << EECR_EEWE)) >> EECR_EEWE )== 1);
    150e:	ec e3       	ldi	r30, 0x3C	; 60
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	82 70       	andi	r24, 0x02	; 2
    151a:	90 70       	andi	r25, 0x00	; 0
    151c:	95 95       	asr	r25
    151e:	87 95       	ror	r24
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	a1 f3       	breq	.-24     	; 0x150e <EEPROM_u8ReadByte+0xe>

	/* Set up address register */
	EEAR = Copy_u16Address;
    1526:	ee e3       	ldi	r30, 0x3E	; 62
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24

	/* Start eeprom read by writing EERE */
	SET_BIT(EECR,EECR_EERE);
    1532:	ac e3       	ldi	r26, 0x3C	; 60
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	ec e3       	ldi	r30, 0x3C	; 60
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	81 60       	ori	r24, 0x01	; 1
    153e:	8c 93       	st	X, r24

	/* Return data from data register */
	return EEDR;
    1540:	ed e3       	ldi	r30, 0x3D	; 61
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z

}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <EEPROM_voidWriteBlock>:

void EEPROM_voidWriteBlock(u16 Copy_u16Address,u8 Copy_Au8Data[],u16 Copy_u16Size)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	28 97       	sbiw	r28, 0x08	; 8
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	9c 83       	std	Y+4, r25	; 0x04
    1566:	8b 83       	std	Y+3, r24	; 0x03
    1568:	7e 83       	std	Y+6, r23	; 0x06
    156a:	6d 83       	std	Y+5, r22	; 0x05
    156c:	58 87       	std	Y+8, r21	; 0x08
    156e:	4f 83       	std	Y+7, r20	; 0x07
	u16 Local_u16counter = 0;        /*Bytes write counter*/
    1570:	1a 82       	std	Y+2, r1	; 0x02
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	48 c0       	rjmp	.+144    	; 0x1606 <EEPROM_voidWriteBlock+0xb6>

	while (Local_u16counter < Copy_u16Size)
	{
		/* Wait for completion of previous write */
		while(((EECR & (BIT_MASK << EECR_EEWE)) >> EECR_EEWE ) == 1);
    1576:	ec e3       	ldi	r30, 0x3C	; 60
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	82 70       	andi	r24, 0x02	; 2
    1582:	90 70       	andi	r25, 0x00	; 0
    1584:	95 95       	asr	r25
    1586:	87 95       	ror	r24
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 05       	cpc	r25, r1
    158c:	a1 f3       	breq	.-24     	; 0x1576 <EEPROM_voidWriteBlock+0x26>

		/* Set up address register */
		EEAR = Copy_u16Address + Local_u16counter;
    158e:	ee e3       	ldi	r30, 0x3E	; 62
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	82 0f       	add	r24, r18
    159c:	93 1f       	adc	r25, r19
    159e:	91 83       	std	Z+1, r25	; 0x01
    15a0:	80 83       	st	Z, r24

		/* Read the byte in the address of EEAR */
		SET_BIT(EECR,EECR_EERE);
    15a2:	ac e3       	ldi	r26, 0x3C	; 60
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ec e3       	ldi	r30, 0x3C	; 60
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	81 60       	ori	r24, 0x01	; 1
    15ae:	8c 93       	st	X, r24

		if (EEDR != (*(Copy_Au8Data + Local_u16counter)))   /* Compare the value read to the value to be written */
    15b0:	ed e3       	ldi	r30, 0x3D	; 61
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	40 81       	ld	r20, Z
    15b6:	2d 81       	ldd	r18, Y+5	; 0x05
    15b8:	3e 81       	ldd	r19, Y+6	; 0x06
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	f9 01       	movw	r30, r18
    15c0:	e8 0f       	add	r30, r24
    15c2:	f9 1f       	adc	r31, r25
    15c4:	80 81       	ld	r24, Z
    15c6:	48 17       	cp	r20, r24
    15c8:	c9 f0       	breq	.+50     	; 0x15fc <EEPROM_voidWriteBlock+0xac>
		{ /* if they are not equal then write the data */
			EEDR = *(Copy_Au8Data + Local_u16counter);      /*move the data to EEDR*/
    15ca:	ad e3       	ldi	r26, 0x3D	; 61
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	2d 81       	ldd	r18, Y+5	; 0x05
    15d0:	3e 81       	ldd	r19, Y+6	; 0x06
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	f9 01       	movw	r30, r18
    15d8:	e8 0f       	add	r30, r24
    15da:	f9 1f       	adc	r31, r25
    15dc:	80 81       	ld	r24, Z
    15de:	8c 93       	st	X, r24

			/* Write logical one to EEMWE */
			SET_BIT(EECR,EECR_EEMWE);
    15e0:	ac e3       	ldi	r26, 0x3C	; 60
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ec e3       	ldi	r30, 0x3C	; 60
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	84 60       	ori	r24, 0x04	; 4
    15ec:	8c 93       	st	X, r24

			/* Start EEPROM write by setting EEWE */
			SET_BIT(EECR,EECR_EEWE);
    15ee:	ac e3       	ldi	r26, 0x3C	; 60
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ec e3       	ldi	r30, 0x3C	; 60
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	82 60       	ori	r24, 0x02	; 2
    15fa:	8c 93       	st	X, r24
		}
		else
		{
			/* Do Nothing */
		}
		Local_u16counter++;                                /*increase bytes counter*/
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01

void EEPROM_voidWriteBlock(u16 Copy_u16Address,u8 Copy_Au8Data[],u16 Copy_u16Size)
{
	u16 Local_u16counter = 0;        /*Bytes write counter*/

	while (Local_u16counter < Copy_u16Size)
    1606:	29 81       	ldd	r18, Y+1	; 0x01
    1608:	3a 81       	ldd	r19, Y+2	; 0x02
    160a:	8f 81       	ldd	r24, Y+7	; 0x07
    160c:	98 85       	ldd	r25, Y+8	; 0x08
    160e:	28 17       	cp	r18, r24
    1610:	39 07       	cpc	r19, r25
    1612:	08 f4       	brcc	.+2      	; 0x1616 <EEPROM_voidWriteBlock+0xc6>
    1614:	b0 cf       	rjmp	.-160    	; 0x1576 <EEPROM_voidWriteBlock+0x26>
		{
			/* Do Nothing */
		}
		Local_u16counter++;                                /*increase bytes counter*/
	}
}
    1616:	28 96       	adiw	r28, 0x08	; 8
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <EEPROM_voidReadBlock>:

void EEPROM_voidReadBlock( u16 u16Address, u8 Copy_Au8Data[],u16 Copy_u16Size)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	28 97       	sbiw	r28, 0x08	; 8
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	8b 83       	std	Y+3, r24	; 0x03
    1640:	7e 83       	std	Y+6, r23	; 0x06
    1642:	6d 83       	std	Y+5, r22	; 0x05
    1644:	58 87       	std	Y+8, r21	; 0x08
    1646:	4f 83       	std	Y+7, r20	; 0x07
	u16 Local_u16Counter = 0;           /* the counter of bytes that are read */
    1648:	1a 82       	std	Y+2, r1	; 0x02
    164a:	19 82       	std	Y+1, r1	; 0x01

	/* Wait for completion of previous write */
	while(((EECR & (BIT_MASK << EECR_EEWE)) >> EECR_EEWE ) == 1);
    164c:	ec e3       	ldi	r30, 0x3C	; 60
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	82 70       	andi	r24, 0x02	; 2
    1658:	90 70       	andi	r25, 0x00	; 0
    165a:	95 95       	asr	r25
    165c:	87 95       	ror	r24
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	a1 f3       	breq	.-24     	; 0x164c <EEPROM_voidReadBlock+0x24>
    1664:	21 c0       	rjmp	.+66     	; 0x16a8 <EEPROM_voidReadBlock+0x80>

	while (Local_u16Counter < Copy_u16Size) /*loop until move all bytes to the given array*/
	{
		/* Set up address register */
		EEAR = u16Address + Local_u16Counter;
    1666:	ee e3       	ldi	r30, 0x3E	; 62
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	2b 81       	ldd	r18, Y+3	; 0x03
    166c:	3c 81       	ldd	r19, Y+4	; 0x04
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	82 0f       	add	r24, r18
    1674:	93 1f       	adc	r25, r19
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	80 83       	st	Z, r24

		/* Start EEPROM read by writing EERE */
		SET_BIT(EECR,EECR_EERE);
    167a:	ac e3       	ldi	r26, 0x3C	; 60
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ec e3       	ldi	r30, 0x3C	; 60
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	81 60       	ori	r24, 0x01	; 1
    1686:	8c 93       	st	X, r24

		/* move data from data register to the array */
		*(Copy_Au8Data + Local_u16Counter) = EEDR;
    1688:	2d 81       	ldd	r18, Y+5	; 0x05
    168a:	3e 81       	ldd	r19, Y+6	; 0x06
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	d9 01       	movw	r26, r18
    1692:	a8 0f       	add	r26, r24
    1694:	b9 1f       	adc	r27, r25
    1696:	ed e3       	ldi	r30, 0x3D	; 61
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8c 93       	st	X, r24

		Local_u16Counter++;//increase the bytes counter
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
	u16 Local_u16Counter = 0;           /* the counter of bytes that are read */

	/* Wait for completion of previous write */
	while(((EECR & (BIT_MASK << EECR_EEWE)) >> EECR_EEWE ) == 1);

	while (Local_u16Counter < Copy_u16Size) /*loop until move all bytes to the given array*/
    16a8:	29 81       	ldd	r18, Y+1	; 0x01
    16aa:	3a 81       	ldd	r19, Y+2	; 0x02
    16ac:	8f 81       	ldd	r24, Y+7	; 0x07
    16ae:	98 85       	ldd	r25, Y+8	; 0x08
    16b0:	28 17       	cp	r18, r24
    16b2:	39 07       	cpc	r19, r25
    16b4:	c0 f2       	brcs	.-80     	; 0x1666 <EEPROM_voidReadBlock+0x3e>
		/* move data from data register to the array */
		*(Copy_Au8Data + Local_u16Counter) = EEDR;

		Local_u16Counter++;//increase the bytes counter
	}
}
    16b6:	28 96       	adiw	r28, 0x08	; 8
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <LCD_enuSetAllDirection>:
#include "LCD_configuration.h"
#include "LCD_interface.h"
#include "LCD_private.h"

ES_t LCD_enuSetAllDirection(void)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    16d2:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinDirection( LCD_RS_GRP , LCD_RS_PIN , DIO_u8OUTPUT );
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection( LCD_RW_GRP , LCD_RW_PIN , DIO_u8OUTPUT );
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection( LCD_ENABLE_GRP , LCD_ENABLE_PIN , DIO_u8OUTPUT );
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	63 e0       	ldi	r22, 0x03	; 3
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuSetPinDirection>

	DIO_enuSetPortDirection(LCD_DATA_GRP,0xff);

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinDirection( LCD_D4_GRP , LCD_D4_PIN , DIO_u8OUTPUT );
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	64 e0       	ldi	r22, 0x04	; 4
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection( LCD_D5_GRP , LCD_D5_PIN , DIO_u8OUTPUT );
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	65 e0       	ldi	r22, 0x05	; 5
    1700:	41 e0       	ldi	r20, 0x01	; 1
    1702:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection( LCD_D6_GRP , LCD_D6_PIN , DIO_u8OUTPUT );
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	66 e0       	ldi	r22, 0x06	; 6
    170a:	41 e0       	ldi	r20, 0x01	; 1
    170c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection( LCD_D7_GRP , LCD_D7_PIN , DIO_u8OUTPUT );
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	67 e0       	ldi	r22, 0x07	; 7
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuSetPinDirection>

#endif


	return Local_enuErrorState;
    171a:	89 81       	ldd	r24, Y+1	; 0x01

}
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <LCD_enuInit>:

ES_t LCD_enuInit(void)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	e9 97       	sbiw	r28, 0x39	; 57
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1738:	19 ae       	std	Y+57, r1	; 0x39

	LCD_enuSetAllDirection();
    173a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_enuSetAllDirection>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a0 e2       	ldi	r26, 0x20	; 32
    1744:	b2 e4       	ldi	r27, 0x42	; 66
    1746:	8d ab       	std	Y+53, r24	; 0x35
    1748:	9e ab       	std	Y+54, r25	; 0x36
    174a:	af ab       	std	Y+55, r26	; 0x37
    174c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174e:	6d a9       	ldd	r22, Y+53	; 0x35
    1750:	7e a9       	ldd	r23, Y+54	; 0x36
    1752:	8f a9       	ldd	r24, Y+55	; 0x37
    1754:	98 ad       	ldd	r25, Y+56	; 0x38
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	4a e7       	ldi	r20, 0x7A	; 122
    175c:	55 e4       	ldi	r21, 0x45	; 69
    175e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	89 ab       	std	Y+49, r24	; 0x31
    1768:	9a ab       	std	Y+50, r25	; 0x32
    176a:	ab ab       	std	Y+51, r26	; 0x33
    176c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    176e:	69 a9       	ldd	r22, Y+49	; 0x31
    1770:	7a a9       	ldd	r23, Y+50	; 0x32
    1772:	8b a9       	ldd	r24, Y+51	; 0x33
    1774:	9c a9       	ldd	r25, Y+52	; 0x34
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	2c f4       	brge	.+10     	; 0x1790 <LCD_enuInit+0x6c>
		__ticks = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	98 ab       	std	Y+48, r25	; 0x30
    178c:	8f a7       	std	Y+47, r24	; 0x2f
    178e:	3f c0       	rjmp	.+126    	; 0x180e <LCD_enuInit+0xea>
	else if (__tmp > 65535)
    1790:	69 a9       	ldd	r22, Y+49	; 0x31
    1792:	7a a9       	ldd	r23, Y+50	; 0x32
    1794:	8b a9       	ldd	r24, Y+51	; 0x33
    1796:	9c a9       	ldd	r25, Y+52	; 0x34
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	57 e4       	ldi	r21, 0x47	; 71
    17a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	4c f5       	brge	.+82     	; 0x17fa <LCD_enuInit+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a8:	6d a9       	ldd	r22, Y+53	; 0x35
    17aa:	7e a9       	ldd	r23, Y+54	; 0x36
    17ac:	8f a9       	ldd	r24, Y+55	; 0x37
    17ae:	98 ad       	ldd	r25, Y+56	; 0x38
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e2       	ldi	r20, 0x20	; 32
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	98 ab       	std	Y+48, r25	; 0x30
    17ce:	8f a7       	std	Y+47, r24	; 0x2f
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <LCD_enuInit+0xcc>
    17d2:	80 e9       	ldi	r24, 0x90	; 144
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	9e a7       	std	Y+46, r25	; 0x2e
    17d8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17da:	8d a5       	ldd	r24, Y+45	; 0x2d
    17dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_enuInit+0xba>
    17e2:	9e a7       	std	Y+46, r25	; 0x2e
    17e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	98 ab       	std	Y+48, r25	; 0x30
    17ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f2:	98 a9       	ldd	r25, Y+48	; 0x30
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	69 f7       	brne	.-38     	; 0x17d2 <LCD_enuInit+0xae>
    17f8:	14 c0       	rjmp	.+40     	; 0x1822 <LCD_enuInit+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fa:	69 a9       	ldd	r22, Y+49	; 0x31
    17fc:	7a a9       	ldd	r23, Y+50	; 0x32
    17fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1800:	9c a9       	ldd	r25, Y+52	; 0x34
    1802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	98 ab       	std	Y+48, r25	; 0x30
    180c:	8f a7       	std	Y+47, r24	; 0x2f
    180e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1810:	98 a9       	ldd	r25, Y+48	; 0x30
    1812:	9c a7       	std	Y+44, r25	; 0x2c
    1814:	8b a7       	std	Y+43, r24	; 0x2b
    1816:	8b a5       	ldd	r24, Y+43	; 0x2b
    1818:	9c a5       	ldd	r25, Y+44	; 0x2c
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_enuInit+0xf6>
    181e:	9c a7       	std	Y+44, r25	; 0x2c
    1820:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_enuWriteCommand(0b00111000);

#elif LCD_MODE == FOUR_BIT

	/* Set RS to zero */
	DIO_enuSetPinValue( LCD_RS_GRP , LCD_RS_PIN , DIO_u8LOW_LEVEL );
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>

	/* Function Set */
	LCD_enuSetHalfPort(0b0010);
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_enuSetHalfPort>
	LCD_enuSetEnablePulse();
    1832:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <LCD_enuSetEnablePulse>

	LCD_enuSetHalfPort(0b0010);
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_enuSetHalfPort>
	LCD_enuSetEnablePulse();
    183c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <LCD_enuSetEnablePulse>

	LCD_enuSetHalfPort(0b1000);
    1840:	88 e0       	ldi	r24, 0x08	; 8
    1842:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <LCD_enuSetHalfPort>
	LCD_enuSetEnablePulse();
    1846:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <LCD_enuSetEnablePulse>
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e8       	ldi	r26, 0x80	; 128
    1850:	bf e3       	ldi	r27, 0x3F	; 63
    1852:	8f a3       	std	Y+39, r24	; 0x27
    1854:	98 a7       	std	Y+40, r25	; 0x28
    1856:	a9 a7       	std	Y+41, r26	; 0x29
    1858:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185a:	6f a1       	ldd	r22, Y+39	; 0x27
    185c:	78 a5       	ldd	r23, Y+40	; 0x28
    185e:	89 a5       	ldd	r24, Y+41	; 0x29
    1860:	9a a5       	ldd	r25, Y+42	; 0x2a
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	4a e7       	ldi	r20, 0x7A	; 122
    1868:	55 e4       	ldi	r21, 0x45	; 69
    186a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8b a3       	std	Y+35, r24	; 0x23
    1874:	9c a3       	std	Y+36, r25	; 0x24
    1876:	ad a3       	std	Y+37, r26	; 0x25
    1878:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    187a:	6b a1       	ldd	r22, Y+35	; 0x23
    187c:	7c a1       	ldd	r23, Y+36	; 0x24
    187e:	8d a1       	ldd	r24, Y+37	; 0x25
    1880:	9e a1       	ldd	r25, Y+38	; 0x26
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    188e:	88 23       	and	r24, r24
    1890:	2c f4       	brge	.+10     	; 0x189c <LCD_enuInit+0x178>
		__ticks = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9a a3       	std	Y+34, r25	; 0x22
    1898:	89 a3       	std	Y+33, r24	; 0x21
    189a:	3f c0       	rjmp	.+126    	; 0x191a <LCD_enuInit+0x1f6>
	else if (__tmp > 65535)
    189c:	6b a1       	ldd	r22, Y+35	; 0x23
    189e:	7c a1       	ldd	r23, Y+36	; 0x24
    18a0:	8d a1       	ldd	r24, Y+37	; 0x25
    18a2:	9e a1       	ldd	r25, Y+38	; 0x26
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	3f ef       	ldi	r19, 0xFF	; 255
    18a8:	4f e7       	ldi	r20, 0x7F	; 127
    18aa:	57 e4       	ldi	r21, 0x47	; 71
    18ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18b0:	18 16       	cp	r1, r24
    18b2:	4c f5       	brge	.+82     	; 0x1906 <LCD_enuInit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b4:	6f a1       	ldd	r22, Y+39	; 0x27
    18b6:	78 a5       	ldd	r23, Y+40	; 0x28
    18b8:	89 a5       	ldd	r24, Y+41	; 0x29
    18ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9a a3       	std	Y+34, r25	; 0x22
    18da:	89 a3       	std	Y+33, r24	; 0x21
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <LCD_enuInit+0x1d8>
    18de:	80 e9       	ldi	r24, 0x90	; 144
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	98 a3       	std	Y+32, r25	; 0x20
    18e4:	8f 8f       	std	Y+31, r24	; 0x1f
    18e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e8:	98 a1       	ldd	r25, Y+32	; 0x20
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_enuInit+0x1c6>
    18ee:	98 a3       	std	Y+32, r25	; 0x20
    18f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f2:	89 a1       	ldd	r24, Y+33	; 0x21
    18f4:	9a a1       	ldd	r25, Y+34	; 0x22
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	9a a3       	std	Y+34, r25	; 0x22
    18fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fc:	89 a1       	ldd	r24, Y+33	; 0x21
    18fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	69 f7       	brne	.-38     	; 0x18de <LCD_enuInit+0x1ba>
    1904:	14 c0       	rjmp	.+40     	; 0x192e <LCD_enuInit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1906:	6b a1       	ldd	r22, Y+35	; 0x23
    1908:	7c a1       	ldd	r23, Y+36	; 0x24
    190a:	8d a1       	ldd	r24, Y+37	; 0x25
    190c:	9e a1       	ldd	r25, Y+38	; 0x26
    190e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	9a a3       	std	Y+34, r25	; 0x22
    1918:	89 a3       	std	Y+33, r24	; 0x21
    191a:	89 a1       	ldd	r24, Y+33	; 0x21
    191c:	9a a1       	ldd	r25, Y+34	; 0x22
    191e:	9e 8f       	std	Y+30, r25	; 0x1e
    1920:	8d 8f       	std	Y+29, r24	; 0x1d
    1922:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1924:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_enuInit+0x202>
    192a:	9e 8f       	std	Y+30, r25	; 0x1e
    192c:	8d 8f       	std	Y+29, r24	; 0x1d

#endif

	_delay_ms(1);
	/* Display ON/OFF Control */
	LCD_enuWriteCommand(0b00001100);
    192e:	8c e0       	ldi	r24, 0x0C	; 12
    1930:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_enuWriteCommand>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a0 e8       	ldi	r26, 0x80	; 128
    193a:	bf e3       	ldi	r27, 0x3F	; 63
    193c:	89 8f       	std	Y+25, r24	; 0x19
    193e:	9a 8f       	std	Y+26, r25	; 0x1a
    1940:	ab 8f       	std	Y+27, r26	; 0x1b
    1942:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1944:	69 8d       	ldd	r22, Y+25	; 0x19
    1946:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1948:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	4a e7       	ldi	r20, 0x7A	; 122
    1952:	55 e4       	ldi	r21, 0x45	; 69
    1954:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	8d 8b       	std	Y+21, r24	; 0x15
    195e:	9e 8b       	std	Y+22, r25	; 0x16
    1960:	af 8b       	std	Y+23, r26	; 0x17
    1962:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1964:	6d 89       	ldd	r22, Y+21	; 0x15
    1966:	7e 89       	ldd	r23, Y+22	; 0x16
    1968:	8f 89       	ldd	r24, Y+23	; 0x17
    196a:	98 8d       	ldd	r25, Y+24	; 0x18
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1978:	88 23       	and	r24, r24
    197a:	2c f4       	brge	.+10     	; 0x1986 <LCD_enuInit+0x262>
		__ticks = 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9c 8b       	std	Y+20, r25	; 0x14
    1982:	8b 8b       	std	Y+19, r24	; 0x13
    1984:	3f c0       	rjmp	.+126    	; 0x1a04 <LCD_enuInit+0x2e0>
	else if (__tmp > 65535)
    1986:	6d 89       	ldd	r22, Y+21	; 0x15
    1988:	7e 89       	ldd	r23, Y+22	; 0x16
    198a:	8f 89       	ldd	r24, Y+23	; 0x17
    198c:	98 8d       	ldd	r25, Y+24	; 0x18
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	3f ef       	ldi	r19, 0xFF	; 255
    1992:	4f e7       	ldi	r20, 0x7F	; 127
    1994:	57 e4       	ldi	r21, 0x47	; 71
    1996:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    199a:	18 16       	cp	r1, r24
    199c:	4c f5       	brge	.+82     	; 0x19f0 <LCD_enuInit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199e:	69 8d       	ldd	r22, Y+25	; 0x19
    19a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e2       	ldi	r20, 0x20	; 32
    19ac:	51 e4       	ldi	r21, 0x41	; 65
    19ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	8b 8b       	std	Y+19, r24	; 0x13
    19c6:	0f c0       	rjmp	.+30     	; 0x19e6 <LCD_enuInit+0x2c2>
    19c8:	80 e9       	ldi	r24, 0x90	; 144
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	9a 8b       	std	Y+18, r25	; 0x12
    19ce:	89 8b       	std	Y+17, r24	; 0x11
    19d0:	89 89       	ldd	r24, Y+17	; 0x11
    19d2:	9a 89       	ldd	r25, Y+18	; 0x12
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_enuInit+0x2b0>
    19d8:	9a 8b       	std	Y+18, r25	; 0x12
    19da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19dc:	8b 89       	ldd	r24, Y+19	; 0x13
    19de:	9c 89       	ldd	r25, Y+20	; 0x14
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9c 8b       	std	Y+20, r25	; 0x14
    19e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e6:	8b 89       	ldd	r24, Y+19	; 0x13
    19e8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	69 f7       	brne	.-38     	; 0x19c8 <LCD_enuInit+0x2a4>
    19ee:	14 c0       	rjmp	.+40     	; 0x1a18 <LCD_enuInit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	6d 89       	ldd	r22, Y+21	; 0x15
    19f2:	7e 89       	ldd	r23, Y+22	; 0x16
    19f4:	8f 89       	ldd	r24, Y+23	; 0x17
    19f6:	98 8d       	ldd	r25, Y+24	; 0x18
    19f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9c 8b       	std	Y+20, r25	; 0x14
    1a02:	8b 8b       	std	Y+19, r24	; 0x13
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	98 8b       	std	Y+16, r25	; 0x10
    1a0a:	8f 87       	std	Y+15, r24	; 0x0f
    1a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0e:	98 89       	ldd	r25, Y+16	; 0x10
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <LCD_enuInit+0x2ec>
    1a14:	98 8b       	std	Y+16, r25	; 0x10
    1a16:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/* Display Clear */
	LCD_enuWriteCommand(0b00000001);
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_enuWriteCommand>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	8b 87       	std	Y+11, r24	; 0x0b
    1a28:	9c 87       	std	Y+12, r25	; 0x0c
    1a2a:	ad 87       	std	Y+13, r26	; 0x0d
    1a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a e7       	ldi	r20, 0x7A	; 122
    1a3c:	55 e4       	ldi	r21, 0x45	; 69
    1a3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8f 83       	std	Y+7, r24	; 0x07
    1a48:	98 87       	std	Y+8, r25	; 0x08
    1a4a:	a9 87       	std	Y+9, r26	; 0x09
    1a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <LCD_enuInit+0x34c>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <LCD_enuInit+0x3ca>
	else if (__tmp > 65535)
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <LCD_enuInit+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9e 83       	std	Y+6, r25	; 0x06
    1aae:	8d 83       	std	Y+5, r24	; 0x05
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <LCD_enuInit+0x3ac>
    1ab2:	80 e9       	ldi	r24, 0x90	; 144
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	9c 83       	std	Y+4, r25	; 0x04
    1ab8:	8b 83       	std	Y+3, r24	; 0x03
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_enuInit+0x39a>
    1ac2:	9c 83       	std	Y+4, r25	; 0x04
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <LCD_enuInit+0x38e>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <LCD_enuInit+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6f 81       	ldd	r22, Y+7	; 0x07
    1adc:	78 85       	ldd	r23, Y+8	; 0x08
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_enuInit+0x3d6>
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	return Local_enuErrorState;
    1b02:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1b04:	e9 96       	adiw	r28, 0x39	; 57
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8CommandValue)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <LCD_enuWriteCommand+0x6>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1b22:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS to zero */
	DIO_enuSetPinValue( LCD_RS_GRP , LCD_RS_PIN , DIO_u8LOW_LEVEL );
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	/* Write Command  */
	LCD_enuWriteNLatch(Copy_u8CommandValue);
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8DataValue)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <LCD_enuWriteData+0x6>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1b4c:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS to one */
	DIO_enuSetPinValue( LCD_RS_GRP , LCD_RS_PIN , DIO_u8HIGH_LEVEL );
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8DataValue);
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch(u8 Copy_u8Byte)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <LCD_enuWriteNLatch+0x6>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    1b76:	19 82       	std	Y+1, r1	; 0x01

	/* Set RW to zero */
	DIO_enuSetPinValue( LCD_RW_GRP , LCD_RW_PIN , DIO_u8LOW_LEVEL );
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	LCD_enuSetEnablePulse();

#elif LCD_MODE == FOUR_BIT

	/* Send higher half of byte */
	DIO_enuSetPinValue( LCD_D4_GRP , LCD_D4_PIN , (Copy_u8Byte >> LCD_D4_PIN) & DIO_u8BIT_MASK );
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	82 95       	swap	r24
    1b86:	8f 70       	andi	r24, 0x0F	; 15
    1b88:	98 2f       	mov	r25, r24
    1b8a:	91 70       	andi	r25, 0x01	; 1
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	64 e0       	ldi	r22, 0x04	; 4
    1b90:	49 2f       	mov	r20, r25
    1b92:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue( LCD_D5_GRP , LCD_D5_PIN , (Copy_u8Byte >> LCD_D5_PIN) & DIO_u8BIT_MASK );
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	82 95       	swap	r24
    1b9a:	86 95       	lsr	r24
    1b9c:	87 70       	andi	r24, 0x07	; 7
    1b9e:	98 2f       	mov	r25, r24
    1ba0:	91 70       	andi	r25, 0x01	; 1
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	65 e0       	ldi	r22, 0x05	; 5
    1ba6:	49 2f       	mov	r20, r25
    1ba8:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue( LCD_D6_GRP , LCD_D6_PIN , (Copy_u8Byte >> LCD_D6_PIN) & DIO_u8BIT_MASK );
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	82 95       	swap	r24
    1bb0:	86 95       	lsr	r24
    1bb2:	86 95       	lsr	r24
    1bb4:	83 70       	andi	r24, 0x03	; 3
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	91 70       	andi	r25, 0x01	; 1
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	66 e0       	ldi	r22, 0x06	; 6
    1bbe:	49 2f       	mov	r20, r25
    1bc0:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue( LCD_D7_GRP , LCD_D7_PIN , (Copy_u8Byte >> LCD_D7_PIN) & DIO_u8BIT_MASK );
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	99 27       	eor	r25, r25
    1bcc:	99 1f       	adc	r25, r25
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	67 e0       	ldi	r22, 0x07	; 7
    1bd2:	49 2f       	mov	r20, r25
    1bd4:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>

	/* Set Enable Pulse */
	LCD_enuSetEnablePulse();
    1bd8:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <LCD_enuSetEnablePulse>

	/* Send lower half of byte */

	DIO_enuSetPinValue( LCD_D4_GRP , LCD_D4_PIN , (Copy_u8Byte >> LCD_D0_PIN) & DIO_u8BIT_MASK );
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	98 2f       	mov	r25, r24
    1be0:	91 70       	andi	r25, 0x01	; 1
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	64 e0       	ldi	r22, 0x04	; 4
    1be6:	49 2f       	mov	r20, r25
    1be8:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue( LCD_D5_GRP , LCD_D5_PIN , (Copy_u8Byte >> LCD_D1_PIN) & DIO_u8BIT_MASK );
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	86 95       	lsr	r24
    1bf0:	98 2f       	mov	r25, r24
    1bf2:	91 70       	andi	r25, 0x01	; 1
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	65 e0       	ldi	r22, 0x05	; 5
    1bf8:	49 2f       	mov	r20, r25
    1bfa:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue( LCD_D6_GRP , LCD_D6_PIN , (Copy_u8Byte >> LCD_D2_PIN) & DIO_u8BIT_MASK );
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	86 95       	lsr	r24
    1c02:	86 95       	lsr	r24
    1c04:	98 2f       	mov	r25, r24
    1c06:	91 70       	andi	r25, 0x01	; 1
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	66 e0       	ldi	r22, 0x06	; 6
    1c0c:	49 2f       	mov	r20, r25
    1c0e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue( LCD_D7_GRP , LCD_D7_PIN , (Copy_u8Byte >> LCD_D3_PIN) & DIO_u8BIT_MASK );
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	86 95       	lsr	r24
    1c16:	86 95       	lsr	r24
    1c18:	86 95       	lsr	r24
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	91 70       	andi	r25, 0x01	; 1
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	67 e0       	ldi	r22, 0x07	; 7
    1c22:	49 2f       	mov	r20, r25
    1c24:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>

	/* Set Enable Pulse */
	LCD_enuSetEnablePulse();
    1c28:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <LCD_enuSetEnablePulse>
	Error : LCD configuration is wrong

#endif


	return Local_enuErrorState;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <LCD_enuSetHalfPort>:

static ES_t LCD_enuSetHalfPort(u8 Copy_u8HalfByte)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <LCD_enuSetHalfPort+0x6>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c44:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue( LCD_D4_GRP , LCD_D4_PIN , (Copy_u8HalfByte >> LCD_D0_PIN) & DIO_u8BIT_MASK );
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	98 2f       	mov	r25, r24
    1c4a:	91 70       	andi	r25, 0x01	; 1
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	64 e0       	ldi	r22, 0x04	; 4
    1c50:	49 2f       	mov	r20, r25
    1c52:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue( LCD_D5_GRP , LCD_D5_PIN , (Copy_u8HalfByte >> LCD_D1_PIN) & DIO_u8BIT_MASK );
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	86 95       	lsr	r24
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	91 70       	andi	r25, 0x01	; 1
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	65 e0       	ldi	r22, 0x05	; 5
    1c62:	49 2f       	mov	r20, r25
    1c64:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue( LCD_D6_GRP , LCD_D6_PIN , (Copy_u8HalfByte >> LCD_D2_PIN) & DIO_u8BIT_MASK );
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	86 95       	lsr	r24
    1c6c:	86 95       	lsr	r24
    1c6e:	98 2f       	mov	r25, r24
    1c70:	91 70       	andi	r25, 0x01	; 1
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	66 e0       	ldi	r22, 0x06	; 6
    1c76:	49 2f       	mov	r20, r25
    1c78:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue( LCD_D7_GRP , LCD_D7_PIN , (Copy_u8HalfByte >> LCD_D3_PIN) & DIO_u8BIT_MASK );
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	86 95       	lsr	r24
    1c80:	86 95       	lsr	r24
    1c82:	86 95       	lsr	r24
    1c84:	98 2f       	mov	r25, r24
    1c86:	91 70       	andi	r25, 0x01	; 1
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	67 e0       	ldi	r22, 0x07	; 7
    1c8c:	49 2f       	mov	r20, r25
    1c8e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>

	return Local_enuErrorState;
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <LCD_enuSetEnablePulse>:

static ES_t LCD_enuSetEnablePulse(void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	6d 97       	sbiw	r28, 0x1d	; 29
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1cb2:	1d 8e       	std	Y+29, r1	; 0x1d

	DIO_enuSetPinValue( LCD_ENABLE_GRP , LCD_ENABLE_PIN , DIO_u8HIGH_LEVEL );
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	63 e0       	ldi	r22, 0x03	; 3
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e8       	ldi	r26, 0x80	; 128
    1cc4:	bf e3       	ldi	r27, 0x3F	; 63
    1cc6:	89 8f       	std	Y+25, r24	; 0x19
    1cc8:	9a 8f       	std	Y+26, r25	; 0x1a
    1cca:	ab 8f       	std	Y+27, r26	; 0x1b
    1ccc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a e7       	ldi	r20, 0x7A	; 122
    1cdc:	55 e4       	ldi	r21, 0x45	; 69
    1cde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8d 8b       	std	Y+21, r24	; 0x15
    1ce8:	9e 8b       	std	Y+22, r25	; 0x16
    1cea:	af 8b       	std	Y+23, r26	; 0x17
    1cec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cee:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <LCD_enuSetEnablePulse+0x72>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9c 8b       	std	Y+20, r25	; 0x14
    1d0c:	8b 8b       	std	Y+19, r24	; 0x13
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <LCD_enuSetEnablePulse+0xf0>
	else if (__tmp > 65535)
    1d10:	6d 89       	ldd	r22, Y+21	; 0x15
    1d12:	7e 89       	ldd	r23, Y+22	; 0x16
    1d14:	8f 89       	ldd	r24, Y+23	; 0x17
    1d16:	98 8d       	ldd	r25, Y+24	; 0x18
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <LCD_enuSetEnablePulse+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <LCD_enuSetEnablePulse+0xd2>
    1d52:	80 e9       	ldi	r24, 0x90	; 144
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	9a 8b       	std	Y+18, r25	; 0x12
    1d58:	89 8b       	std	Y+17, r24	; 0x11
    1d5a:	89 89       	ldd	r24, Y+17	; 0x11
    1d5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_enuSetEnablePulse+0xc0>
    1d62:	9a 8b       	std	Y+18, r25	; 0x12
    1d64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	8b 89       	ldd	r24, Y+19	; 0x13
    1d68:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	9c 8b       	std	Y+20, r25	; 0x14
    1d6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	8b 89       	ldd	r24, Y+19	; 0x13
    1d72:	9c 89       	ldd	r25, Y+20	; 0x14
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <LCD_enuSetEnablePulse+0xb4>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <LCD_enuSetEnablePulse+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d80:	98 8d       	ldd	r25, Y+24	; 0x18
    1d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9c 8b       	std	Y+20, r25	; 0x14
    1d8c:	8b 8b       	std	Y+19, r24	; 0x13
    1d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d90:	9c 89       	ldd	r25, Y+20	; 0x14
    1d92:	98 8b       	std	Y+16, r25	; 0x10
    1d94:	8f 87       	std	Y+15, r24	; 0x0f
    1d96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d98:	98 89       	ldd	r25, Y+16	; 0x10
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_enuSetEnablePulse+0xfc>
    1d9e:	98 8b       	std	Y+16, r25	; 0x10
    1da0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue( LCD_ENABLE_GRP , LCD_ENABLE_PIN , DIO_u8LOW_LEVEL );
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	63 e0       	ldi	r22, 0x03	; 3
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_enuSetPinValue>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e0       	ldi	r26, 0x00	; 0
    1db2:	b0 e4       	ldi	r27, 0x40	; 64
    1db4:	8b 87       	std	Y+11, r24	; 0x0b
    1db6:	9c 87       	std	Y+12, r25	; 0x0c
    1db8:	ad 87       	std	Y+13, r26	; 0x0d
    1dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a e7       	ldi	r20, 0x7A	; 122
    1dca:	55 e4       	ldi	r21, 0x45	; 69
    1dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8f 83       	std	Y+7, r24	; 0x07
    1dd6:	98 87       	std	Y+8, r25	; 0x08
    1dd8:	a9 87       	std	Y+9, r26	; 0x09
    1dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <LCD_enuSetEnablePulse+0x160>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <LCD_enuSetEnablePulse+0x1de>
	else if (__tmp > 65535)
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <LCD_enuSetEnablePulse+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <LCD_enuSetEnablePulse+0x1c0>
    1e40:	80 e9       	ldi	r24, 0x90	; 144
    1e42:	91 e0       	ldi	r25, 0x01	; 1
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_enuSetEnablePulse+0x1ae>
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <LCD_enuSetEnablePulse+0x1a2>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <LCD_enuSetEnablePulse+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_enuSetEnablePulse+0x1ea>
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	return Local_enuErrorState;
    1e90:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    1e92:	6d 96       	adiw	r28, 0x1d	; 29
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char* Copy_pchString)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <LCD_enuWriteString+0x6>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <LCD_enuWriteString+0x8>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1eb4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter=0;
    1eb6:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_pchString != NULL)
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	e9 f0       	breq	.+58     	; 0x1efa <LCD_enuWriteString+0x56>
    1ec0:	0e c0       	rjmp	.+28     	; 0x1ede <LCD_enuWriteString+0x3a>
	{
		while(Copy_pchString[Local_u8Counter] != '\0')
		{
			LCD_enuWriteData(Copy_pchString[Local_u8Counter]);
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	fc 01       	movw	r30, r24
    1ece:	e2 0f       	add	r30, r18
    1ed0:	f3 1f       	adc	r31, r19
    1ed2:	80 81       	ld	r24, Z
    1ed4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_enuWriteData>
			Local_u8Counter++;
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	8f 5f       	subi	r24, 0xFF	; 255
    1edc:	89 83       	std	Y+1, r24	; 0x01
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter=0;

	if( Copy_pchString != NULL)
	{
		while(Copy_pchString[Local_u8Counter] != '\0')
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e2 0f       	add	r30, r18
    1eec:	f3 1f       	adc	r31, r19
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 23       	and	r24, r24
    1ef2:	39 f7       	brne	.-50     	; 0x1ec2 <LCD_enuWriteString+0x1e>
		{
			LCD_enuWriteData(Copy_pchString[Local_u8Counter]);
			Local_u8Counter++;
		}

		Local_enuErrorState = ES_OK;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	8a 83       	std	Y+2, r24	; 0x02
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <LCD_enuWriteString+0x5a>
	}
	else
	{
		Local_enuErrorState = NULL_POINTER;
    1efa:	83 e0       	ldi	r24, 0x03	; 3
    1efc:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <LCD_enuWriteIntegerNumber>:


ES_t LCD_enuWriteIntegerNumber(s32 Copy_s32Number)
{
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	2a 97       	sbiw	r28, 0x0a	; 10
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	6f 83       	std	Y+7, r22	; 0x07
    1f2c:	78 87       	std	Y+8, r23	; 0x08
    1f2e:	89 87       	std	Y+9, r24	; 0x09
    1f30:	9a 87       	std	Y+10, r25	; 0x0a
	ES_t Local_enuErrorState = ES_NOK;
    1f32:	1e 82       	std	Y+6, r1	; 0x06
	u32 Local_u32OppositedNumber=0;
    1f34:	1a 82       	std	Y+2, r1	; 0x02
    1f36:	1b 82       	std	Y+3, r1	; 0x03
    1f38:	1c 82       	std	Y+4, r1	; 0x04
    1f3a:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8CurrentDigit;

	if(Copy_s32Number < 0)
    1f3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3e:	98 85       	ldd	r25, Y+8	; 0x08
    1f40:	a9 85       	ldd	r26, Y+9	; 0x09
    1f42:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f44:	bb 23       	and	r27, r27
    1f46:	0c f0       	brlt	.+2      	; 0x1f4a <LCD_enuWriteIntegerNumber+0x3c>
    1f48:	4a c0       	rjmp	.+148    	; 0x1fde <LCD_enuWriteIntegerNumber+0xd0>
	{
		Copy_s32Number *= -1;
    1f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4c:	98 85       	ldd	r25, Y+8	; 0x08
    1f4e:	a9 85       	ldd	r26, Y+9	; 0x09
    1f50:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f52:	b0 95       	com	r27
    1f54:	a0 95       	com	r26
    1f56:	90 95       	com	r25
    1f58:	81 95       	neg	r24
    1f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5c:	af 4f       	sbci	r26, 0xFF	; 255
    1f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f60:	8f 83       	std	Y+7, r24	; 0x07
    1f62:	98 87       	std	Y+8, r25	; 0x08
    1f64:	a9 87       	std	Y+9, r26	; 0x09
    1f66:	ba 87       	std	Y+10, r27	; 0x0a
		LCD_enuWriteString("-");
    1f68:	80 e6       	ldi	r24, 0x60	; 96
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <LCD_enuWriteString>
    1f70:	36 c0       	rjmp	.+108    	; 0x1fde <LCD_enuWriteIntegerNumber+0xd0>
	}

	while( Copy_s32Number != 0 )
	{
		Local_u32OppositedNumber = Local_u32OppositedNumber * LCD_u8REMINDERNUMBER + Copy_s32Number % LCD_u8REMINDERNUMBER;
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	ac 81       	ldd	r26, Y+4	; 0x04
    1f78:	bd 81       	ldd	r27, Y+5	; 0x05
    1f7a:	2a e0       	ldi	r18, 0x0A	; 10
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 b8 10 	call	0x2170	; 0x2170 <__mulsi3>
    1f8a:	7b 01       	movw	r14, r22
    1f8c:	8c 01       	movw	r16, r24
    1f8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f90:	98 85       	ldd	r25, Y+8	; 0x08
    1f92:	a9 85       	ldd	r26, Y+9	; 0x09
    1f94:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f96:	2a e0       	ldi	r18, 0x0A	; 10
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divmodsi4>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	8e 0d       	add	r24, r14
    1fac:	9f 1d       	adc	r25, r15
    1fae:	a0 1f       	adc	r26, r16
    1fb0:	b1 1f       	adc	r27, r17
    1fb2:	8a 83       	std	Y+2, r24	; 0x02
    1fb4:	9b 83       	std	Y+3, r25	; 0x03
    1fb6:	ac 83       	std	Y+4, r26	; 0x04
    1fb8:	bd 83       	std	Y+5, r27	; 0x05
		Copy_s32Number /= LCD_u8REMINDERNUMBER;
    1fba:	8f 81       	ldd	r24, Y+7	; 0x07
    1fbc:	98 85       	ldd	r25, Y+8	; 0x08
    1fbe:	a9 85       	ldd	r26, Y+9	; 0x09
    1fc0:	ba 85       	ldd	r27, Y+10	; 0x0a
    1fc2:	2a e0       	ldi	r18, 0x0A	; 10
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	50 e0       	ldi	r21, 0x00	; 0
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divmodsi4>
    1fd2:	da 01       	movw	r26, r20
    1fd4:	c9 01       	movw	r24, r18
    1fd6:	8f 83       	std	Y+7, r24	; 0x07
    1fd8:	98 87       	std	Y+8, r25	; 0x08
    1fda:	a9 87       	std	Y+9, r26	; 0x09
    1fdc:	ba 87       	std	Y+10, r27	; 0x0a
	{
		Copy_s32Number *= -1;
		LCD_enuWriteString("-");
	}

	while( Copy_s32Number != 0 )
    1fde:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe0:	98 85       	ldd	r25, Y+8	; 0x08
    1fe2:	a9 85       	ldd	r26, Y+9	; 0x09
    1fe4:	ba 85       	ldd	r27, Y+10	; 0x0a
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	a1 05       	cpc	r26, r1
    1fea:	b1 05       	cpc	r27, r1
    1fec:	11 f6       	brne	.-124    	; 0x1f72 <LCD_enuWriteIntegerNumber+0x64>
    1fee:	25 c0       	rjmp	.+74     	; 0x203a <LCD_enuWriteIntegerNumber+0x12c>
		Copy_s32Number /= LCD_u8REMINDERNUMBER;
	}

	while( Local_u32OppositedNumber != 0)
	{
		Local_u8CurrentDigit = Local_u32OppositedNumber % LCD_u8REMINDERNUMBER;
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff4:	ac 81       	ldd	r26, Y+4	; 0x04
    1ff6:	bd 81       	ldd	r27, Y+5	; 0x05
    1ff8:	2a e0       	ldi	r18, 0x0A	; 10
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__udivmodsi4>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteData( Local_u8CurrentDigit + 48 );
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	80 5d       	subi	r24, 0xD0	; 208
    2012:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_enuWriteData>
		Local_u32OppositedNumber /= LCD_u8REMINDERNUMBER ;
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	9b 81       	ldd	r25, Y+3	; 0x03
    201a:	ac 81       	ldd	r26, Y+4	; 0x04
    201c:	bd 81       	ldd	r27, Y+5	; 0x05
    201e:	2a e0       	ldi	r18, 0x0A	; 10
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__udivmodsi4>
    202e:	da 01       	movw	r26, r20
    2030:	c9 01       	movw	r24, r18
    2032:	8a 83       	std	Y+2, r24	; 0x02
    2034:	9b 83       	std	Y+3, r25	; 0x03
    2036:	ac 83       	std	Y+4, r26	; 0x04
    2038:	bd 83       	std	Y+5, r27	; 0x05
	{
		Local_u32OppositedNumber = Local_u32OppositedNumber * LCD_u8REMINDERNUMBER + Copy_s32Number % LCD_u8REMINDERNUMBER;
		Copy_s32Number /= LCD_u8REMINDERNUMBER;
	}

	while( Local_u32OppositedNumber != 0)
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	ac 81       	ldd	r26, Y+4	; 0x04
    2040:	bd 81       	ldd	r27, Y+5	; 0x05
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	a1 05       	cpc	r26, r1
    2046:	b1 05       	cpc	r27, r1
    2048:	99 f6       	brne	.-90     	; 0x1ff0 <LCD_enuWriteIntegerNumber+0xe2>





	return Local_enuErrorState;
    204a:	8e 81       	ldd	r24, Y+6	; 0x06

}
    204c:	2a 96       	adiw	r28, 0x0a	; 10
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	ff 90       	pop	r15
    2062:	ef 90       	pop	r14
    2064:	08 95       	ret

00002066 <LCD_enuGoToXYPosition>:

ES_t LCD_enuGoToXYPosition(u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	00 d0       	rcall	.+0      	; 0x206c <LCD_enuGoToXYPosition+0x6>
    206c:	00 d0       	rcall	.+0      	; 0x206e <LCD_enuGoToXYPosition+0x8>
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	8b 83       	std	Y+3, r24	; 0x03
    2074:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2076:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8DDRAMAddress;

	if( Copy_u8YPosition == 0 || Copy_u8YPosition == 1)
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	88 23       	and	r24, r24
    207c:	19 f0       	breq	.+6      	; 0x2084 <LCD_enuGoToXYPosition+0x1e>
    207e:	8c 81       	ldd	r24, Y+4	; 0x04
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	c9 f4       	brne	.+50     	; 0x20b6 <LCD_enuGoToXYPosition+0x50>
	{

		Local_u8DDRAMAddress = Copy_u8XPosition + Copy_u8YPosition * 0x40 ;
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	00 24       	eor	r0, r0
    208c:	96 95       	lsr	r25
    208e:	87 95       	ror	r24
    2090:	07 94       	ror	r0
    2092:	96 95       	lsr	r25
    2094:	87 95       	ror	r24
    2096:	07 94       	ror	r0
    2098:	98 2f       	mov	r25, r24
    209a:	80 2d       	mov	r24, r0
    209c:	98 2f       	mov	r25, r24
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	89 0f       	add	r24, r25
    20a2:	89 83       	std	Y+1, r24	; 0x01
		Local_u8DDRAMAddress = Local_u8DDRAMAddress | (DIO_u8BIT_MASK << DIO_u8PIN_7 );
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	80 68       	ori	r24, 0x80	; 128
    20a8:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteCommand(Local_u8DDRAMAddress);
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_enuWriteCommand>


		Local_enuErrorState = ES_OK;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	8a 83       	std	Y+2, r24	; 0x02
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <LCD_enuGoToXYPosition+0x54>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <LCD_enuWriteSpecialCharacter>:

ES_t LCD_enuWriteSpecialCharacter(u8 Copy_Au8LetterArray[] ,u8 Copy_u8BlockNumber,u8 Copy_u8XPosition ,u8 Copy_u8YPosition)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	28 97       	sbiw	r28, 0x08	; 8
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	9d 83       	std	Y+5, r25	; 0x05
    20e0:	8c 83       	std	Y+4, r24	; 0x04
    20e2:	6e 83       	std	Y+6, r22	; 0x06
    20e4:	4f 83       	std	Y+7, r20	; 0x07
    20e6:	28 87       	std	Y+8, r18	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    20e8:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8CGRAMAddress;
	u8 Local_u8Iterator;

	Local_u8CGRAMAddress = Copy_u8BlockNumber * LCD_u8BLOCKBYTES ;
    20ea:	8e 81       	ldd	r24, Y+6	; 0x06
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8CGRAMAddress = Local_u8CGRAMAddress | (DIO_u8BIT_MASK << DIO_u8PIN_6 );
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	80 64       	ori	r24, 0x40	; 64
    2102:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8CGRAMAddress = Local_u8CGRAMAddress & (~(DIO_u8BIT_MASK << DIO_u8PIN_7 ));
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	8f 77       	andi	r24, 0x7F	; 127
    2108:	8a 83       	std	Y+2, r24	; 0x02

	LCD_enuWriteCommand(Local_u8CGRAMAddress);
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_enuWriteCommand>

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
    2110:	19 82       	std	Y+1, r1	; 0x01
    2112:	0e c0       	rjmp	.+28     	; 0x2130 <LCD_enuWriteSpecialCharacter+0x66>
	{
		LCD_enuWriteData(Copy_Au8LetterArray[Local_u8Iterator] );
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	fc 01       	movw	r30, r24
    2120:	e2 0f       	add	r30, r18
    2122:	f3 1f       	adc	r31, r19
    2124:	80 81       	ld	r24, Z
    2126:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_enuWriteData>
	Local_u8CGRAMAddress = Local_u8CGRAMAddress | (DIO_u8BIT_MASK << DIO_u8PIN_6 );
	Local_u8CGRAMAddress = Local_u8CGRAMAddress & (~(DIO_u8BIT_MASK << DIO_u8PIN_7 ));

	LCD_enuWriteCommand(Local_u8CGRAMAddress);

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	8f 5f       	subi	r24, 0xFF	; 255
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	88 30       	cpi	r24, 0x08	; 8
    2134:	78 f3       	brcs	.-34     	; 0x2114 <LCD_enuWriteSpecialCharacter+0x4a>
	{
		LCD_enuWriteData(Copy_Au8LetterArray[Local_u8Iterator] );
	}

	LCD_enuGoToXYPosition(Copy_u8XPosition,Copy_u8YPosition);
    2136:	8f 81       	ldd	r24, Y+7	; 0x07
    2138:	68 85       	ldd	r22, Y+8	; 0x08
    213a:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_enuGoToXYPosition>

	LCD_enuWriteData(Copy_u8BlockNumber);
    213e:	8e 81       	ldd	r24, Y+6	; 0x06
    2140:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_enuWriteData>

	return Local_enuErrorState;
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2146:	28 96       	adiw	r28, 0x08	; 8
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <main>:
#include "LCD_interface.h"
#include "EEPROM_interface.h"


void main()
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	0f 92       	push	r0
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	u8 data = 0;
    2162:	19 82       	std	Y+1, r1	; 0x01

	LCD_enuInit();
    2164:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_enuInit>
//		data = EEPROM_u8ReadByte((0x45 + i));
//		LCD_enuWriteIntegerNumber(data);
//
//	}

}
    2168:	0f 90       	pop	r0
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <__mulsi3>:
    2170:	62 9f       	mul	r22, r18
    2172:	d0 01       	movw	r26, r0
    2174:	73 9f       	mul	r23, r19
    2176:	f0 01       	movw	r30, r0
    2178:	82 9f       	mul	r24, r18
    217a:	e0 0d       	add	r30, r0
    217c:	f1 1d       	adc	r31, r1
    217e:	64 9f       	mul	r22, r20
    2180:	e0 0d       	add	r30, r0
    2182:	f1 1d       	adc	r31, r1
    2184:	92 9f       	mul	r25, r18
    2186:	f0 0d       	add	r31, r0
    2188:	83 9f       	mul	r24, r19
    218a:	f0 0d       	add	r31, r0
    218c:	74 9f       	mul	r23, r20
    218e:	f0 0d       	add	r31, r0
    2190:	65 9f       	mul	r22, r21
    2192:	f0 0d       	add	r31, r0
    2194:	99 27       	eor	r25, r25
    2196:	72 9f       	mul	r23, r18
    2198:	b0 0d       	add	r27, r0
    219a:	e1 1d       	adc	r30, r1
    219c:	f9 1f       	adc	r31, r25
    219e:	63 9f       	mul	r22, r19
    21a0:	b0 0d       	add	r27, r0
    21a2:	e1 1d       	adc	r30, r1
    21a4:	f9 1f       	adc	r31, r25
    21a6:	bd 01       	movw	r22, r26
    21a8:	cf 01       	movw	r24, r30
    21aa:	11 24       	eor	r1, r1
    21ac:	08 95       	ret

000021ae <__udivmodsi4>:
    21ae:	a1 e2       	ldi	r26, 0x21	; 33
    21b0:	1a 2e       	mov	r1, r26
    21b2:	aa 1b       	sub	r26, r26
    21b4:	bb 1b       	sub	r27, r27
    21b6:	fd 01       	movw	r30, r26
    21b8:	0d c0       	rjmp	.+26     	; 0x21d4 <__udivmodsi4_ep>

000021ba <__udivmodsi4_loop>:
    21ba:	aa 1f       	adc	r26, r26
    21bc:	bb 1f       	adc	r27, r27
    21be:	ee 1f       	adc	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	a2 17       	cp	r26, r18
    21c4:	b3 07       	cpc	r27, r19
    21c6:	e4 07       	cpc	r30, r20
    21c8:	f5 07       	cpc	r31, r21
    21ca:	20 f0       	brcs	.+8      	; 0x21d4 <__udivmodsi4_ep>
    21cc:	a2 1b       	sub	r26, r18
    21ce:	b3 0b       	sbc	r27, r19
    21d0:	e4 0b       	sbc	r30, r20
    21d2:	f5 0b       	sbc	r31, r21

000021d4 <__udivmodsi4_ep>:
    21d4:	66 1f       	adc	r22, r22
    21d6:	77 1f       	adc	r23, r23
    21d8:	88 1f       	adc	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	1a 94       	dec	r1
    21de:	69 f7       	brne	.-38     	; 0x21ba <__udivmodsi4_loop>
    21e0:	60 95       	com	r22
    21e2:	70 95       	com	r23
    21e4:	80 95       	com	r24
    21e6:	90 95       	com	r25
    21e8:	9b 01       	movw	r18, r22
    21ea:	ac 01       	movw	r20, r24
    21ec:	bd 01       	movw	r22, r26
    21ee:	cf 01       	movw	r24, r30
    21f0:	08 95       	ret

000021f2 <__divmodsi4>:
    21f2:	97 fb       	bst	r25, 7
    21f4:	09 2e       	mov	r0, r25
    21f6:	05 26       	eor	r0, r21
    21f8:	0e d0       	rcall	.+28     	; 0x2216 <__divmodsi4_neg1>
    21fa:	57 fd       	sbrc	r21, 7
    21fc:	04 d0       	rcall	.+8      	; 0x2206 <__divmodsi4_neg2>
    21fe:	d7 df       	rcall	.-82     	; 0x21ae <__udivmodsi4>
    2200:	0a d0       	rcall	.+20     	; 0x2216 <__divmodsi4_neg1>
    2202:	00 1c       	adc	r0, r0
    2204:	38 f4       	brcc	.+14     	; 0x2214 <__divmodsi4_exit>

00002206 <__divmodsi4_neg2>:
    2206:	50 95       	com	r21
    2208:	40 95       	com	r20
    220a:	30 95       	com	r19
    220c:	21 95       	neg	r18
    220e:	3f 4f       	sbci	r19, 0xFF	; 255
    2210:	4f 4f       	sbci	r20, 0xFF	; 255
    2212:	5f 4f       	sbci	r21, 0xFF	; 255

00002214 <__divmodsi4_exit>:
    2214:	08 95       	ret

00002216 <__divmodsi4_neg1>:
    2216:	f6 f7       	brtc	.-4      	; 0x2214 <__divmodsi4_exit>
    2218:	90 95       	com	r25
    221a:	80 95       	com	r24
    221c:	70 95       	com	r23
    221e:	61 95       	neg	r22
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	8f 4f       	sbci	r24, 0xFF	; 255
    2224:	9f 4f       	sbci	r25, 0xFF	; 255
    2226:	08 95       	ret

00002228 <__prologue_saves__>:
    2228:	2f 92       	push	r2
    222a:	3f 92       	push	r3
    222c:	4f 92       	push	r4
    222e:	5f 92       	push	r5
    2230:	6f 92       	push	r6
    2232:	7f 92       	push	r7
    2234:	8f 92       	push	r8
    2236:	9f 92       	push	r9
    2238:	af 92       	push	r10
    223a:	bf 92       	push	r11
    223c:	cf 92       	push	r12
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	ca 1b       	sub	r28, r26
    2252:	db 0b       	sbc	r29, r27
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	09 94       	ijmp

00002260 <__epilogue_restores__>:
    2260:	2a 88       	ldd	r2, Y+18	; 0x12
    2262:	39 88       	ldd	r3, Y+17	; 0x11
    2264:	48 88       	ldd	r4, Y+16	; 0x10
    2266:	5f 84       	ldd	r5, Y+15	; 0x0f
    2268:	6e 84       	ldd	r6, Y+14	; 0x0e
    226a:	7d 84       	ldd	r7, Y+13	; 0x0d
    226c:	8c 84       	ldd	r8, Y+12	; 0x0c
    226e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2270:	aa 84       	ldd	r10, Y+10	; 0x0a
    2272:	b9 84       	ldd	r11, Y+9	; 0x09
    2274:	c8 84       	ldd	r12, Y+8	; 0x08
    2276:	df 80       	ldd	r13, Y+7	; 0x07
    2278:	ee 80       	ldd	r14, Y+6	; 0x06
    227a:	fd 80       	ldd	r15, Y+5	; 0x05
    227c:	0c 81       	ldd	r16, Y+4	; 0x04
    227e:	1b 81       	ldd	r17, Y+3	; 0x03
    2280:	aa 81       	ldd	r26, Y+2	; 0x02
    2282:	b9 81       	ldd	r27, Y+1	; 0x01
    2284:	ce 0f       	add	r28, r30
    2286:	d1 1d       	adc	r29, r1
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	ed 01       	movw	r28, r26
    2294:	08 95       	ret

00002296 <_exit>:
    2296:	f8 94       	cli

00002298 <__stop_program>:
    2298:	ff cf       	rjmp	.-2      	; 0x2298 <__stop_program>
