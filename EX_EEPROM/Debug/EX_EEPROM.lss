
EX_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000382a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000382a  0000389e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003b70  00000000  00000000  000039b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000195c  00000000  00000000  00007528  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000240  00000000  00000000  00008e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000029b  00000000  00000000  000090c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b83  00000000  00000000  0000935f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000181b  00000000  00000000  0000bee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169d  00000000  00000000  0000d6fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  0000ed9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  0000effc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e88  00000000  00000000  0000f37b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4e 1b 	call	0x369c	; 0x369c <main>
      7a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 05 	call	0xae2	; 0xae2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 3d 03 	call	0x67a	; 0x67a <__subsf3>
      ae:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <__fixunssfdi>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__prologue_saves__>
      e6:	7b 01       	movw	r14, r22
      e8:	8c 01       	movw	r16, r24
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	40 e8       	ldi	r20, 0x80	; 128
      f0:	5f e3       	ldi	r21, 0x3F	; 63
      f2:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
      f6:	88 23       	and	r24, r24
      f8:	4c f4       	brge	.+18     	; 0x10c <__fixunssfdi+0x32>
      fa:	aa 24       	eor	r10, r10
      fc:	bb 24       	eor	r11, r11
      fe:	cc 24       	eor	r12, r12
     100:	dd 24       	eor	r13, r13
     102:	ee 24       	eor	r14, r14
     104:	ff 24       	eor	r15, r15
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	10 e0       	ldi	r17, 0x00	; 0
     10a:	86 c0       	rjmp	.+268    	; 0x218 <__fixunssfdi+0x13e>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	40 e8       	ldi	r20, 0x80	; 128
     116:	5f e4       	ldi	r21, 0x4F	; 79
     118:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
     11c:	88 23       	and	r24, r24
     11e:	54 f4       	brge	.+20     	; 0x134 <__fixunssfdi+0x5a>
     120:	c8 01       	movw	r24, r16
     122:	b7 01       	movw	r22, r14
     124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     128:	5b 01       	movw	r10, r22
     12a:	6c 01       	movw	r12, r24
     12c:	ee 24       	eor	r14, r14
     12e:	ff 24       	eor	r15, r15
     130:	87 01       	movw	r16, r14
     132:	72 c0       	rjmp	.+228    	; 0x218 <__fixunssfdi+0x13e>
     134:	c8 01       	movw	r24, r16
     136:	b7 01       	movw	r22, r14
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e8       	ldi	r20, 0x80	; 128
     13e:	5f e5       	ldi	r21, 0x5F	; 95
     140:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
     144:	87 fd       	sbrc	r24, 7
     146:	0f c0       	rjmp	.+30     	; 0x166 <__fixunssfdi+0x8c>
     148:	aa 24       	eor	r10, r10
     14a:	aa 94       	dec	r10
     14c:	bb 24       	eor	r11, r11
     14e:	ba 94       	dec	r11
     150:	cc 24       	eor	r12, r12
     152:	ca 94       	dec	r12
     154:	dd 24       	eor	r13, r13
     156:	da 94       	dec	r13
     158:	ee 24       	eor	r14, r14
     15a:	ea 94       	dec	r14
     15c:	ff 24       	eor	r15, r15
     15e:	fa 94       	dec	r15
     160:	0f ef       	ldi	r16, 0xFF	; 255
     162:	1f ef       	ldi	r17, 0xFF	; 255
     164:	59 c0       	rjmp	.+178    	; 0x218 <__fixunssfdi+0x13e>
     166:	c8 01       	movw	r24, r16
     168:	b7 01       	movw	r22, r14
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e8       	ldi	r20, 0x80	; 128
     170:	5f e2       	ldi	r21, 0x2F	; 47
     172:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
     176:	7b 01       	movw	r14, r22
     178:	8c 01       	movw	r16, r24
     17a:	22 24       	eor	r2, r2
     17c:	33 24       	eor	r3, r3
     17e:	21 01       	movw	r4, r2
     180:	90 e1       	ldi	r25, 0x10	; 16
     182:	a9 2e       	mov	r10, r25
     184:	b1 2c       	mov	r11, r1
     186:	c1 2c       	mov	r12, r1
     188:	d1 2c       	mov	r13, r1
     18a:	c0 e0       	ldi	r28, 0x00	; 0
     18c:	d0 e0       	ldi	r29, 0x00	; 0
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0a 2c       	mov	r0, r10
     198:	04 c0       	rjmp	.+8      	; 0x1a2 <__fixunssfdi+0xc8>
     19a:	66 0f       	add	r22, r22
     19c:	77 1f       	adc	r23, r23
     19e:	88 1f       	adc	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	0a 94       	dec	r0
     1a4:	d2 f7       	brpl	.-12     	; 0x19a <__fixunssfdi+0xc0>
     1a6:	0e 94 83 06 	call	0xd06	; 0xd06 <__floatunsisf>
     1aa:	3b 01       	movw	r6, r22
     1ac:	4c 01       	movw	r8, r24
     1ae:	c8 01       	movw	r24, r16
     1b0:	b7 01       	movw	r22, r14
     1b2:	a4 01       	movw	r20, r8
     1b4:	93 01       	movw	r18, r6
     1b6:	0e 94 71 05 	call	0xae2	; 0xae2 <__gesf2>
     1ba:	88 23       	and	r24, r24
     1bc:	64 f0       	brlt	.+24     	; 0x1d6 <__fixunssfdi+0xfc>
     1be:	2a 28       	or	r2, r10
     1c0:	3b 28       	or	r3, r11
     1c2:	4c 28       	or	r4, r12
     1c4:	5d 28       	or	r5, r13
     1c6:	c8 01       	movw	r24, r16
     1c8:	b7 01       	movw	r22, r14
     1ca:	a4 01       	movw	r20, r8
     1cc:	93 01       	movw	r18, r6
     1ce:	0e 94 95 04 	call	0x92a	; 0x92a <__divsf3>
     1d2:	7b 01       	movw	r14, r22
     1d4:	8c 01       	movw	r16, r24
     1d6:	d6 94       	lsr	r13
     1d8:	c7 94       	ror	r12
     1da:	b7 94       	ror	r11
     1dc:	a7 94       	ror	r10
     1de:	21 96       	adiw	r28, 0x01	; 1
     1e0:	c5 30       	cpi	r28, 0x05	; 5
     1e2:	d1 05       	cpc	r29, r1
     1e4:	a1 f6       	brne	.-88     	; 0x18e <__fixunssfdi+0xb4>
     1e6:	c8 01       	movw	r24, r16
     1e8:	b7 01       	movw	r22, r14
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	40 e8       	ldi	r20, 0x80	; 128
     1f0:	5f e4       	ldi	r21, 0x4F	; 79
     1f2:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
     1f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     1fa:	5b 01       	movw	r10, r22
     1fc:	6c 01       	movw	r12, r24
     1fe:	9b 01       	movw	r18, r22
     200:	a6 01       	movw	r20, r12
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	02 2d       	mov	r16, r2
     20c:	0e 94 7b 07 	call	0xef6	; 0xef6 <__ashldi3>
     210:	59 01       	movw	r10, r18
     212:	6a 01       	movw	r12, r20
     214:	7b 01       	movw	r14, r22
     216:	8c 01       	movw	r16, r24
     218:	95 01       	movw	r18, r10
     21a:	a6 01       	movw	r20, r12
     21c:	b7 01       	movw	r22, r14
     21e:	c8 01       	movw	r24, r16
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	e2 e1       	ldi	r30, 0x12	; 18
     226:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__epilogue_restores__>

0000022a <__floatundisf>:
     22a:	a2 e0       	ldi	r26, 0x02	; 2
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	eb e1       	ldi	r30, 0x1B	; 27
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__prologue_saves__>
     236:	12 2f       	mov	r17, r18
     238:	b3 2e       	mov	r11, r19
     23a:	a4 2e       	mov	r10, r20
     23c:	95 2e       	mov	r9, r21
     23e:	86 2e       	mov	r8, r22
     240:	37 2e       	mov	r3, r23
     242:	28 2e       	mov	r2, r24
     244:	9a 83       	std	Y+2, r25	; 0x02
     246:	c2 2e       	mov	r12, r18
     248:	d3 2e       	mov	r13, r19
     24a:	e4 2e       	mov	r14, r20
     24c:	f5 2e       	mov	r15, r21
     24e:	a7 01       	movw	r20, r14
     250:	96 01       	movw	r18, r12
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	21 17       	cp	r18, r17
     25c:	a1 f4       	brne	.+40     	; 0x286 <__floatundisf+0x5c>
     25e:	3b 15       	cp	r19, r11
     260:	91 f4       	brne	.+36     	; 0x286 <__floatundisf+0x5c>
     262:	4a 15       	cp	r20, r10
     264:	81 f4       	brne	.+32     	; 0x286 <__floatundisf+0x5c>
     266:	59 15       	cp	r21, r9
     268:	71 f4       	brne	.+28     	; 0x286 <__floatundisf+0x5c>
     26a:	68 15       	cp	r22, r8
     26c:	61 f4       	brne	.+24     	; 0x286 <__floatundisf+0x5c>
     26e:	73 15       	cp	r23, r3
     270:	51 f4       	brne	.+20     	; 0x286 <__floatundisf+0x5c>
     272:	82 15       	cp	r24, r2
     274:	41 f4       	brne	.+16     	; 0x286 <__floatundisf+0x5c>
     276:	aa 81       	ldd	r26, Y+2	; 0x02
     278:	9a 17       	cp	r25, r26
     27a:	29 f4       	brne	.+10     	; 0x286 <__floatundisf+0x5c>
     27c:	c7 01       	movw	r24, r14
     27e:	b6 01       	movw	r22, r12
     280:	0e 94 83 06 	call	0xd06	; 0xd06 <__floatunsisf>
     284:	aa c0       	rjmp	.+340    	; 0x3da <__floatundisf+0x1b0>
     286:	21 2f       	mov	r18, r17
     288:	3b 2d       	mov	r19, r11
     28a:	4a 2d       	mov	r20, r10
     28c:	59 2d       	mov	r21, r9
     28e:	68 2d       	mov	r22, r8
     290:	73 2d       	mov	r23, r3
     292:	82 2d       	mov	r24, r2
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	00 e2       	ldi	r16, 0x20	; 32
     298:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__lshrdi3>
     29c:	c9 01       	movw	r24, r18
     29e:	da 01       	movw	r26, r20
     2a0:	80 30       	cpi	r24, 0x00	; 0
     2a2:	e0 e0       	ldi	r30, 0x00	; 0
     2a4:	9e 07       	cpc	r25, r30
     2a6:	e1 e0       	ldi	r30, 0x01	; 1
     2a8:	ae 07       	cpc	r26, r30
     2aa:	e0 e0       	ldi	r30, 0x00	; 0
     2ac:	be 07       	cpc	r27, r30
     2ae:	80 f4       	brcc	.+32     	; 0x2d0 <__floatundisf+0xa6>
     2b0:	8f 3f       	cpi	r24, 0xFF	; 255
     2b2:	91 05       	cpc	r25, r1
     2b4:	a1 05       	cpc	r26, r1
     2b6:	b1 05       	cpc	r27, r1
     2b8:	31 f0       	breq	.+12     	; 0x2c6 <__floatundisf+0x9c>
     2ba:	28 f0       	brcs	.+10     	; 0x2c6 <__floatundisf+0x9c>
     2bc:	28 e0       	ldi	r18, 0x08	; 8
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	16 c0       	rjmp	.+44     	; 0x2f2 <__floatundisf+0xc8>
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	11 c0       	rjmp	.+34     	; 0x2f2 <__floatundisf+0xc8>
     2d0:	80 30       	cpi	r24, 0x00	; 0
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	9f 07       	cpc	r25, r31
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	af 07       	cpc	r26, r31
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	bf 07       	cpc	r27, r31
     2de:	28 f0       	brcs	.+10     	; 0x2ea <__floatundisf+0xc0>
     2e0:	28 e1       	ldi	r18, 0x18	; 24
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <__floatundisf+0xc8>
     2ea:	20 e1       	ldi	r18, 0x10	; 16
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	02 2e       	mov	r0, r18
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__floatundisf+0xd4>
     2f6:	b6 95       	lsr	r27
     2f8:	a7 95       	ror	r26
     2fa:	97 95       	ror	r25
     2fc:	87 95       	ror	r24
     2fe:	0a 94       	dec	r0
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__floatundisf+0xcc>
     302:	fc 01       	movw	r30, r24
     304:	e8 59       	subi	r30, 0x98	; 152
     306:	ff 4f       	sbci	r31, 0xFF	; 255
     308:	80 81       	ld	r24, Z
     30a:	29 01       	movw	r4, r18
     30c:	3a 01       	movw	r6, r20
     30e:	48 0e       	add	r4, r24
     310:	51 1c       	adc	r5, r1
     312:	61 1c       	adc	r6, r1
     314:	71 1c       	adc	r7, r1
     316:	49 82       	std	Y+1, r4	; 0x01
     318:	21 2f       	mov	r18, r17
     31a:	3b 2d       	mov	r19, r11
     31c:	4a 2d       	mov	r20, r10
     31e:	59 2d       	mov	r21, r9
     320:	68 2d       	mov	r22, r8
     322:	73 2d       	mov	r23, r3
     324:	82 2d       	mov	r24, r2
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	04 2d       	mov	r16, r4
     32a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__lshrdi3>
     32e:	c9 01       	movw	r24, r18
     330:	da 01       	movw	r26, r20
     332:	4c 01       	movw	r8, r24
     334:	5d 01       	movw	r10, r26
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	84 19       	sub	r24, r4
     33c:	95 09       	sbc	r25, r5
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__floatundisf+0x11e>
     340:	cc 0c       	add	r12, r12
     342:	dd 1c       	adc	r13, r13
     344:	ee 1c       	adc	r14, r14
     346:	ff 1c       	adc	r15, r15
     348:	8a 95       	dec	r24
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__floatundisf+0x116>
     34c:	c1 14       	cp	r12, r1
     34e:	d1 04       	cpc	r13, r1
     350:	e1 04       	cpc	r14, r1
     352:	f1 04       	cpc	r15, r1
     354:	41 f0       	breq	.+16     	; 0x366 <__floatundisf+0x13c>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	88 2a       	or	r8, r24
     360:	99 2a       	or	r9, r25
     362:	aa 2a       	or	r10, r26
     364:	bb 2a       	or	r11, r27
     366:	90 e2       	ldi	r25, 0x20	; 32
     368:	49 16       	cp	r4, r25
     36a:	51 04       	cpc	r5, r1
     36c:	61 04       	cpc	r6, r1
     36e:	71 04       	cpc	r7, r1
     370:	59 f4       	brne	.+22     	; 0x388 <__floatundisf+0x15e>
     372:	0f 2e       	mov	r0, r31
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	ef 2e       	mov	r14, r31
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	ff 2e       	mov	r15, r31
     37c:	f0 e8       	ldi	r31, 0x80	; 128
     37e:	0f 2f       	mov	r16, r31
     380:	ff e4       	ldi	r31, 0x4F	; 79
     382:	1f 2f       	mov	r17, r31
     384:	f0 2d       	mov	r31, r0
     386:	21 c0       	rjmp	.+66     	; 0x3ca <__floatundisf+0x1a0>
     388:	af e1       	ldi	r26, 0x1F	; 31
     38a:	4a 16       	cp	r4, r26
     38c:	51 04       	cpc	r5, r1
     38e:	61 04       	cpc	r6, r1
     390:	71 04       	cpc	r7, r1
     392:	59 f4       	brne	.+22     	; 0x3aa <__floatundisf+0x180>
     394:	0f 2e       	mov	r0, r31
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	ef 2e       	mov	r14, r31
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	ff 2e       	mov	r15, r31
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	0f 2f       	mov	r16, r31
     3a2:	ff e4       	ldi	r31, 0x4F	; 79
     3a4:	1f 2f       	mov	r17, r31
     3a6:	f0 2d       	mov	r31, r0
     3a8:	10 c0       	rjmp	.+32     	; 0x3ca <__floatundisf+0x1a0>
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	09 80       	ldd	r0, Y+1	; 0x01
     3b4:	04 c0       	rjmp	.+8      	; 0x3be <__floatundisf+0x194>
     3b6:	66 0f       	add	r22, r22
     3b8:	77 1f       	adc	r23, r23
     3ba:	88 1f       	adc	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	0a 94       	dec	r0
     3c0:	d2 f7       	brpl	.-12     	; 0x3b6 <__floatundisf+0x18c>
     3c2:	0e 94 d1 05 	call	0xba2	; 0xba2 <__floatsisf>
     3c6:	7b 01       	movw	r14, r22
     3c8:	8c 01       	movw	r16, r24
     3ca:	c5 01       	movw	r24, r10
     3cc:	b4 01       	movw	r22, r8
     3ce:	0e 94 83 06 	call	0xd06	; 0xd06 <__floatunsisf>
     3d2:	a8 01       	movw	r20, r16
     3d4:	97 01       	movw	r18, r14
     3d6:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
     3da:	22 96       	adiw	r28, 0x02	; 2
     3dc:	e2 e1       	ldi	r30, 0x12	; 18
     3de:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__epilogue_restores__>

000003e2 <_fpadd_parts>:
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	e7 ef       	ldi	r30, 0xF7	; 247
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__prologue_saves__>
     3ee:	dc 01       	movw	r26, r24
     3f0:	2b 01       	movw	r4, r22
     3f2:	fa 01       	movw	r30, r20
     3f4:	9c 91       	ld	r25, X
     3f6:	92 30       	cpi	r25, 0x02	; 2
     3f8:	08 f4       	brcc	.+2      	; 0x3fc <_fpadd_parts+0x1a>
     3fa:	39 c1       	rjmp	.+626    	; 0x66e <_fpadd_parts+0x28c>
     3fc:	eb 01       	movw	r28, r22
     3fe:	88 81       	ld	r24, Y
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	08 f4       	brcc	.+2      	; 0x406 <_fpadd_parts+0x24>
     404:	33 c1       	rjmp	.+614    	; 0x66c <_fpadd_parts+0x28a>
     406:	94 30       	cpi	r25, 0x04	; 4
     408:	69 f4       	brne	.+26     	; 0x424 <_fpadd_parts+0x42>
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	09 f0       	breq	.+2      	; 0x410 <_fpadd_parts+0x2e>
     40e:	2f c1       	rjmp	.+606    	; 0x66e <_fpadd_parts+0x28c>
     410:	11 96       	adiw	r26, 0x01	; 1
     412:	9c 91       	ld	r25, X
     414:	11 97       	sbiw	r26, 0x01	; 1
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	98 17       	cp	r25, r24
     41a:	09 f4       	brne	.+2      	; 0x41e <_fpadd_parts+0x3c>
     41c:	28 c1       	rjmp	.+592    	; 0x66e <_fpadd_parts+0x28c>
     41e:	a0 e6       	ldi	r26, 0x60	; 96
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	25 c1       	rjmp	.+586    	; 0x66e <_fpadd_parts+0x28c>
     424:	84 30       	cpi	r24, 0x04	; 4
     426:	09 f4       	brne	.+2      	; 0x42a <_fpadd_parts+0x48>
     428:	21 c1       	rjmp	.+578    	; 0x66c <_fpadd_parts+0x28a>
     42a:	82 30       	cpi	r24, 0x02	; 2
     42c:	a9 f4       	brne	.+42     	; 0x458 <_fpadd_parts+0x76>
     42e:	92 30       	cpi	r25, 0x02	; 2
     430:	09 f0       	breq	.+2      	; 0x434 <_fpadd_parts+0x52>
     432:	1d c1       	rjmp	.+570    	; 0x66e <_fpadd_parts+0x28c>
     434:	9a 01       	movw	r18, r20
     436:	ad 01       	movw	r20, r26
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	ea 01       	movw	r28, r20
     43c:	09 90       	ld	r0, Y+
     43e:	ae 01       	movw	r20, r28
     440:	e9 01       	movw	r28, r18
     442:	09 92       	st	Y+, r0
     444:	9e 01       	movw	r18, r28
     446:	81 50       	subi	r24, 0x01	; 1
     448:	c1 f7       	brne	.-16     	; 0x43a <_fpadd_parts+0x58>
     44a:	e2 01       	movw	r28, r4
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	11 96       	adiw	r26, 0x01	; 1
     450:	9c 91       	ld	r25, X
     452:	89 23       	and	r24, r25
     454:	81 83       	std	Z+1, r24	; 0x01
     456:	08 c1       	rjmp	.+528    	; 0x668 <_fpadd_parts+0x286>
     458:	92 30       	cpi	r25, 0x02	; 2
     45a:	09 f4       	brne	.+2      	; 0x45e <_fpadd_parts+0x7c>
     45c:	07 c1       	rjmp	.+526    	; 0x66c <_fpadd_parts+0x28a>
     45e:	12 96       	adiw	r26, 0x02	; 2
     460:	2d 90       	ld	r2, X+
     462:	3c 90       	ld	r3, X
     464:	13 97       	sbiw	r26, 0x03	; 3
     466:	eb 01       	movw	r28, r22
     468:	8a 81       	ldd	r24, Y+2	; 0x02
     46a:	9b 81       	ldd	r25, Y+3	; 0x03
     46c:	14 96       	adiw	r26, 0x04	; 4
     46e:	ad 90       	ld	r10, X+
     470:	bd 90       	ld	r11, X+
     472:	cd 90       	ld	r12, X+
     474:	dc 90       	ld	r13, X
     476:	17 97       	sbiw	r26, 0x07	; 7
     478:	ec 80       	ldd	r14, Y+4	; 0x04
     47a:	fd 80       	ldd	r15, Y+5	; 0x05
     47c:	0e 81       	ldd	r16, Y+6	; 0x06
     47e:	1f 81       	ldd	r17, Y+7	; 0x07
     480:	91 01       	movw	r18, r2
     482:	28 1b       	sub	r18, r24
     484:	39 0b       	sbc	r19, r25
     486:	b9 01       	movw	r22, r18
     488:	37 ff       	sbrs	r19, 7
     48a:	04 c0       	rjmp	.+8      	; 0x494 <_fpadd_parts+0xb2>
     48c:	66 27       	eor	r22, r22
     48e:	77 27       	eor	r23, r23
     490:	62 1b       	sub	r22, r18
     492:	73 0b       	sbc	r23, r19
     494:	60 32       	cpi	r22, 0x20	; 32
     496:	71 05       	cpc	r23, r1
     498:	0c f0       	brlt	.+2      	; 0x49c <_fpadd_parts+0xba>
     49a:	61 c0       	rjmp	.+194    	; 0x55e <_fpadd_parts+0x17c>
     49c:	12 16       	cp	r1, r18
     49e:	13 06       	cpc	r1, r19
     4a0:	6c f5       	brge	.+90     	; 0x4fc <_fpadd_parts+0x11a>
     4a2:	37 01       	movw	r6, r14
     4a4:	48 01       	movw	r8, r16
     4a6:	06 2e       	mov	r0, r22
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <_fpadd_parts+0xd0>
     4aa:	96 94       	lsr	r9
     4ac:	87 94       	ror	r8
     4ae:	77 94       	ror	r7
     4b0:	67 94       	ror	r6
     4b2:	0a 94       	dec	r0
     4b4:	d2 f7       	brpl	.-12     	; 0x4aa <_fpadd_parts+0xc8>
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <_fpadd_parts+0xe6>
     4c0:	22 0f       	add	r18, r18
     4c2:	33 1f       	adc	r19, r19
     4c4:	44 1f       	adc	r20, r20
     4c6:	55 1f       	adc	r21, r21
     4c8:	6a 95       	dec	r22
     4ca:	d2 f7       	brpl	.-12     	; 0x4c0 <_fpadd_parts+0xde>
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	30 40       	sbci	r19, 0x00	; 0
     4d0:	40 40       	sbci	r20, 0x00	; 0
     4d2:	50 40       	sbci	r21, 0x00	; 0
     4d4:	2e 21       	and	r18, r14
     4d6:	3f 21       	and	r19, r15
     4d8:	40 23       	and	r20, r16
     4da:	51 23       	and	r21, r17
     4dc:	21 15       	cp	r18, r1
     4de:	31 05       	cpc	r19, r1
     4e0:	41 05       	cpc	r20, r1
     4e2:	51 05       	cpc	r21, r1
     4e4:	21 f0       	breq	.+8      	; 0x4ee <_fpadd_parts+0x10c>
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	79 01       	movw	r14, r18
     4f0:	8a 01       	movw	r16, r20
     4f2:	e6 28       	or	r14, r6
     4f4:	f7 28       	or	r15, r7
     4f6:	08 29       	or	r16, r8
     4f8:	19 29       	or	r17, r9
     4fa:	3c c0       	rjmp	.+120    	; 0x574 <_fpadd_parts+0x192>
     4fc:	23 2b       	or	r18, r19
     4fe:	d1 f1       	breq	.+116    	; 0x574 <_fpadd_parts+0x192>
     500:	26 0e       	add	r2, r22
     502:	37 1e       	adc	r3, r23
     504:	35 01       	movw	r6, r10
     506:	46 01       	movw	r8, r12
     508:	06 2e       	mov	r0, r22
     50a:	04 c0       	rjmp	.+8      	; 0x514 <_fpadd_parts+0x132>
     50c:	96 94       	lsr	r9
     50e:	87 94       	ror	r8
     510:	77 94       	ror	r7
     512:	67 94       	ror	r6
     514:	0a 94       	dec	r0
     516:	d2 f7       	brpl	.-12     	; 0x50c <_fpadd_parts+0x12a>
     518:	21 e0       	ldi	r18, 0x01	; 1
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	04 c0       	rjmp	.+8      	; 0x52a <_fpadd_parts+0x148>
     522:	22 0f       	add	r18, r18
     524:	33 1f       	adc	r19, r19
     526:	44 1f       	adc	r20, r20
     528:	55 1f       	adc	r21, r21
     52a:	6a 95       	dec	r22
     52c:	d2 f7       	brpl	.-12     	; 0x522 <_fpadd_parts+0x140>
     52e:	21 50       	subi	r18, 0x01	; 1
     530:	30 40       	sbci	r19, 0x00	; 0
     532:	40 40       	sbci	r20, 0x00	; 0
     534:	50 40       	sbci	r21, 0x00	; 0
     536:	2a 21       	and	r18, r10
     538:	3b 21       	and	r19, r11
     53a:	4c 21       	and	r20, r12
     53c:	5d 21       	and	r21, r13
     53e:	21 15       	cp	r18, r1
     540:	31 05       	cpc	r19, r1
     542:	41 05       	cpc	r20, r1
     544:	51 05       	cpc	r21, r1
     546:	21 f0       	breq	.+8      	; 0x550 <_fpadd_parts+0x16e>
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	59 01       	movw	r10, r18
     552:	6a 01       	movw	r12, r20
     554:	a6 28       	or	r10, r6
     556:	b7 28       	or	r11, r7
     558:	c8 28       	or	r12, r8
     55a:	d9 28       	or	r13, r9
     55c:	0b c0       	rjmp	.+22     	; 0x574 <_fpadd_parts+0x192>
     55e:	82 15       	cp	r24, r2
     560:	93 05       	cpc	r25, r3
     562:	2c f0       	brlt	.+10     	; 0x56e <_fpadd_parts+0x18c>
     564:	1c 01       	movw	r2, r24
     566:	aa 24       	eor	r10, r10
     568:	bb 24       	eor	r11, r11
     56a:	65 01       	movw	r12, r10
     56c:	03 c0       	rjmp	.+6      	; 0x574 <_fpadd_parts+0x192>
     56e:	ee 24       	eor	r14, r14
     570:	ff 24       	eor	r15, r15
     572:	87 01       	movw	r16, r14
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	9c 91       	ld	r25, X
     578:	d2 01       	movw	r26, r4
     57a:	11 96       	adiw	r26, 0x01	; 1
     57c:	8c 91       	ld	r24, X
     57e:	98 17       	cp	r25, r24
     580:	09 f4       	brne	.+2      	; 0x584 <_fpadd_parts+0x1a2>
     582:	45 c0       	rjmp	.+138    	; 0x60e <_fpadd_parts+0x22c>
     584:	99 23       	and	r25, r25
     586:	39 f0       	breq	.+14     	; 0x596 <_fpadd_parts+0x1b4>
     588:	a8 01       	movw	r20, r16
     58a:	97 01       	movw	r18, r14
     58c:	2a 19       	sub	r18, r10
     58e:	3b 09       	sbc	r19, r11
     590:	4c 09       	sbc	r20, r12
     592:	5d 09       	sbc	r21, r13
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <_fpadd_parts+0x1c0>
     596:	a6 01       	movw	r20, r12
     598:	95 01       	movw	r18, r10
     59a:	2e 19       	sub	r18, r14
     59c:	3f 09       	sbc	r19, r15
     59e:	40 0b       	sbc	r20, r16
     5a0:	51 0b       	sbc	r21, r17
     5a2:	57 fd       	sbrc	r21, 7
     5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <_fpadd_parts+0x1d4>
     5a6:	11 82       	std	Z+1, r1	; 0x01
     5a8:	33 82       	std	Z+3, r3	; 0x03
     5aa:	22 82       	std	Z+2, r2	; 0x02
     5ac:	24 83       	std	Z+4, r18	; 0x04
     5ae:	35 83       	std	Z+5, r19	; 0x05
     5b0:	46 83       	std	Z+6, r20	; 0x06
     5b2:	57 83       	std	Z+7, r21	; 0x07
     5b4:	1d c0       	rjmp	.+58     	; 0x5f0 <_fpadd_parts+0x20e>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	81 83       	std	Z+1, r24	; 0x01
     5ba:	33 82       	std	Z+3, r3	; 0x03
     5bc:	22 82       	std	Z+2, r2	; 0x02
     5be:	88 27       	eor	r24, r24
     5c0:	99 27       	eor	r25, r25
     5c2:	dc 01       	movw	r26, r24
     5c4:	82 1b       	sub	r24, r18
     5c6:	93 0b       	sbc	r25, r19
     5c8:	a4 0b       	sbc	r26, r20
     5ca:	b5 0b       	sbc	r27, r21
     5cc:	84 83       	std	Z+4, r24	; 0x04
     5ce:	95 83       	std	Z+5, r25	; 0x05
     5d0:	a6 83       	std	Z+6, r26	; 0x06
     5d2:	b7 83       	std	Z+7, r27	; 0x07
     5d4:	0d c0       	rjmp	.+26     	; 0x5f0 <_fpadd_parts+0x20e>
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	44 1f       	adc	r20, r20
     5dc:	55 1f       	adc	r21, r21
     5de:	24 83       	std	Z+4, r18	; 0x04
     5e0:	35 83       	std	Z+5, r19	; 0x05
     5e2:	46 83       	std	Z+6, r20	; 0x06
     5e4:	57 83       	std	Z+7, r21	; 0x07
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	93 81       	ldd	r25, Z+3	; 0x03
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	93 83       	std	Z+3, r25	; 0x03
     5ee:	82 83       	std	Z+2, r24	; 0x02
     5f0:	24 81       	ldd	r18, Z+4	; 0x04
     5f2:	35 81       	ldd	r19, Z+5	; 0x05
     5f4:	46 81       	ldd	r20, Z+6	; 0x06
     5f6:	57 81       	ldd	r21, Z+7	; 0x07
     5f8:	da 01       	movw	r26, r20
     5fa:	c9 01       	movw	r24, r18
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	a1 09       	sbc	r26, r1
     600:	b1 09       	sbc	r27, r1
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	9f 4f       	sbci	r25, 0xFF	; 255
     606:	af 4f       	sbci	r26, 0xFF	; 255
     608:	bf 43       	sbci	r27, 0x3F	; 63
     60a:	28 f3       	brcs	.-54     	; 0x5d6 <_fpadd_parts+0x1f4>
     60c:	0b c0       	rjmp	.+22     	; 0x624 <_fpadd_parts+0x242>
     60e:	91 83       	std	Z+1, r25	; 0x01
     610:	33 82       	std	Z+3, r3	; 0x03
     612:	22 82       	std	Z+2, r2	; 0x02
     614:	ea 0c       	add	r14, r10
     616:	fb 1c       	adc	r15, r11
     618:	0c 1d       	adc	r16, r12
     61a:	1d 1d       	adc	r17, r13
     61c:	e4 82       	std	Z+4, r14	; 0x04
     61e:	f5 82       	std	Z+5, r15	; 0x05
     620:	06 83       	std	Z+6, r16	; 0x06
     622:	17 83       	std	Z+7, r17	; 0x07
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	80 83       	st	Z, r24
     628:	24 81       	ldd	r18, Z+4	; 0x04
     62a:	35 81       	ldd	r19, Z+5	; 0x05
     62c:	46 81       	ldd	r20, Z+6	; 0x06
     62e:	57 81       	ldd	r21, Z+7	; 0x07
     630:	57 ff       	sbrs	r21, 7
     632:	1a c0       	rjmp	.+52     	; 0x668 <_fpadd_parts+0x286>
     634:	c9 01       	movw	r24, r18
     636:	aa 27       	eor	r26, r26
     638:	97 fd       	sbrc	r25, 7
     63a:	a0 95       	com	r26
     63c:	ba 2f       	mov	r27, r26
     63e:	81 70       	andi	r24, 0x01	; 1
     640:	90 70       	andi	r25, 0x00	; 0
     642:	a0 70       	andi	r26, 0x00	; 0
     644:	b0 70       	andi	r27, 0x00	; 0
     646:	56 95       	lsr	r21
     648:	47 95       	ror	r20
     64a:	37 95       	ror	r19
     64c:	27 95       	ror	r18
     64e:	82 2b       	or	r24, r18
     650:	93 2b       	or	r25, r19
     652:	a4 2b       	or	r26, r20
     654:	b5 2b       	or	r27, r21
     656:	84 83       	std	Z+4, r24	; 0x04
     658:	95 83       	std	Z+5, r25	; 0x05
     65a:	a6 83       	std	Z+6, r26	; 0x06
     65c:	b7 83       	std	Z+7, r27	; 0x07
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	93 81       	ldd	r25, Z+3	; 0x03
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	93 83       	std	Z+3, r25	; 0x03
     666:	82 83       	std	Z+2, r24	; 0x02
     668:	df 01       	movw	r26, r30
     66a:	01 c0       	rjmp	.+2      	; 0x66e <_fpadd_parts+0x28c>
     66c:	d2 01       	movw	r26, r4
     66e:	cd 01       	movw	r24, r26
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	e2 e1       	ldi	r30, 0x12	; 18
     676:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__epilogue_restores__>

0000067a <__subsf3>:
     67a:	a0 e2       	ldi	r26, 0x20	; 32
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	e3 e4       	ldi	r30, 0x43	; 67
     680:	f3 e0       	ldi	r31, 0x03	; 3
     682:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__prologue_saves__+0x18>
     686:	69 83       	std	Y+1, r22	; 0x01
     688:	7a 83       	std	Y+2, r23	; 0x02
     68a:	8b 83       	std	Y+3, r24	; 0x03
     68c:	9c 83       	std	Y+4, r25	; 0x04
     68e:	2d 83       	std	Y+5, r18	; 0x05
     690:	3e 83       	std	Y+6, r19	; 0x06
     692:	4f 83       	std	Y+7, r20	; 0x07
     694:	58 87       	std	Y+8, r21	; 0x08
     696:	e9 e0       	ldi	r30, 0x09	; 9
     698:	ee 2e       	mov	r14, r30
     69a:	f1 2c       	mov	r15, r1
     69c:	ec 0e       	add	r14, r28
     69e:	fd 1e       	adc	r15, r29
     6a0:	ce 01       	movw	r24, r28
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	b7 01       	movw	r22, r14
     6a6:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     6aa:	8e 01       	movw	r16, r28
     6ac:	0f 5e       	subi	r16, 0xEF	; 239
     6ae:	1f 4f       	sbci	r17, 0xFF	; 255
     6b0:	ce 01       	movw	r24, r28
     6b2:	05 96       	adiw	r24, 0x05	; 5
     6b4:	b8 01       	movw	r22, r16
     6b6:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     6ba:	8a 89       	ldd	r24, Y+18	; 0x12
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	89 27       	eor	r24, r25
     6c0:	8a 8b       	std	Y+18, r24	; 0x12
     6c2:	c7 01       	movw	r24, r14
     6c4:	b8 01       	movw	r22, r16
     6c6:	ae 01       	movw	r20, r28
     6c8:	47 5e       	subi	r20, 0xE7	; 231
     6ca:	5f 4f       	sbci	r21, 0xFF	; 255
     6cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_fpadd_parts>
     6d0:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     6d4:	a0 96       	adiw	r28, 0x20	; 32
     6d6:	e6 e0       	ldi	r30, 0x06	; 6
     6d8:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <__epilogue_restores__+0x18>

000006dc <__addsf3>:
     6dc:	a0 e2       	ldi	r26, 0x20	; 32
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	e4 e7       	ldi	r30, 0x74	; 116
     6e2:	f3 e0       	ldi	r31, 0x03	; 3
     6e4:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__prologue_saves__+0x18>
     6e8:	69 83       	std	Y+1, r22	; 0x01
     6ea:	7a 83       	std	Y+2, r23	; 0x02
     6ec:	8b 83       	std	Y+3, r24	; 0x03
     6ee:	9c 83       	std	Y+4, r25	; 0x04
     6f0:	2d 83       	std	Y+5, r18	; 0x05
     6f2:	3e 83       	std	Y+6, r19	; 0x06
     6f4:	4f 83       	std	Y+7, r20	; 0x07
     6f6:	58 87       	std	Y+8, r21	; 0x08
     6f8:	f9 e0       	ldi	r31, 0x09	; 9
     6fa:	ef 2e       	mov	r14, r31
     6fc:	f1 2c       	mov	r15, r1
     6fe:	ec 0e       	add	r14, r28
     700:	fd 1e       	adc	r15, r29
     702:	ce 01       	movw	r24, r28
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	b7 01       	movw	r22, r14
     708:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     70c:	8e 01       	movw	r16, r28
     70e:	0f 5e       	subi	r16, 0xEF	; 239
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	ce 01       	movw	r24, r28
     714:	05 96       	adiw	r24, 0x05	; 5
     716:	b8 01       	movw	r22, r16
     718:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     71c:	c7 01       	movw	r24, r14
     71e:	b8 01       	movw	r22, r16
     720:	ae 01       	movw	r20, r28
     722:	47 5e       	subi	r20, 0xE7	; 231
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_fpadd_parts>
     72a:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     72e:	a0 96       	adiw	r28, 0x20	; 32
     730:	e6 e0       	ldi	r30, 0x06	; 6
     732:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <__epilogue_restores__+0x18>

00000736 <__mulsf3>:
     736:	a0 e2       	ldi	r26, 0x20	; 32
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e1 ea       	ldi	r30, 0xA1	; 161
     73c:	f3 e0       	ldi	r31, 0x03	; 3
     73e:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__prologue_saves__>
     742:	69 83       	std	Y+1, r22	; 0x01
     744:	7a 83       	std	Y+2, r23	; 0x02
     746:	8b 83       	std	Y+3, r24	; 0x03
     748:	9c 83       	std	Y+4, r25	; 0x04
     74a:	2d 83       	std	Y+5, r18	; 0x05
     74c:	3e 83       	std	Y+6, r19	; 0x06
     74e:	4f 83       	std	Y+7, r20	; 0x07
     750:	58 87       	std	Y+8, r21	; 0x08
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	be 01       	movw	r22, r28
     758:	67 5f       	subi	r22, 0xF7	; 247
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     760:	ce 01       	movw	r24, r28
     762:	05 96       	adiw	r24, 0x05	; 5
     764:	be 01       	movw	r22, r28
     766:	6f 5e       	subi	r22, 0xEF	; 239
     768:	7f 4f       	sbci	r23, 0xFF	; 255
     76a:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     76e:	99 85       	ldd	r25, Y+9	; 0x09
     770:	92 30       	cpi	r25, 0x02	; 2
     772:	88 f0       	brcs	.+34     	; 0x796 <__mulsf3+0x60>
     774:	89 89       	ldd	r24, Y+17	; 0x11
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	c8 f0       	brcs	.+50     	; 0x7ac <__mulsf3+0x76>
     77a:	94 30       	cpi	r25, 0x04	; 4
     77c:	19 f4       	brne	.+6      	; 0x784 <__mulsf3+0x4e>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	51 f4       	brne	.+20     	; 0x796 <__mulsf3+0x60>
     782:	04 c0       	rjmp	.+8      	; 0x78c <__mulsf3+0x56>
     784:	84 30       	cpi	r24, 0x04	; 4
     786:	29 f4       	brne	.+10     	; 0x792 <__mulsf3+0x5c>
     788:	92 30       	cpi	r25, 0x02	; 2
     78a:	81 f4       	brne	.+32     	; 0x7ac <__mulsf3+0x76>
     78c:	80 e6       	ldi	r24, 0x60	; 96
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	c6 c0       	rjmp	.+396    	; 0x91e <__stack+0xbf>
     792:	92 30       	cpi	r25, 0x02	; 2
     794:	49 f4       	brne	.+18     	; 0x7a8 <__mulsf3+0x72>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	9a 85       	ldd	r25, Y+10	; 0x0a
     79a:	8a 89       	ldd	r24, Y+18	; 0x12
     79c:	98 13       	cpse	r25, r24
     79e:	21 e0       	ldi	r18, 0x01	; 1
     7a0:	2a 87       	std	Y+10, r18	; 0x0a
     7a2:	ce 01       	movw	r24, r28
     7a4:	09 96       	adiw	r24, 0x09	; 9
     7a6:	bb c0       	rjmp	.+374    	; 0x91e <__stack+0xbf>
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	49 f4       	brne	.+18     	; 0x7be <__mulsf3+0x88>
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b0:	8a 89       	ldd	r24, Y+18	; 0x12
     7b2:	98 13       	cpse	r25, r24
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	2a 8b       	std	Y+18, r18	; 0x12
     7b8:	ce 01       	movw	r24, r28
     7ba:	41 96       	adiw	r24, 0x11	; 17
     7bc:	b0 c0       	rjmp	.+352    	; 0x91e <__stack+0xbf>
     7be:	2d 84       	ldd	r2, Y+13	; 0x0d
     7c0:	3e 84       	ldd	r3, Y+14	; 0x0e
     7c2:	4f 84       	ldd	r4, Y+15	; 0x0f
     7c4:	58 88       	ldd	r5, Y+16	; 0x10
     7c6:	6d 88       	ldd	r6, Y+21	; 0x15
     7c8:	7e 88       	ldd	r7, Y+22	; 0x16
     7ca:	8f 88       	ldd	r8, Y+23	; 0x17
     7cc:	98 8c       	ldd	r9, Y+24	; 0x18
     7ce:	ee 24       	eor	r14, r14
     7d0:	ff 24       	eor	r15, r15
     7d2:	87 01       	movw	r16, r14
     7d4:	aa 24       	eor	r10, r10
     7d6:	bb 24       	eor	r11, r11
     7d8:	65 01       	movw	r12, r10
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	e0 e0       	ldi	r30, 0x00	; 0
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	c1 01       	movw	r24, r2
     7e8:	81 70       	andi	r24, 0x01	; 1
     7ea:	90 70       	andi	r25, 0x00	; 0
     7ec:	89 2b       	or	r24, r25
     7ee:	e9 f0       	breq	.+58     	; 0x82a <__mulsf3+0xf4>
     7f0:	e6 0c       	add	r14, r6
     7f2:	f7 1c       	adc	r15, r7
     7f4:	08 1d       	adc	r16, r8
     7f6:	19 1d       	adc	r17, r9
     7f8:	9a 01       	movw	r18, r20
     7fa:	ab 01       	movw	r20, r22
     7fc:	2a 0d       	add	r18, r10
     7fe:	3b 1d       	adc	r19, r11
     800:	4c 1d       	adc	r20, r12
     802:	5d 1d       	adc	r21, r13
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e6 14       	cp	r14, r6
     80e:	f7 04       	cpc	r15, r7
     810:	08 05       	cpc	r16, r8
     812:	19 05       	cpc	r17, r9
     814:	20 f4       	brcc	.+8      	; 0x81e <__mulsf3+0xe8>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e0       	ldi	r26, 0x00	; 0
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	ba 01       	movw	r22, r20
     820:	a9 01       	movw	r20, r18
     822:	48 0f       	add	r20, r24
     824:	59 1f       	adc	r21, r25
     826:	6a 1f       	adc	r22, r26
     828:	7b 1f       	adc	r23, r27
     82a:	aa 0c       	add	r10, r10
     82c:	bb 1c       	adc	r11, r11
     82e:	cc 1c       	adc	r12, r12
     830:	dd 1c       	adc	r13, r13
     832:	97 fe       	sbrs	r9, 7
     834:	08 c0       	rjmp	.+16     	; 0x846 <__mulsf3+0x110>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	a8 2a       	or	r10, r24
     840:	b9 2a       	or	r11, r25
     842:	ca 2a       	or	r12, r26
     844:	db 2a       	or	r13, r27
     846:	31 96       	adiw	r30, 0x01	; 1
     848:	e0 32       	cpi	r30, 0x20	; 32
     84a:	f1 05       	cpc	r31, r1
     84c:	49 f0       	breq	.+18     	; 0x860 <__stack+0x1>
     84e:	66 0c       	add	r6, r6
     850:	77 1c       	adc	r7, r7
     852:	88 1c       	adc	r8, r8
     854:	99 1c       	adc	r9, r9
     856:	56 94       	lsr	r5
     858:	47 94       	ror	r4
     85a:	37 94       	ror	r3
     85c:	27 94       	ror	r2
     85e:	c3 cf       	rjmp	.-122    	; 0x7e6 <__mulsf3+0xb0>
     860:	fa 85       	ldd	r31, Y+10	; 0x0a
     862:	ea 89       	ldd	r30, Y+18	; 0x12
     864:	2b 89       	ldd	r18, Y+19	; 0x13
     866:	3c 89       	ldd	r19, Y+20	; 0x14
     868:	8b 85       	ldd	r24, Y+11	; 0x0b
     86a:	9c 85       	ldd	r25, Y+12	; 0x0c
     86c:	28 0f       	add	r18, r24
     86e:	39 1f       	adc	r19, r25
     870:	2e 5f       	subi	r18, 0xFE	; 254
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	17 c0       	rjmp	.+46     	; 0x8a4 <__stack+0x45>
     876:	ca 01       	movw	r24, r20
     878:	81 70       	andi	r24, 0x01	; 1
     87a:	90 70       	andi	r25, 0x00	; 0
     87c:	89 2b       	or	r24, r25
     87e:	61 f0       	breq	.+24     	; 0x898 <__stack+0x39>
     880:	16 95       	lsr	r17
     882:	07 95       	ror	r16
     884:	f7 94       	ror	r15
     886:	e7 94       	ror	r14
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e8       	ldi	r27, 0x80	; 128
     890:	e8 2a       	or	r14, r24
     892:	f9 2a       	or	r15, r25
     894:	0a 2b       	or	r16, r26
     896:	1b 2b       	or	r17, r27
     898:	76 95       	lsr	r23
     89a:	67 95       	ror	r22
     89c:	57 95       	ror	r21
     89e:	47 95       	ror	r20
     8a0:	2f 5f       	subi	r18, 0xFF	; 255
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	77 fd       	sbrc	r23, 7
     8a6:	e7 cf       	rjmp	.-50     	; 0x876 <__stack+0x17>
     8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <__stack+0x63>
     8aa:	44 0f       	add	r20, r20
     8ac:	55 1f       	adc	r21, r21
     8ae:	66 1f       	adc	r22, r22
     8b0:	77 1f       	adc	r23, r23
     8b2:	17 fd       	sbrc	r17, 7
     8b4:	41 60       	ori	r20, 0x01	; 1
     8b6:	ee 0c       	add	r14, r14
     8b8:	ff 1c       	adc	r15, r15
     8ba:	00 1f       	adc	r16, r16
     8bc:	11 1f       	adc	r17, r17
     8be:	21 50       	subi	r18, 0x01	; 1
     8c0:	30 40       	sbci	r19, 0x00	; 0
     8c2:	40 30       	cpi	r20, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	59 07       	cpc	r21, r25
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	69 07       	cpc	r22, r25
     8cc:	90 e4       	ldi	r25, 0x40	; 64
     8ce:	79 07       	cpc	r23, r25
     8d0:	60 f3       	brcs	.-40     	; 0x8aa <__stack+0x4b>
     8d2:	2b 8f       	std	Y+27, r18	; 0x1b
     8d4:	3c 8f       	std	Y+28, r19	; 0x1c
     8d6:	db 01       	movw	r26, r22
     8d8:	ca 01       	movw	r24, r20
     8da:	8f 77       	andi	r24, 0x7F	; 127
     8dc:	90 70       	andi	r25, 0x00	; 0
     8de:	a0 70       	andi	r26, 0x00	; 0
     8e0:	b0 70       	andi	r27, 0x00	; 0
     8e2:	80 34       	cpi	r24, 0x40	; 64
     8e4:	91 05       	cpc	r25, r1
     8e6:	a1 05       	cpc	r26, r1
     8e8:	b1 05       	cpc	r27, r1
     8ea:	61 f4       	brne	.+24     	; 0x904 <__stack+0xa5>
     8ec:	47 fd       	sbrc	r20, 7
     8ee:	0a c0       	rjmp	.+20     	; 0x904 <__stack+0xa5>
     8f0:	e1 14       	cp	r14, r1
     8f2:	f1 04       	cpc	r15, r1
     8f4:	01 05       	cpc	r16, r1
     8f6:	11 05       	cpc	r17, r1
     8f8:	29 f0       	breq	.+10     	; 0x904 <__stack+0xa5>
     8fa:	40 5c       	subi	r20, 0xC0	; 192
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	6f 4f       	sbci	r22, 0xFF	; 255
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	40 78       	andi	r20, 0x80	; 128
     904:	1a 8e       	std	Y+26, r1	; 0x1a
     906:	fe 17       	cp	r31, r30
     908:	11 f0       	breq	.+4      	; 0x90e <__stack+0xaf>
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	8a 8f       	std	Y+26, r24	; 0x1a
     90e:	4d 8f       	std	Y+29, r20	; 0x1d
     910:	5e 8f       	std	Y+30, r21	; 0x1e
     912:	6f 8f       	std	Y+31, r22	; 0x1f
     914:	78 a3       	std	Y+32, r23	; 0x20
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	89 8f       	std	Y+25, r24	; 0x19
     91a:	ce 01       	movw	r24, r28
     91c:	49 96       	adiw	r24, 0x19	; 25
     91e:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     922:	a0 96       	adiw	r28, 0x20	; 32
     924:	e2 e1       	ldi	r30, 0x12	; 18
     926:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__epilogue_restores__>

0000092a <__divsf3>:
     92a:	a8 e1       	ldi	r26, 0x18	; 24
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	eb e9       	ldi	r30, 0x9B	; 155
     930:	f4 e0       	ldi	r31, 0x04	; 4
     932:	0c 94 e4 1b 	jmp	0x37c8	; 0x37c8 <__prologue_saves__+0x10>
     936:	69 83       	std	Y+1, r22	; 0x01
     938:	7a 83       	std	Y+2, r23	; 0x02
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	9c 83       	std	Y+4, r25	; 0x04
     93e:	2d 83       	std	Y+5, r18	; 0x05
     940:	3e 83       	std	Y+6, r19	; 0x06
     942:	4f 83       	std	Y+7, r20	; 0x07
     944:	58 87       	std	Y+8, r21	; 0x08
     946:	b9 e0       	ldi	r27, 0x09	; 9
     948:	eb 2e       	mov	r14, r27
     94a:	f1 2c       	mov	r15, r1
     94c:	ec 0e       	add	r14, r28
     94e:	fd 1e       	adc	r15, r29
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	b7 01       	movw	r22, r14
     956:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     95a:	8e 01       	movw	r16, r28
     95c:	0f 5e       	subi	r16, 0xEF	; 239
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	ce 01       	movw	r24, r28
     962:	05 96       	adiw	r24, 0x05	; 5
     964:	b8 01       	movw	r22, r16
     966:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     96a:	29 85       	ldd	r18, Y+9	; 0x09
     96c:	22 30       	cpi	r18, 0x02	; 2
     96e:	08 f4       	brcc	.+2      	; 0x972 <__divsf3+0x48>
     970:	7e c0       	rjmp	.+252    	; 0xa6e <__divsf3+0x144>
     972:	39 89       	ldd	r19, Y+17	; 0x11
     974:	32 30       	cpi	r19, 0x02	; 2
     976:	10 f4       	brcc	.+4      	; 0x97c <__divsf3+0x52>
     978:	b8 01       	movw	r22, r16
     97a:	7c c0       	rjmp	.+248    	; 0xa74 <__divsf3+0x14a>
     97c:	8a 85       	ldd	r24, Y+10	; 0x0a
     97e:	9a 89       	ldd	r25, Y+18	; 0x12
     980:	89 27       	eor	r24, r25
     982:	8a 87       	std	Y+10, r24	; 0x0a
     984:	24 30       	cpi	r18, 0x04	; 4
     986:	11 f0       	breq	.+4      	; 0x98c <__divsf3+0x62>
     988:	22 30       	cpi	r18, 0x02	; 2
     98a:	31 f4       	brne	.+12     	; 0x998 <__divsf3+0x6e>
     98c:	23 17       	cp	r18, r19
     98e:	09 f0       	breq	.+2      	; 0x992 <__divsf3+0x68>
     990:	6e c0       	rjmp	.+220    	; 0xa6e <__divsf3+0x144>
     992:	60 e6       	ldi	r22, 0x60	; 96
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	6e c0       	rjmp	.+220    	; 0xa74 <__divsf3+0x14a>
     998:	34 30       	cpi	r19, 0x04	; 4
     99a:	39 f4       	brne	.+14     	; 0x9aa <__divsf3+0x80>
     99c:	1d 86       	std	Y+13, r1	; 0x0d
     99e:	1e 86       	std	Y+14, r1	; 0x0e
     9a0:	1f 86       	std	Y+15, r1	; 0x0f
     9a2:	18 8a       	std	Y+16, r1	; 0x10
     9a4:	1c 86       	std	Y+12, r1	; 0x0c
     9a6:	1b 86       	std	Y+11, r1	; 0x0b
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__divsf3+0x88>
     9aa:	32 30       	cpi	r19, 0x02	; 2
     9ac:	21 f4       	brne	.+8      	; 0x9b6 <__divsf3+0x8c>
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	89 87       	std	Y+9, r24	; 0x09
     9b2:	b7 01       	movw	r22, r14
     9b4:	5f c0       	rjmp	.+190    	; 0xa74 <__divsf3+0x14a>
     9b6:	2b 85       	ldd	r18, Y+11	; 0x0b
     9b8:	3c 85       	ldd	r19, Y+12	; 0x0c
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	28 1b       	sub	r18, r24
     9c0:	39 0b       	sbc	r19, r25
     9c2:	3c 87       	std	Y+12, r19	; 0x0c
     9c4:	2b 87       	std	Y+11, r18	; 0x0b
     9c6:	ed 84       	ldd	r14, Y+13	; 0x0d
     9c8:	fe 84       	ldd	r15, Y+14	; 0x0e
     9ca:	0f 85       	ldd	r16, Y+15	; 0x0f
     9cc:	18 89       	ldd	r17, Y+16	; 0x10
     9ce:	ad 88       	ldd	r10, Y+21	; 0x15
     9d0:	be 88       	ldd	r11, Y+22	; 0x16
     9d2:	cf 88       	ldd	r12, Y+23	; 0x17
     9d4:	d8 8c       	ldd	r13, Y+24	; 0x18
     9d6:	ea 14       	cp	r14, r10
     9d8:	fb 04       	cpc	r15, r11
     9da:	0c 05       	cpc	r16, r12
     9dc:	1d 05       	cpc	r17, r13
     9de:	40 f4       	brcc	.+16     	; 0x9f0 <__divsf3+0xc6>
     9e0:	ee 0c       	add	r14, r14
     9e2:	ff 1c       	adc	r15, r15
     9e4:	00 1f       	adc	r16, r16
     9e6:	11 1f       	adc	r17, r17
     9e8:	21 50       	subi	r18, 0x01	; 1
     9ea:	30 40       	sbci	r19, 0x00	; 0
     9ec:	3c 87       	std	Y+12, r19	; 0x0c
     9ee:	2b 87       	std	Y+11, r18	; 0x0b
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e4       	ldi	r27, 0x40	; 64
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	ea 14       	cp	r14, r10
     a06:	fb 04       	cpc	r15, r11
     a08:	0c 05       	cpc	r16, r12
     a0a:	1d 05       	cpc	r17, r13
     a0c:	40 f0       	brcs	.+16     	; 0xa1e <__divsf3+0xf4>
     a0e:	28 2b       	or	r18, r24
     a10:	39 2b       	or	r19, r25
     a12:	4a 2b       	or	r20, r26
     a14:	5b 2b       	or	r21, r27
     a16:	ea 18       	sub	r14, r10
     a18:	fb 08       	sbc	r15, r11
     a1a:	0c 09       	sbc	r16, r12
     a1c:	1d 09       	sbc	r17, r13
     a1e:	b6 95       	lsr	r27
     a20:	a7 95       	ror	r26
     a22:	97 95       	ror	r25
     a24:	87 95       	ror	r24
     a26:	ee 0c       	add	r14, r14
     a28:	ff 1c       	adc	r15, r15
     a2a:	00 1f       	adc	r16, r16
     a2c:	11 1f       	adc	r17, r17
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	6f 31       	cpi	r22, 0x1F	; 31
     a34:	71 05       	cpc	r23, r1
     a36:	31 f7       	brne	.-52     	; 0xa04 <__divsf3+0xda>
     a38:	da 01       	movw	r26, r20
     a3a:	c9 01       	movw	r24, r18
     a3c:	8f 77       	andi	r24, 0x7F	; 127
     a3e:	90 70       	andi	r25, 0x00	; 0
     a40:	a0 70       	andi	r26, 0x00	; 0
     a42:	b0 70       	andi	r27, 0x00	; 0
     a44:	80 34       	cpi	r24, 0x40	; 64
     a46:	91 05       	cpc	r25, r1
     a48:	a1 05       	cpc	r26, r1
     a4a:	b1 05       	cpc	r27, r1
     a4c:	61 f4       	brne	.+24     	; 0xa66 <__divsf3+0x13c>
     a4e:	27 fd       	sbrc	r18, 7
     a50:	0a c0       	rjmp	.+20     	; 0xa66 <__divsf3+0x13c>
     a52:	e1 14       	cp	r14, r1
     a54:	f1 04       	cpc	r15, r1
     a56:	01 05       	cpc	r16, r1
     a58:	11 05       	cpc	r17, r1
     a5a:	29 f0       	breq	.+10     	; 0xa66 <__divsf3+0x13c>
     a5c:	20 5c       	subi	r18, 0xC0	; 192
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	4f 4f       	sbci	r20, 0xFF	; 255
     a62:	5f 4f       	sbci	r21, 0xFF	; 255
     a64:	20 78       	andi	r18, 0x80	; 128
     a66:	2d 87       	std	Y+13, r18	; 0x0d
     a68:	3e 87       	std	Y+14, r19	; 0x0e
     a6a:	4f 87       	std	Y+15, r20	; 0x0f
     a6c:	58 8b       	std	Y+16, r21	; 0x10
     a6e:	be 01       	movw	r22, r28
     a70:	67 5f       	subi	r22, 0xF7	; 247
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	cb 01       	movw	r24, r22
     a76:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	ea e0       	ldi	r30, 0x0A	; 10
     a7e:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__epilogue_restores__+0x10>

00000a82 <__gtsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__gtsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__gtsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 96 09 	call	0x132c	; 0x132c <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__gtsf2+0x58>
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <__epilogue_restores__+0x18>

00000ae2 <__gesf2>:
     ae2:	a8 e1       	ldi	r26, 0x18	; 24
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__prologue_saves__+0x18>
     aee:	69 83       	std	Y+1, r22	; 0x01
     af0:	7a 83       	std	Y+2, r23	; 0x02
     af2:	8b 83       	std	Y+3, r24	; 0x03
     af4:	9c 83       	std	Y+4, r25	; 0x04
     af6:	2d 83       	std	Y+5, r18	; 0x05
     af8:	3e 83       	std	Y+6, r19	; 0x06
     afa:	4f 83       	std	Y+7, r20	; 0x07
     afc:	58 87       	std	Y+8, r21	; 0x08
     afe:	89 e0       	ldi	r24, 0x09	; 9
     b00:	e8 2e       	mov	r14, r24
     b02:	f1 2c       	mov	r15, r1
     b04:	ec 0e       	add	r14, r28
     b06:	fd 1e       	adc	r15, r29
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	b7 01       	movw	r22, r14
     b0e:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     b12:	8e 01       	movw	r16, r28
     b14:	0f 5e       	subi	r16, 0xEF	; 239
     b16:	1f 4f       	sbci	r17, 0xFF	; 255
     b18:	ce 01       	movw	r24, r28
     b1a:	05 96       	adiw	r24, 0x05	; 5
     b1c:	b8 01       	movw	r22, r16
     b1e:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     b22:	89 85       	ldd	r24, Y+9	; 0x09
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	40 f0       	brcs	.+16     	; 0xb38 <__gesf2+0x56>
     b28:	89 89       	ldd	r24, Y+17	; 0x11
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	28 f0       	brcs	.+10     	; 0xb38 <__gesf2+0x56>
     b2e:	c7 01       	movw	r24, r14
     b30:	b8 01       	movw	r22, r16
     b32:	0e 94 96 09 	call	0x132c	; 0x132c <__fpcmp_parts_f>
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <__gesf2+0x58>
     b38:	8f ef       	ldi	r24, 0xFF	; 255
     b3a:	68 96       	adiw	r28, 0x18	; 24
     b3c:	e6 e0       	ldi	r30, 0x06	; 6
     b3e:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <__epilogue_restores__+0x18>

00000b42 <__ltsf2>:
     b42:	a8 e1       	ldi	r26, 0x18	; 24
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	e7 ea       	ldi	r30, 0xA7	; 167
     b48:	f5 e0       	ldi	r31, 0x05	; 5
     b4a:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__prologue_saves__+0x18>
     b4e:	69 83       	std	Y+1, r22	; 0x01
     b50:	7a 83       	std	Y+2, r23	; 0x02
     b52:	8b 83       	std	Y+3, r24	; 0x03
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	2d 83       	std	Y+5, r18	; 0x05
     b58:	3e 83       	std	Y+6, r19	; 0x06
     b5a:	4f 83       	std	Y+7, r20	; 0x07
     b5c:	58 87       	std	Y+8, r21	; 0x08
     b5e:	89 e0       	ldi	r24, 0x09	; 9
     b60:	e8 2e       	mov	r14, r24
     b62:	f1 2c       	mov	r15, r1
     b64:	ec 0e       	add	r14, r28
     b66:	fd 1e       	adc	r15, r29
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	b7 01       	movw	r22, r14
     b6e:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     b72:	8e 01       	movw	r16, r28
     b74:	0f 5e       	subi	r16, 0xEF	; 239
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	ce 01       	movw	r24, r28
     b7a:	05 96       	adiw	r24, 0x05	; 5
     b7c:	b8 01       	movw	r22, r16
     b7e:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     b82:	89 85       	ldd	r24, Y+9	; 0x09
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	40 f0       	brcs	.+16     	; 0xb98 <__ltsf2+0x56>
     b88:	89 89       	ldd	r24, Y+17	; 0x11
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	28 f0       	brcs	.+10     	; 0xb98 <__ltsf2+0x56>
     b8e:	c7 01       	movw	r24, r14
     b90:	b8 01       	movw	r22, r16
     b92:	0e 94 96 09 	call	0x132c	; 0x132c <__fpcmp_parts_f>
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <__ltsf2+0x58>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	68 96       	adiw	r28, 0x18	; 24
     b9c:	e6 e0       	ldi	r30, 0x06	; 6
     b9e:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <__epilogue_restores__+0x18>

00000ba2 <__floatsisf>:
     ba2:	a8 e0       	ldi	r26, 0x08	; 8
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 ed       	ldi	r30, 0xD7	; 215
     ba8:	f5 e0       	ldi	r31, 0x05	; 5
     baa:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__prologue_saves__+0x12>
     bae:	9b 01       	movw	r18, r22
     bb0:	ac 01       	movw	r20, r24
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	da 01       	movw	r26, r20
     bb8:	c9 01       	movw	r24, r18
     bba:	88 27       	eor	r24, r24
     bbc:	b7 fd       	sbrc	r27, 7
     bbe:	83 95       	inc	r24
     bc0:	99 27       	eor	r25, r25
     bc2:	aa 27       	eor	r26, r26
     bc4:	bb 27       	eor	r27, r27
     bc6:	b8 2e       	mov	r11, r24
     bc8:	21 15       	cp	r18, r1
     bca:	31 05       	cpc	r19, r1
     bcc:	41 05       	cpc	r20, r1
     bce:	51 05       	cpc	r21, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__floatsisf+0x36>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	3a c0       	rjmp	.+116    	; 0xc4c <__floatsisf+0xaa>
     bd8:	88 23       	and	r24, r24
     bda:	a9 f0       	breq	.+42     	; 0xc06 <__floatsisf+0x64>
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	38 07       	cpc	r19, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	48 07       	cpc	r20, r24
     be6:	80 e8       	ldi	r24, 0x80	; 128
     be8:	58 07       	cpc	r21, r24
     bea:	29 f4       	brne	.+10     	; 0xbf6 <__floatsisf+0x54>
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	9f ec       	ldi	r25, 0xCF	; 207
     bf4:	30 c0       	rjmp	.+96     	; 0xc56 <__floatsisf+0xb4>
     bf6:	ee 24       	eor	r14, r14
     bf8:	ff 24       	eor	r15, r15
     bfa:	87 01       	movw	r16, r14
     bfc:	e2 1a       	sub	r14, r18
     bfe:	f3 0a       	sbc	r15, r19
     c00:	04 0b       	sbc	r16, r20
     c02:	15 0b       	sbc	r17, r21
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <__floatsisf+0x68>
     c06:	79 01       	movw	r14, r18
     c08:	8a 01       	movw	r16, r20
     c0a:	8e e1       	ldi	r24, 0x1E	; 30
     c0c:	c8 2e       	mov	r12, r24
     c0e:	d1 2c       	mov	r13, r1
     c10:	dc 82       	std	Y+4, r13	; 0x04
     c12:	cb 82       	std	Y+3, r12	; 0x03
     c14:	ed 82       	std	Y+5, r14	; 0x05
     c16:	fe 82       	std	Y+6, r15	; 0x06
     c18:	0f 83       	std	Y+7, r16	; 0x07
     c1a:	18 87       	std	Y+8, r17	; 0x08
     c1c:	c8 01       	movw	r24, r16
     c1e:	b7 01       	movw	r22, r14
     c20:	0e 94 fa 07 	call	0xff4	; 0xff4 <__clzsi2>
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	18 16       	cp	r1, r24
     c28:	19 06       	cpc	r1, r25
     c2a:	84 f4       	brge	.+32     	; 0xc4c <__floatsisf+0xaa>
     c2c:	08 2e       	mov	r0, r24
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__floatsisf+0x96>
     c30:	ee 0c       	add	r14, r14
     c32:	ff 1c       	adc	r15, r15
     c34:	00 1f       	adc	r16, r16
     c36:	11 1f       	adc	r17, r17
     c38:	0a 94       	dec	r0
     c3a:	d2 f7       	brpl	.-12     	; 0xc30 <__floatsisf+0x8e>
     c3c:	ed 82       	std	Y+5, r14	; 0x05
     c3e:	fe 82       	std	Y+6, r15	; 0x06
     c40:	0f 83       	std	Y+7, r16	; 0x07
     c42:	18 87       	std	Y+8, r17	; 0x08
     c44:	c8 1a       	sub	r12, r24
     c46:	d9 0a       	sbc	r13, r25
     c48:	dc 82       	std	Y+4, r13	; 0x04
     c4a:	cb 82       	std	Y+3, r12	; 0x03
     c4c:	ba 82       	std	Y+2, r11	; 0x02
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     c56:	28 96       	adiw	r28, 0x08	; 8
     c58:	e9 e0       	ldi	r30, 0x09	; 9
     c5a:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <__epilogue_restores__+0x12>

00000c5e <__fixsfsi>:
     c5e:	ac e0       	ldi	r26, 0x0C	; 12
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e5 e3       	ldi	r30, 0x35	; 53
     c64:	f6 e0       	ldi	r31, 0x06	; 6
     c66:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__prologue_saves__+0x20>
     c6a:	69 83       	std	Y+1, r22	; 0x01
     c6c:	7a 83       	std	Y+2, r23	; 0x02
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	9c 83       	std	Y+4, r25	; 0x04
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	be 01       	movw	r22, r28
     c78:	6b 5f       	subi	r22, 0xFB	; 251
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	0e 94 1e 09 	call	0x123c	; 0x123c <__unpack_f>
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	61 f1       	breq	.+88     	; 0xcde <__fixsfsi+0x80>
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	50 f1       	brcs	.+84     	; 0xcde <__fixsfsi+0x80>
     c8a:	84 30       	cpi	r24, 0x04	; 4
     c8c:	21 f4       	brne	.+8      	; 0xc96 <__fixsfsi+0x38>
     c8e:	8e 81       	ldd	r24, Y+6	; 0x06
     c90:	88 23       	and	r24, r24
     c92:	51 f1       	breq	.+84     	; 0xce8 <__fixsfsi+0x8a>
     c94:	2e c0       	rjmp	.+92     	; 0xcf2 <__fixsfsi+0x94>
     c96:	2f 81       	ldd	r18, Y+7	; 0x07
     c98:	38 85       	ldd	r19, Y+8	; 0x08
     c9a:	37 fd       	sbrc	r19, 7
     c9c:	20 c0       	rjmp	.+64     	; 0xcde <__fixsfsi+0x80>
     c9e:	6e 81       	ldd	r22, Y+6	; 0x06
     ca0:	2f 31       	cpi	r18, 0x1F	; 31
     ca2:	31 05       	cpc	r19, r1
     ca4:	1c f0       	brlt	.+6      	; 0xcac <__fixsfsi+0x4e>
     ca6:	66 23       	and	r22, r22
     ca8:	f9 f0       	breq	.+62     	; 0xce8 <__fixsfsi+0x8a>
     caa:	23 c0       	rjmp	.+70     	; 0xcf2 <__fixsfsi+0x94>
     cac:	8e e1       	ldi	r24, 0x1E	; 30
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	82 1b       	sub	r24, r18
     cb2:	93 0b       	sbc	r25, r19
     cb4:	29 85       	ldd	r18, Y+9	; 0x09
     cb6:	3a 85       	ldd	r19, Y+10	; 0x0a
     cb8:	4b 85       	ldd	r20, Y+11	; 0x0b
     cba:	5c 85       	ldd	r21, Y+12	; 0x0c
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <__fixsfsi+0x68>
     cbe:	56 95       	lsr	r21
     cc0:	47 95       	ror	r20
     cc2:	37 95       	ror	r19
     cc4:	27 95       	ror	r18
     cc6:	8a 95       	dec	r24
     cc8:	d2 f7       	brpl	.-12     	; 0xcbe <__fixsfsi+0x60>
     cca:	66 23       	and	r22, r22
     ccc:	b1 f0       	breq	.+44     	; 0xcfa <__fixsfsi+0x9c>
     cce:	50 95       	com	r21
     cd0:	40 95       	com	r20
     cd2:	30 95       	com	r19
     cd4:	21 95       	neg	r18
     cd6:	3f 4f       	sbci	r19, 0xFF	; 255
     cd8:	4f 4f       	sbci	r20, 0xFF	; 255
     cda:	5f 4f       	sbci	r21, 0xFF	; 255
     cdc:	0e c0       	rjmp	.+28     	; 0xcfa <__fixsfsi+0x9c>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	09 c0       	rjmp	.+18     	; 0xcfa <__fixsfsi+0x9c>
     ce8:	2f ef       	ldi	r18, 0xFF	; 255
     cea:	3f ef       	ldi	r19, 0xFF	; 255
     cec:	4f ef       	ldi	r20, 0xFF	; 255
     cee:	5f e7       	ldi	r21, 0x7F	; 127
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__fixsfsi+0x9c>
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e8       	ldi	r21, 0x80	; 128
     cfa:	b9 01       	movw	r22, r18
     cfc:	ca 01       	movw	r24, r20
     cfe:	2c 96       	adiw	r28, 0x0c	; 12
     d00:	e2 e0       	ldi	r30, 0x02	; 2
     d02:	0c 94 08 1c 	jmp	0x3810	; 0x3810 <__epilogue_restores__+0x20>

00000d06 <__floatunsisf>:
     d06:	a8 e0       	ldi	r26, 0x08	; 8
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e9 e8       	ldi	r30, 0x89	; 137
     d0c:	f6 e0       	ldi	r31, 0x06	; 6
     d0e:	0c 94 e4 1b 	jmp	0x37c8	; 0x37c8 <__prologue_saves__+0x10>
     d12:	7b 01       	movw	r14, r22
     d14:	8c 01       	movw	r16, r24
     d16:	61 15       	cp	r22, r1
     d18:	71 05       	cpc	r23, r1
     d1a:	81 05       	cpc	r24, r1
     d1c:	91 05       	cpc	r25, r1
     d1e:	19 f4       	brne	.+6      	; 0xd26 <__floatunsisf+0x20>
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	60 c0       	rjmp	.+192    	; 0xde6 <__floatunsisf+0xe0>
     d26:	83 e0       	ldi	r24, 0x03	; 3
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	8e e1       	ldi	r24, 0x1E	; 30
     d2c:	c8 2e       	mov	r12, r24
     d2e:	d1 2c       	mov	r13, r1
     d30:	dc 82       	std	Y+4, r13	; 0x04
     d32:	cb 82       	std	Y+3, r12	; 0x03
     d34:	ed 82       	std	Y+5, r14	; 0x05
     d36:	fe 82       	std	Y+6, r15	; 0x06
     d38:	0f 83       	std	Y+7, r16	; 0x07
     d3a:	18 87       	std	Y+8, r17	; 0x08
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	0e 94 fa 07 	call	0xff4	; 0xff4 <__clzsi2>
     d44:	fc 01       	movw	r30, r24
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	f7 ff       	sbrs	r31, 7
     d4a:	3b c0       	rjmp	.+118    	; 0xdc2 <__floatunsisf+0xbc>
     d4c:	22 27       	eor	r18, r18
     d4e:	33 27       	eor	r19, r19
     d50:	2e 1b       	sub	r18, r30
     d52:	3f 0b       	sbc	r19, r31
     d54:	57 01       	movw	r10, r14
     d56:	68 01       	movw	r12, r16
     d58:	02 2e       	mov	r0, r18
     d5a:	04 c0       	rjmp	.+8      	; 0xd64 <__floatunsisf+0x5e>
     d5c:	d6 94       	lsr	r13
     d5e:	c7 94       	ror	r12
     d60:	b7 94       	ror	r11
     d62:	a7 94       	ror	r10
     d64:	0a 94       	dec	r0
     d66:	d2 f7       	brpl	.-12     	; 0xd5c <__floatunsisf+0x56>
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 e0       	ldi	r26, 0x00	; 0
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <__floatunsisf+0x7c>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	aa 1f       	adc	r26, r26
     d80:	bb 1f       	adc	r27, r27
     d82:	2a 95       	dec	r18
     d84:	d2 f7       	brpl	.-12     	; 0xd7a <__floatunsisf+0x74>
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	a1 09       	sbc	r26, r1
     d8a:	b1 09       	sbc	r27, r1
     d8c:	8e 21       	and	r24, r14
     d8e:	9f 21       	and	r25, r15
     d90:	a0 23       	and	r26, r16
     d92:	b1 23       	and	r27, r17
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	a1 05       	cpc	r26, r1
     d98:	b1 05       	cpc	r27, r1
     d9a:	21 f0       	breq	.+8      	; 0xda4 <__floatunsisf+0x9e>
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	4a 29       	or	r20, r10
     da6:	5b 29       	or	r21, r11
     da8:	6c 29       	or	r22, r12
     daa:	7d 29       	or	r23, r13
     dac:	4d 83       	std	Y+5, r20	; 0x05
     dae:	5e 83       	std	Y+6, r21	; 0x06
     db0:	6f 83       	std	Y+7, r22	; 0x07
     db2:	78 87       	std	Y+8, r23	; 0x08
     db4:	8e e1       	ldi	r24, 0x1E	; 30
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	8e 1b       	sub	r24, r30
     dba:	9f 0b       	sbc	r25, r31
     dbc:	9c 83       	std	Y+4, r25	; 0x04
     dbe:	8b 83       	std	Y+3, r24	; 0x03
     dc0:	12 c0       	rjmp	.+36     	; 0xde6 <__floatunsisf+0xe0>
     dc2:	30 97       	sbiw	r30, 0x00	; 0
     dc4:	81 f0       	breq	.+32     	; 0xde6 <__floatunsisf+0xe0>
     dc6:	0e 2e       	mov	r0, r30
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <__floatunsisf+0xcc>
     dca:	ee 0c       	add	r14, r14
     dcc:	ff 1c       	adc	r15, r15
     dce:	00 1f       	adc	r16, r16
     dd0:	11 1f       	adc	r17, r17
     dd2:	0a 94       	dec	r0
     dd4:	d2 f7       	brpl	.-12     	; 0xdca <__floatunsisf+0xc4>
     dd6:	ed 82       	std	Y+5, r14	; 0x05
     dd8:	fe 82       	std	Y+6, r15	; 0x06
     dda:	0f 83       	std	Y+7, r16	; 0x07
     ddc:	18 87       	std	Y+8, r17	; 0x08
     dde:	ce 1a       	sub	r12, r30
     de0:	df 0a       	sbc	r13, r31
     de2:	dc 82       	std	Y+4, r13	; 0x04
     de4:	cb 82       	std	Y+3, r12	; 0x03
     de6:	1a 82       	std	Y+2, r1	; 0x02
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 49 08 	call	0x1092	; 0x1092 <__pack_f>
     df0:	28 96       	adiw	r28, 0x08	; 8
     df2:	ea e0       	ldi	r30, 0x0A	; 10
     df4:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__epilogue_restores__+0x10>

00000df8 <__lshrdi3>:
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	60 97       	sbiw	r28, 0x10	; 16
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	a8 2f       	mov	r26, r24
     e14:	00 23       	and	r16, r16
     e16:	09 f4       	brne	.+2      	; 0xe1a <__lshrdi3+0x22>
     e18:	61 c0       	rjmp	.+194    	; 0xedc <__lshrdi3+0xe4>
     e1a:	7e 01       	movw	r14, r28
     e1c:	08 94       	sec
     e1e:	e1 1c       	adc	r14, r1
     e20:	f1 1c       	adc	r15, r1
     e22:	88 e0       	ldi	r24, 0x08	; 8
     e24:	f7 01       	movw	r30, r14
     e26:	11 92       	st	Z+, r1
     e28:	8a 95       	dec	r24
     e2a:	e9 f7       	brne	.-6      	; 0xe26 <__lshrdi3+0x2e>
     e2c:	29 83       	std	Y+1, r18	; 0x01
     e2e:	3a 83       	std	Y+2, r19	; 0x02
     e30:	4b 83       	std	Y+3, r20	; 0x03
     e32:	5c 83       	std	Y+4, r21	; 0x04
     e34:	6d 83       	std	Y+5, r22	; 0x05
     e36:	7e 83       	std	Y+6, r23	; 0x06
     e38:	af 83       	std	Y+7, r26	; 0x07
     e3a:	98 87       	std	Y+8, r25	; 0x08
     e3c:	80 e2       	ldi	r24, 0x20	; 32
     e3e:	80 1b       	sub	r24, r16
     e40:	e8 2f       	mov	r30, r24
     e42:	ff 27       	eor	r31, r31
     e44:	e7 fd       	sbrc	r30, 7
     e46:	f0 95       	com	r31
     e48:	4d 81       	ldd	r20, Y+5	; 0x05
     e4a:	5e 81       	ldd	r21, Y+6	; 0x06
     e4c:	6f 81       	ldd	r22, Y+7	; 0x07
     e4e:	78 85       	ldd	r23, Y+8	; 0x08
     e50:	18 16       	cp	r1, r24
     e52:	84 f0       	brlt	.+32     	; 0xe74 <__lshrdi3+0x7c>
     e54:	1d 86       	std	Y+13, r1	; 0x0d
     e56:	1e 86       	std	Y+14, r1	; 0x0e
     e58:	1f 86       	std	Y+15, r1	; 0x0f
     e5a:	18 8a       	std	Y+16, r1	; 0x10
     e5c:	88 27       	eor	r24, r24
     e5e:	99 27       	eor	r25, r25
     e60:	8e 1b       	sub	r24, r30
     e62:	9f 0b       	sbc	r25, r31
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <__lshrdi3+0x76>
     e66:	76 95       	lsr	r23
     e68:	67 95       	ror	r22
     e6a:	57 95       	ror	r21
     e6c:	47 95       	ror	r20
     e6e:	8a 95       	dec	r24
     e70:	d2 f7       	brpl	.-12     	; 0xe66 <__lshrdi3+0x6e>
     e72:	28 c0       	rjmp	.+80     	; 0xec4 <__lshrdi3+0xcc>
     e74:	20 2f       	mov	r18, r16
     e76:	33 27       	eor	r19, r19
     e78:	27 fd       	sbrc	r18, 7
     e7a:	30 95       	com	r19
     e7c:	db 01       	movw	r26, r22
     e7e:	ca 01       	movw	r24, r20
     e80:	02 2e       	mov	r0, r18
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <__lshrdi3+0x94>
     e84:	b6 95       	lsr	r27
     e86:	a7 95       	ror	r26
     e88:	97 95       	ror	r25
     e8a:	87 95       	ror	r24
     e8c:	0a 94       	dec	r0
     e8e:	d2 f7       	brpl	.-12     	; 0xe84 <__lshrdi3+0x8c>
     e90:	8d 87       	std	Y+13, r24	; 0x0d
     e92:	9e 87       	std	Y+14, r25	; 0x0e
     e94:	af 87       	std	Y+15, r26	; 0x0f
     e96:	b8 8b       	std	Y+16, r27	; 0x10
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <__lshrdi3+0xaa>
     e9a:	44 0f       	add	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	66 1f       	adc	r22, r22
     ea0:	77 1f       	adc	r23, r23
     ea2:	ea 95       	dec	r30
     ea4:	d2 f7       	brpl	.-12     	; 0xe9a <__lshrdi3+0xa2>
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	ab 81       	ldd	r26, Y+3	; 0x03
     eac:	bc 81       	ldd	r27, Y+4	; 0x04
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <__lshrdi3+0xc0>
     eb0:	b6 95       	lsr	r27
     eb2:	a7 95       	ror	r26
     eb4:	97 95       	ror	r25
     eb6:	87 95       	ror	r24
     eb8:	2a 95       	dec	r18
     eba:	d2 f7       	brpl	.-12     	; 0xeb0 <__lshrdi3+0xb8>
     ebc:	48 2b       	or	r20, r24
     ebe:	59 2b       	or	r21, r25
     ec0:	6a 2b       	or	r22, r26
     ec2:	7b 2b       	or	r23, r27
     ec4:	49 87       	std	Y+9, r20	; 0x09
     ec6:	5a 87       	std	Y+10, r21	; 0x0a
     ec8:	6b 87       	std	Y+11, r22	; 0x0b
     eca:	7c 87       	std	Y+12, r23	; 0x0c
     ecc:	29 85       	ldd	r18, Y+9	; 0x09
     ece:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed0:	4b 85       	ldd	r20, Y+11	; 0x0b
     ed2:	5c 85       	ldd	r21, Y+12	; 0x0c
     ed4:	6d 85       	ldd	r22, Y+13	; 0x0d
     ed6:	7e 85       	ldd	r23, Y+14	; 0x0e
     ed8:	af 85       	ldd	r26, Y+15	; 0x0f
     eda:	98 89       	ldd	r25, Y+16	; 0x10
     edc:	8a 2f       	mov	r24, r26
     ede:	60 96       	adiw	r28, 0x10	; 16
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	08 95       	ret

00000ef6 <__ashldi3>:
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	60 97       	sbiw	r28, 0x10	; 16
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	a8 2f       	mov	r26, r24
     f12:	00 23       	and	r16, r16
     f14:	09 f4       	brne	.+2      	; 0xf18 <__ashldi3+0x22>
     f16:	61 c0       	rjmp	.+194    	; 0xfda <__ashldi3+0xe4>
     f18:	7e 01       	movw	r14, r28
     f1a:	08 94       	sec
     f1c:	e1 1c       	adc	r14, r1
     f1e:	f1 1c       	adc	r15, r1
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	f7 01       	movw	r30, r14
     f24:	11 92       	st	Z+, r1
     f26:	8a 95       	dec	r24
     f28:	e9 f7       	brne	.-6      	; 0xf24 <__ashldi3+0x2e>
     f2a:	29 83       	std	Y+1, r18	; 0x01
     f2c:	3a 83       	std	Y+2, r19	; 0x02
     f2e:	4b 83       	std	Y+3, r20	; 0x03
     f30:	5c 83       	std	Y+4, r21	; 0x04
     f32:	6d 83       	std	Y+5, r22	; 0x05
     f34:	7e 83       	std	Y+6, r23	; 0x06
     f36:	af 83       	std	Y+7, r26	; 0x07
     f38:	98 87       	std	Y+8, r25	; 0x08
     f3a:	80 e2       	ldi	r24, 0x20	; 32
     f3c:	80 1b       	sub	r24, r16
     f3e:	e8 2f       	mov	r30, r24
     f40:	ff 27       	eor	r31, r31
     f42:	e7 fd       	sbrc	r30, 7
     f44:	f0 95       	com	r31
     f46:	49 81       	ldd	r20, Y+1	; 0x01
     f48:	5a 81       	ldd	r21, Y+2	; 0x02
     f4a:	6b 81       	ldd	r22, Y+3	; 0x03
     f4c:	7c 81       	ldd	r23, Y+4	; 0x04
     f4e:	18 16       	cp	r1, r24
     f50:	84 f0       	brlt	.+32     	; 0xf72 <__ashldi3+0x7c>
     f52:	19 86       	std	Y+9, r1	; 0x09
     f54:	1a 86       	std	Y+10, r1	; 0x0a
     f56:	1b 86       	std	Y+11, r1	; 0x0b
     f58:	1c 86       	std	Y+12, r1	; 0x0c
     f5a:	88 27       	eor	r24, r24
     f5c:	99 27       	eor	r25, r25
     f5e:	8e 1b       	sub	r24, r30
     f60:	9f 0b       	sbc	r25, r31
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <__ashldi3+0x76>
     f64:	44 0f       	add	r20, r20
     f66:	55 1f       	adc	r21, r21
     f68:	66 1f       	adc	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	8a 95       	dec	r24
     f6e:	d2 f7       	brpl	.-12     	; 0xf64 <__ashldi3+0x6e>
     f70:	28 c0       	rjmp	.+80     	; 0xfc2 <__ashldi3+0xcc>
     f72:	20 2f       	mov	r18, r16
     f74:	33 27       	eor	r19, r19
     f76:	27 fd       	sbrc	r18, 7
     f78:	30 95       	com	r19
     f7a:	db 01       	movw	r26, r22
     f7c:	ca 01       	movw	r24, r20
     f7e:	02 2e       	mov	r0, r18
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <__ashldi3+0x94>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	aa 1f       	adc	r26, r26
     f88:	bb 1f       	adc	r27, r27
     f8a:	0a 94       	dec	r0
     f8c:	d2 f7       	brpl	.-12     	; 0xf82 <__ashldi3+0x8c>
     f8e:	89 87       	std	Y+9, r24	; 0x09
     f90:	9a 87       	std	Y+10, r25	; 0x0a
     f92:	ab 87       	std	Y+11, r26	; 0x0b
     f94:	bc 87       	std	Y+12, r27	; 0x0c
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <__ashldi3+0xaa>
     f98:	76 95       	lsr	r23
     f9a:	67 95       	ror	r22
     f9c:	57 95       	ror	r21
     f9e:	47 95       	ror	r20
     fa0:	ea 95       	dec	r30
     fa2:	d2 f7       	brpl	.-12     	; 0xf98 <__ashldi3+0xa2>
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	af 81       	ldd	r26, Y+7	; 0x07
     faa:	b8 85       	ldd	r27, Y+8	; 0x08
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <__ashldi3+0xc0>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	aa 1f       	adc	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	2a 95       	dec	r18
     fb8:	d2 f7       	brpl	.-12     	; 0xfae <__ashldi3+0xb8>
     fba:	48 2b       	or	r20, r24
     fbc:	59 2b       	or	r21, r25
     fbe:	6a 2b       	or	r22, r26
     fc0:	7b 2b       	or	r23, r27
     fc2:	4d 87       	std	Y+13, r20	; 0x0d
     fc4:	5e 87       	std	Y+14, r21	; 0x0e
     fc6:	6f 87       	std	Y+15, r22	; 0x0f
     fc8:	78 8b       	std	Y+16, r23	; 0x10
     fca:	29 85       	ldd	r18, Y+9	; 0x09
     fcc:	3a 85       	ldd	r19, Y+10	; 0x0a
     fce:	4b 85       	ldd	r20, Y+11	; 0x0b
     fd0:	5c 85       	ldd	r21, Y+12	; 0x0c
     fd2:	6d 85       	ldd	r22, Y+13	; 0x0d
     fd4:	7e 85       	ldd	r23, Y+14	; 0x0e
     fd6:	af 85       	ldd	r26, Y+15	; 0x0f
     fd8:	98 89       	ldd	r25, Y+16	; 0x10
     fda:	8a 2f       	mov	r24, r26
     fdc:	60 96       	adiw	r28, 0x10	; 16
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	08 95       	ret

00000ff4 <__clzsi2>:
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	7b 01       	movw	r14, r22
     ffe:	8c 01       	movw	r16, r24
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	e8 16       	cp	r14, r24
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	f8 06       	cpc	r15, r24
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	08 07       	cpc	r16, r24
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	18 07       	cpc	r17, r24
    1010:	88 f4       	brcc	.+34     	; 0x1034 <__clzsi2+0x40>
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	e8 16       	cp	r14, r24
    1016:	f1 04       	cpc	r15, r1
    1018:	01 05       	cpc	r16, r1
    101a:	11 05       	cpc	r17, r1
    101c:	31 f0       	breq	.+12     	; 0x102a <__clzsi2+0x36>
    101e:	28 f0       	brcs	.+10     	; 0x102a <__clzsi2+0x36>
    1020:	88 e0       	ldi	r24, 0x08	; 8
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	17 c0       	rjmp	.+46     	; 0x1058 <__clzsi2+0x64>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a0 e0       	ldi	r26, 0x00	; 0
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	12 c0       	rjmp	.+36     	; 0x1058 <__clzsi2+0x64>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	e8 16       	cp	r14, r24
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	f8 06       	cpc	r15, r24
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 07       	cpc	r16, r24
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	18 07       	cpc	r17, r24
    1044:	28 f0       	brcs	.+10     	; 0x1050 <__clzsi2+0x5c>
    1046:	88 e1       	ldi	r24, 0x18	; 24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a0 e0       	ldi	r26, 0x00	; 0
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__clzsi2+0x64>
    1050:	80 e1       	ldi	r24, 0x10	; 16
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	20 e2       	ldi	r18, 0x20	; 32
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	28 1b       	sub	r18, r24
    1062:	39 0b       	sbc	r19, r25
    1064:	4a 0b       	sbc	r20, r26
    1066:	5b 0b       	sbc	r21, r27
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <__clzsi2+0x7e>
    106a:	16 95       	lsr	r17
    106c:	07 95       	ror	r16
    106e:	f7 94       	ror	r15
    1070:	e7 94       	ror	r14
    1072:	8a 95       	dec	r24
    1074:	d2 f7       	brpl	.-12     	; 0x106a <__clzsi2+0x76>
    1076:	f7 01       	movw	r30, r14
    1078:	e8 59       	subi	r30, 0x98	; 152
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	80 81       	ld	r24, Z
    107e:	28 1b       	sub	r18, r24
    1080:	31 09       	sbc	r19, r1
    1082:	41 09       	sbc	r20, r1
    1084:	51 09       	sbc	r21, r1
    1086:	c9 01       	movw	r24, r18
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	08 95       	ret

00001092 <__pack_f>:
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	fc 01       	movw	r30, r24
    109e:	e4 80       	ldd	r14, Z+4	; 0x04
    10a0:	f5 80       	ldd	r15, Z+5	; 0x05
    10a2:	06 81       	ldd	r16, Z+6	; 0x06
    10a4:	17 81       	ldd	r17, Z+7	; 0x07
    10a6:	d1 80       	ldd	r13, Z+1	; 0x01
    10a8:	80 81       	ld	r24, Z
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	48 f4       	brcc	.+18     	; 0x10c0 <__pack_f+0x2e>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a0 e1       	ldi	r26, 0x10	; 16
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e8 2a       	or	r14, r24
    10b8:	f9 2a       	or	r15, r25
    10ba:	0a 2b       	or	r16, r26
    10bc:	1b 2b       	or	r17, r27
    10be:	a5 c0       	rjmp	.+330    	; 0x120a <__pack_f+0x178>
    10c0:	84 30       	cpi	r24, 0x04	; 4
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <__pack_f+0x34>
    10c4:	9f c0       	rjmp	.+318    	; 0x1204 <__pack_f+0x172>
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <__pack_f+0x40>
    10ca:	ee 24       	eor	r14, r14
    10cc:	ff 24       	eor	r15, r15
    10ce:	87 01       	movw	r16, r14
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <__pack_f+0x4a>
    10d2:	e1 14       	cp	r14, r1
    10d4:	f1 04       	cpc	r15, r1
    10d6:	01 05       	cpc	r16, r1
    10d8:	11 05       	cpc	r17, r1
    10da:	19 f4       	brne	.+6      	; 0x10e2 <__pack_f+0x50>
    10dc:	e0 e0       	ldi	r30, 0x00	; 0
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	96 c0       	rjmp	.+300    	; 0x120e <__pack_f+0x17c>
    10e2:	62 81       	ldd	r22, Z+2	; 0x02
    10e4:	73 81       	ldd	r23, Z+3	; 0x03
    10e6:	9f ef       	ldi	r25, 0xFF	; 255
    10e8:	62 38       	cpi	r22, 0x82	; 130
    10ea:	79 07       	cpc	r23, r25
    10ec:	0c f0       	brlt	.+2      	; 0x10f0 <__pack_f+0x5e>
    10ee:	5b c0       	rjmp	.+182    	; 0x11a6 <__pack_f+0x114>
    10f0:	22 e8       	ldi	r18, 0x82	; 130
    10f2:	3f ef       	ldi	r19, 0xFF	; 255
    10f4:	26 1b       	sub	r18, r22
    10f6:	37 0b       	sbc	r19, r23
    10f8:	2a 31       	cpi	r18, 0x1A	; 26
    10fa:	31 05       	cpc	r19, r1
    10fc:	2c f0       	brlt	.+10     	; 0x1108 <__pack_f+0x76>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	2a c0       	rjmp	.+84     	; 0x115c <__pack_f+0xca>
    1108:	b8 01       	movw	r22, r16
    110a:	a7 01       	movw	r20, r14
    110c:	02 2e       	mov	r0, r18
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <__pack_f+0x86>
    1110:	76 95       	lsr	r23
    1112:	67 95       	ror	r22
    1114:	57 95       	ror	r21
    1116:	47 95       	ror	r20
    1118:	0a 94       	dec	r0
    111a:	d2 f7       	brpl	.-12     	; 0x1110 <__pack_f+0x7e>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	04 c0       	rjmp	.+8      	; 0x112e <__pack_f+0x9c>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	aa 1f       	adc	r26, r26
    112c:	bb 1f       	adc	r27, r27
    112e:	2a 95       	dec	r18
    1130:	d2 f7       	brpl	.-12     	; 0x1126 <__pack_f+0x94>
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	a1 09       	sbc	r26, r1
    1136:	b1 09       	sbc	r27, r1
    1138:	8e 21       	and	r24, r14
    113a:	9f 21       	and	r25, r15
    113c:	a0 23       	and	r26, r16
    113e:	b1 23       	and	r27, r17
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	a1 05       	cpc	r26, r1
    1144:	b1 05       	cpc	r27, r1
    1146:	21 f0       	breq	.+8      	; 0x1150 <__pack_f+0xbe>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a0 e0       	ldi	r26, 0x00	; 0
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	9a 01       	movw	r18, r20
    1152:	ab 01       	movw	r20, r22
    1154:	28 2b       	or	r18, r24
    1156:	39 2b       	or	r19, r25
    1158:	4a 2b       	or	r20, r26
    115a:	5b 2b       	or	r21, r27
    115c:	da 01       	movw	r26, r20
    115e:	c9 01       	movw	r24, r18
    1160:	8f 77       	andi	r24, 0x7F	; 127
    1162:	90 70       	andi	r25, 0x00	; 0
    1164:	a0 70       	andi	r26, 0x00	; 0
    1166:	b0 70       	andi	r27, 0x00	; 0
    1168:	80 34       	cpi	r24, 0x40	; 64
    116a:	91 05       	cpc	r25, r1
    116c:	a1 05       	cpc	r26, r1
    116e:	b1 05       	cpc	r27, r1
    1170:	39 f4       	brne	.+14     	; 0x1180 <__pack_f+0xee>
    1172:	27 ff       	sbrs	r18, 7
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <__pack_f+0xf6>
    1176:	20 5c       	subi	r18, 0xC0	; 192
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	4f 4f       	sbci	r20, 0xFF	; 255
    117c:	5f 4f       	sbci	r21, 0xFF	; 255
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <__pack_f+0xf6>
    1180:	21 5c       	subi	r18, 0xC1	; 193
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	4f 4f       	sbci	r20, 0xFF	; 255
    1186:	5f 4f       	sbci	r21, 0xFF	; 255
    1188:	e0 e0       	ldi	r30, 0x00	; 0
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	20 30       	cpi	r18, 0x00	; 0
    118e:	a0 e0       	ldi	r26, 0x00	; 0
    1190:	3a 07       	cpc	r19, r26
    1192:	a0 e0       	ldi	r26, 0x00	; 0
    1194:	4a 07       	cpc	r20, r26
    1196:	a0 e4       	ldi	r26, 0x40	; 64
    1198:	5a 07       	cpc	r21, r26
    119a:	10 f0       	brcs	.+4      	; 0x11a0 <__pack_f+0x10e>
    119c:	e1 e0       	ldi	r30, 0x01	; 1
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	79 01       	movw	r14, r18
    11a2:	8a 01       	movw	r16, r20
    11a4:	27 c0       	rjmp	.+78     	; 0x11f4 <__pack_f+0x162>
    11a6:	60 38       	cpi	r22, 0x80	; 128
    11a8:	71 05       	cpc	r23, r1
    11aa:	64 f5       	brge	.+88     	; 0x1204 <__pack_f+0x172>
    11ac:	fb 01       	movw	r30, r22
    11ae:	e1 58       	subi	r30, 0x81	; 129
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	d8 01       	movw	r26, r16
    11b4:	c7 01       	movw	r24, r14
    11b6:	8f 77       	andi	r24, 0x7F	; 127
    11b8:	90 70       	andi	r25, 0x00	; 0
    11ba:	a0 70       	andi	r26, 0x00	; 0
    11bc:	b0 70       	andi	r27, 0x00	; 0
    11be:	80 34       	cpi	r24, 0x40	; 64
    11c0:	91 05       	cpc	r25, r1
    11c2:	a1 05       	cpc	r26, r1
    11c4:	b1 05       	cpc	r27, r1
    11c6:	39 f4       	brne	.+14     	; 0x11d6 <__pack_f+0x144>
    11c8:	e7 fe       	sbrs	r14, 7
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <__pack_f+0x154>
    11cc:	80 e4       	ldi	r24, 0x40	; 64
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <__pack_f+0x14c>
    11d6:	8f e3       	ldi	r24, 0x3F	; 63
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a0 e0       	ldi	r26, 0x00	; 0
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e8 0e       	add	r14, r24
    11e0:	f9 1e       	adc	r15, r25
    11e2:	0a 1f       	adc	r16, r26
    11e4:	1b 1f       	adc	r17, r27
    11e6:	17 ff       	sbrs	r17, 7
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <__pack_f+0x162>
    11ea:	16 95       	lsr	r17
    11ec:	07 95       	ror	r16
    11ee:	f7 94       	ror	r15
    11f0:	e7 94       	ror	r14
    11f2:	31 96       	adiw	r30, 0x01	; 1
    11f4:	87 e0       	ldi	r24, 0x07	; 7
    11f6:	16 95       	lsr	r17
    11f8:	07 95       	ror	r16
    11fa:	f7 94       	ror	r15
    11fc:	e7 94       	ror	r14
    11fe:	8a 95       	dec	r24
    1200:	d1 f7       	brne	.-12     	; 0x11f6 <__pack_f+0x164>
    1202:	05 c0       	rjmp	.+10     	; 0x120e <__pack_f+0x17c>
    1204:	ee 24       	eor	r14, r14
    1206:	ff 24       	eor	r15, r15
    1208:	87 01       	movw	r16, r14
    120a:	ef ef       	ldi	r30, 0xFF	; 255
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	6e 2f       	mov	r22, r30
    1210:	67 95       	ror	r22
    1212:	66 27       	eor	r22, r22
    1214:	67 95       	ror	r22
    1216:	90 2f       	mov	r25, r16
    1218:	9f 77       	andi	r25, 0x7F	; 127
    121a:	d7 94       	ror	r13
    121c:	dd 24       	eor	r13, r13
    121e:	d7 94       	ror	r13
    1220:	8e 2f       	mov	r24, r30
    1222:	86 95       	lsr	r24
    1224:	49 2f       	mov	r20, r25
    1226:	46 2b       	or	r20, r22
    1228:	58 2f       	mov	r21, r24
    122a:	5d 29       	or	r21, r13
    122c:	b7 01       	movw	r22, r14
    122e:	ca 01       	movw	r24, r20
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	08 95       	ret

0000123c <__unpack_f>:
    123c:	fc 01       	movw	r30, r24
    123e:	db 01       	movw	r26, r22
    1240:	40 81       	ld	r20, Z
    1242:	51 81       	ldd	r21, Z+1	; 0x01
    1244:	22 81       	ldd	r18, Z+2	; 0x02
    1246:	62 2f       	mov	r22, r18
    1248:	6f 77       	andi	r22, 0x7F	; 127
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	22 1f       	adc	r18, r18
    124e:	22 27       	eor	r18, r18
    1250:	22 1f       	adc	r18, r18
    1252:	93 81       	ldd	r25, Z+3	; 0x03
    1254:	89 2f       	mov	r24, r25
    1256:	88 0f       	add	r24, r24
    1258:	82 2b       	or	r24, r18
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	99 1f       	adc	r25, r25
    1260:	99 27       	eor	r25, r25
    1262:	99 1f       	adc	r25, r25
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	9c 93       	st	X, r25
    1268:	11 97       	sbiw	r26, 0x01	; 1
    126a:	21 15       	cp	r18, r1
    126c:	31 05       	cpc	r19, r1
    126e:	a9 f5       	brne	.+106    	; 0x12da <__unpack_f+0x9e>
    1270:	41 15       	cp	r20, r1
    1272:	51 05       	cpc	r21, r1
    1274:	61 05       	cpc	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	11 f4       	brne	.+4      	; 0x127e <__unpack_f+0x42>
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	37 c0       	rjmp	.+110    	; 0x12ec <__unpack_f+0xb0>
    127e:	82 e8       	ldi	r24, 0x82	; 130
    1280:	9f ef       	ldi	r25, 0xFF	; 255
    1282:	13 96       	adiw	r26, 0x03	; 3
    1284:	9c 93       	st	X, r25
    1286:	8e 93       	st	-X, r24
    1288:	12 97       	sbiw	r26, 0x02	; 2
    128a:	9a 01       	movw	r18, r20
    128c:	ab 01       	movw	r20, r22
    128e:	67 e0       	ldi	r22, 0x07	; 7
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	44 1f       	adc	r20, r20
    1296:	55 1f       	adc	r21, r21
    1298:	6a 95       	dec	r22
    129a:	d1 f7       	brne	.-12     	; 0x1290 <__unpack_f+0x54>
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	8c 93       	st	X, r24
    12a0:	0d c0       	rjmp	.+26     	; 0x12bc <__unpack_f+0x80>
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	44 1f       	adc	r20, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	12 96       	adiw	r26, 0x02	; 2
    12ac:	8d 91       	ld	r24, X+
    12ae:	9c 91       	ld	r25, X
    12b0:	13 97       	sbiw	r26, 0x03	; 3
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	13 96       	adiw	r26, 0x03	; 3
    12b6:	9c 93       	st	X, r25
    12b8:	8e 93       	st	-X, r24
    12ba:	12 97       	sbiw	r26, 0x02	; 2
    12bc:	20 30       	cpi	r18, 0x00	; 0
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	38 07       	cpc	r19, r24
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	48 07       	cpc	r20, r24
    12c6:	80 e4       	ldi	r24, 0x40	; 64
    12c8:	58 07       	cpc	r21, r24
    12ca:	58 f3       	brcs	.-42     	; 0x12a2 <__unpack_f+0x66>
    12cc:	14 96       	adiw	r26, 0x04	; 4
    12ce:	2d 93       	st	X+, r18
    12d0:	3d 93       	st	X+, r19
    12d2:	4d 93       	st	X+, r20
    12d4:	5c 93       	st	X, r21
    12d6:	17 97       	sbiw	r26, 0x07	; 7
    12d8:	08 95       	ret
    12da:	2f 3f       	cpi	r18, 0xFF	; 255
    12dc:	31 05       	cpc	r19, r1
    12de:	79 f4       	brne	.+30     	; 0x12fe <__unpack_f+0xc2>
    12e0:	41 15       	cp	r20, r1
    12e2:	51 05       	cpc	r21, r1
    12e4:	61 05       	cpc	r22, r1
    12e6:	71 05       	cpc	r23, r1
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <__unpack_f+0xb4>
    12ea:	84 e0       	ldi	r24, 0x04	; 4
    12ec:	8c 93       	st	X, r24
    12ee:	08 95       	ret
    12f0:	64 ff       	sbrs	r22, 4
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <__unpack_f+0xbe>
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	8c 93       	st	X, r24
    12f8:	12 c0       	rjmp	.+36     	; 0x131e <__unpack_f+0xe2>
    12fa:	1c 92       	st	X, r1
    12fc:	10 c0       	rjmp	.+32     	; 0x131e <__unpack_f+0xe2>
    12fe:	2f 57       	subi	r18, 0x7F	; 127
    1300:	30 40       	sbci	r19, 0x00	; 0
    1302:	13 96       	adiw	r26, 0x03	; 3
    1304:	3c 93       	st	X, r19
    1306:	2e 93       	st	-X, r18
    1308:	12 97       	sbiw	r26, 0x02	; 2
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	8c 93       	st	X, r24
    130e:	87 e0       	ldi	r24, 0x07	; 7
    1310:	44 0f       	add	r20, r20
    1312:	55 1f       	adc	r21, r21
    1314:	66 1f       	adc	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	8a 95       	dec	r24
    131a:	d1 f7       	brne	.-12     	; 0x1310 <__unpack_f+0xd4>
    131c:	70 64       	ori	r23, 0x40	; 64
    131e:	14 96       	adiw	r26, 0x04	; 4
    1320:	4d 93       	st	X+, r20
    1322:	5d 93       	st	X+, r21
    1324:	6d 93       	st	X+, r22
    1326:	7c 93       	st	X, r23
    1328:	17 97       	sbiw	r26, 0x07	; 7
    132a:	08 95       	ret

0000132c <__fpcmp_parts_f>:
    132c:	1f 93       	push	r17
    132e:	dc 01       	movw	r26, r24
    1330:	fb 01       	movw	r30, r22
    1332:	9c 91       	ld	r25, X
    1334:	92 30       	cpi	r25, 0x02	; 2
    1336:	08 f4       	brcc	.+2      	; 0x133a <__fpcmp_parts_f+0xe>
    1338:	47 c0       	rjmp	.+142    	; 0x13c8 <__fpcmp_parts_f+0x9c>
    133a:	80 81       	ld	r24, Z
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	08 f4       	brcc	.+2      	; 0x1342 <__fpcmp_parts_f+0x16>
    1340:	43 c0       	rjmp	.+134    	; 0x13c8 <__fpcmp_parts_f+0x9c>
    1342:	94 30       	cpi	r25, 0x04	; 4
    1344:	51 f4       	brne	.+20     	; 0x135a <__fpcmp_parts_f+0x2e>
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	1c 91       	ld	r17, X
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	99 f5       	brne	.+102    	; 0x13b4 <__fpcmp_parts_f+0x88>
    134e:	81 81       	ldd	r24, Z+1	; 0x01
    1350:	68 2f       	mov	r22, r24
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	61 1b       	sub	r22, r17
    1356:	71 09       	sbc	r23, r1
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <__fpcmp_parts_f+0xac>
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	21 f0       	breq	.+8      	; 0x1366 <__fpcmp_parts_f+0x3a>
    135e:	92 30       	cpi	r25, 0x02	; 2
    1360:	31 f4       	brne	.+12     	; 0x136e <__fpcmp_parts_f+0x42>
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	b9 f1       	breq	.+110    	; 0x13d4 <__fpcmp_parts_f+0xa8>
    1366:	81 81       	ldd	r24, Z+1	; 0x01
    1368:	88 23       	and	r24, r24
    136a:	89 f1       	breq	.+98     	; 0x13ce <__fpcmp_parts_f+0xa2>
    136c:	2d c0       	rjmp	.+90     	; 0x13c8 <__fpcmp_parts_f+0x9c>
    136e:	11 96       	adiw	r26, 0x01	; 1
    1370:	1c 91       	ld	r17, X
    1372:	11 97       	sbiw	r26, 0x01	; 1
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	f1 f0       	breq	.+60     	; 0x13b4 <__fpcmp_parts_f+0x88>
    1378:	81 81       	ldd	r24, Z+1	; 0x01
    137a:	18 17       	cp	r17, r24
    137c:	d9 f4       	brne	.+54     	; 0x13b4 <__fpcmp_parts_f+0x88>
    137e:	12 96       	adiw	r26, 0x02	; 2
    1380:	2d 91       	ld	r18, X+
    1382:	3c 91       	ld	r19, X
    1384:	13 97       	sbiw	r26, 0x03	; 3
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	94 f0       	brlt	.+36     	; 0x13b4 <__fpcmp_parts_f+0x88>
    1390:	28 17       	cp	r18, r24
    1392:	39 07       	cpc	r19, r25
    1394:	bc f0       	brlt	.+46     	; 0x13c4 <__fpcmp_parts_f+0x98>
    1396:	14 96       	adiw	r26, 0x04	; 4
    1398:	8d 91       	ld	r24, X+
    139a:	9d 91       	ld	r25, X+
    139c:	0d 90       	ld	r0, X+
    139e:	bc 91       	ld	r27, X
    13a0:	a0 2d       	mov	r26, r0
    13a2:	24 81       	ldd	r18, Z+4	; 0x04
    13a4:	35 81       	ldd	r19, Z+5	; 0x05
    13a6:	46 81       	ldd	r20, Z+6	; 0x06
    13a8:	57 81       	ldd	r21, Z+7	; 0x07
    13aa:	28 17       	cp	r18, r24
    13ac:	39 07       	cpc	r19, r25
    13ae:	4a 07       	cpc	r20, r26
    13b0:	5b 07       	cpc	r21, r27
    13b2:	18 f4       	brcc	.+6      	; 0x13ba <__fpcmp_parts_f+0x8e>
    13b4:	11 23       	and	r17, r17
    13b6:	41 f0       	breq	.+16     	; 0x13c8 <__fpcmp_parts_f+0x9c>
    13b8:	0a c0       	rjmp	.+20     	; 0x13ce <__fpcmp_parts_f+0xa2>
    13ba:	82 17       	cp	r24, r18
    13bc:	93 07       	cpc	r25, r19
    13be:	a4 07       	cpc	r26, r20
    13c0:	b5 07       	cpc	r27, r21
    13c2:	40 f4       	brcc	.+16     	; 0x13d4 <__fpcmp_parts_f+0xa8>
    13c4:	11 23       	and	r17, r17
    13c6:	19 f0       	breq	.+6      	; 0x13ce <__fpcmp_parts_f+0xa2>
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <__fpcmp_parts_f+0xac>
    13ce:	6f ef       	ldi	r22, 0xFF	; 255
    13d0:	7f ef       	ldi	r23, 0xFF	; 255
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <__fpcmp_parts_f+0xac>
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	cb 01       	movw	r24, r22
    13da:	1f 91       	pop	r17
    13dc:	08 95       	ret

000013de <DIO_enuSetPinDirection>:
#include "DIO_configuration.h"
#include "DIO_interface.h"


ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <DIO_enuSetPinDirection+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <DIO_enuSetPinDirection+0x8>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <DIO_enuSetPinDirection+0xa>
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	8a 83       	std	Y+2, r24	; 0x02
    13ee:	6b 83       	std	Y+3, r22	; 0x03
    13f0:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    13f2:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7) && (Copy_u8PinDirection == DIO_INPUT || Copy_u8PinDirection == DIO_OUTPUT))
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <DIO_enuSetPinDirection+0x1e>
    13fa:	d4 c0       	rjmp	.+424    	; 0x15a4 <DIO_enuSetPinDirection+0x1c6>
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	88 30       	cpi	r24, 0x08	; 8
    1400:	08 f0       	brcs	.+2      	; 0x1404 <DIO_enuSetPinDirection+0x26>
    1402:	d0 c0       	rjmp	.+416    	; 0x15a4 <DIO_enuSetPinDirection+0x1c6>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	88 23       	and	r24, r24
    1408:	21 f0       	breq	.+8      	; 0x1412 <DIO_enuSetPinDirection+0x34>
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	09 f0       	breq	.+2      	; 0x1412 <DIO_enuSetPinDirection+0x34>
    1410:	c9 c0       	rjmp	.+402    	; 0x15a4 <DIO_enuSetPinDirection+0x1c6>
	{
		switch(Copy_u8GroupNumber)
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3e 83       	std	Y+6, r19	; 0x06
    141a:	2d 83       	std	Y+5, r18	; 0x05
    141c:	6d 81       	ldd	r22, Y+5	; 0x05
    141e:	7e 81       	ldd	r23, Y+6	; 0x06
    1420:	61 30       	cpi	r22, 0x01	; 1
    1422:	71 05       	cpc	r23, r1
    1424:	09 f4       	brne	.+2      	; 0x1428 <DIO_enuSetPinDirection+0x4a>
    1426:	41 c0       	rjmp	.+130    	; 0x14aa <DIO_enuSetPinDirection+0xcc>
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	91 05       	cpc	r25, r1
    1430:	34 f4       	brge	.+12     	; 0x143e <DIO_enuSetPinDirection+0x60>
    1432:	2d 81       	ldd	r18, Y+5	; 0x05
    1434:	3e 81       	ldd	r19, Y+6	; 0x06
    1436:	21 15       	cp	r18, r1
    1438:	31 05       	cpc	r19, r1
    143a:	71 f0       	breq	.+28     	; 0x1458 <DIO_enuSetPinDirection+0x7a>
    143c:	b0 c0       	rjmp	.+352    	; 0x159e <DIO_enuSetPinDirection+0x1c0>
    143e:	6d 81       	ldd	r22, Y+5	; 0x05
    1440:	7e 81       	ldd	r23, Y+6	; 0x06
    1442:	62 30       	cpi	r22, 0x02	; 2
    1444:	71 05       	cpc	r23, r1
    1446:	09 f4       	brne	.+2      	; 0x144a <DIO_enuSetPinDirection+0x6c>
    1448:	59 c0       	rjmp	.+178    	; 0x14fc <DIO_enuSetPinDirection+0x11e>
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	91 05       	cpc	r25, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <DIO_enuSetPinDirection+0x78>
    1454:	7c c0       	rjmp	.+248    	; 0x154e <DIO_enuSetPinDirection+0x170>
    1456:	a3 c0       	rjmp	.+326    	; 0x159e <DIO_enuSetPinDirection+0x1c0>
		{
		case DIO_GROUP_A:
			DDRA &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    1458:	aa e3       	ldi	r26, 0x3A	; 58
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ea e3       	ldi	r30, 0x3A	; 58
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_enuSetPinDirection+0x96>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	2a 95       	dec	r18
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_enuSetPinDirection+0x92>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
			DDRA |= (Copy_u8PinDirection << Copy_u8PinNumber );
    147e:	aa e3       	ldi	r26, 0x3A	; 58
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ea e3       	ldi	r30, 0x3A	; 58
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	b9 01       	movw	r22, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_enuSetPinDirection+0xc0>
    149a:	66 0f       	add	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	8a 95       	dec	r24
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_enuSetPinDirection+0xbc>
    14a2:	cb 01       	movw	r24, r22
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	7a c0       	rjmp	.+244    	; 0x159e <DIO_enuSetPinDirection+0x1c0>
			break;
		case DIO_GROUP_B:
			DDRB &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    14aa:	a7 e3       	ldi	r26, 0x37	; 55
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e7 e3       	ldi	r30, 0x37	; 55
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_enuSetPinDirection+0xe8>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	2a 95       	dec	r18
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_enuSetPinDirection+0xe4>
    14ca:	80 95       	com	r24
    14cc:	84 23       	and	r24, r20
    14ce:	8c 93       	st	X, r24
			DDRB |= (Copy_u8PinDirection << Copy_u8PinNumber );
    14d0:	a7 e3       	ldi	r26, 0x37	; 55
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e7 e3       	ldi	r30, 0x37	; 55
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	b9 01       	movw	r22, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_enuSetPinDirection+0x112>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_enuSetPinDirection+0x10e>
    14f4:	cb 01       	movw	r24, r22
    14f6:	84 2b       	or	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	51 c0       	rjmp	.+162    	; 0x159e <DIO_enuSetPinDirection+0x1c0>
			break;
		case DIO_GROUP_C:
			DDRC &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    14fc:	a4 e3       	ldi	r26, 0x34	; 52
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e4 e3       	ldi	r30, 0x34	; 52
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_enuSetPinDirection+0x13a>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	2a 95       	dec	r18
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_enuSetPinDirection+0x136>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
			DDRC |= (Copy_u8PinDirection << Copy_u8PinNumber );
    1522:	a4 e3       	ldi	r26, 0x34	; 52
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e4 e3       	ldi	r30, 0x34	; 52
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	b9 01       	movw	r22, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_enuSetPinDirection+0x164>
    153e:	66 0f       	add	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	8a 95       	dec	r24
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_enuSetPinDirection+0x160>
    1546:	cb 01       	movw	r24, r22
    1548:	84 2b       	or	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	28 c0       	rjmp	.+80     	; 0x159e <DIO_enuSetPinDirection+0x1c0>
			break;
		case DIO_GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    154e:	a1 e3       	ldi	r26, 0x31	; 49
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e1 e3       	ldi	r30, 0x31	; 49
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_enuSetPinDirection+0x18c>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	2a 95       	dec	r18
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_enuSetPinDirection+0x188>
    156e:	80 95       	com	r24
    1570:	84 23       	and	r24, r20
    1572:	8c 93       	st	X, r24
			DDRD |= (Copy_u8PinDirection << Copy_u8PinNumber );
    1574:	a1 e3       	ldi	r26, 0x31	; 49
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e1 e3       	ldi	r30, 0x31	; 49
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	b9 01       	movw	r22, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_enuSetPinDirection+0x1b6>
    1590:	66 0f       	add	r22, r22
    1592:	77 1f       	adc	r23, r23
    1594:	8a 95       	dec	r24
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_enuSetPinDirection+0x1b2>
    1598:	cb 01       	movw	r24, r22
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_enuSetPinDirection+0x1ca>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15aa:	26 96       	adiw	r28, 0x06	; 6
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber,u8 Copy_u8PinValue)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <DIO_enuSetPinValue+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_enuSetPinValue+0x8>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <DIO_enuSetPinValue+0xa>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	6b 83       	std	Y+3, r22	; 0x03
    15ce:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    15d0:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7) && (Copy_u8PinValue == DIO_LOW_LEVEL || Copy_u8PinValue == DIO_HIGH_LEVEL))
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	84 30       	cpi	r24, 0x04	; 4
    15d6:	08 f0       	brcs	.+2      	; 0x15da <DIO_enuSetPinValue+0x1e>
    15d8:	d4 c0       	rjmp	.+424    	; 0x1782 <DIO_enuSetPinValue+0x1c6>
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	88 30       	cpi	r24, 0x08	; 8
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <DIO_enuSetPinValue+0x26>
    15e0:	d0 c0       	rjmp	.+416    	; 0x1782 <DIO_enuSetPinValue+0x1c6>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	88 23       	and	r24, r24
    15e6:	21 f0       	breq	.+8      	; 0x15f0 <DIO_enuSetPinValue+0x34>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <DIO_enuSetPinValue+0x34>
    15ee:	c9 c0       	rjmp	.+402    	; 0x1782 <DIO_enuSetPinValue+0x1c6>
	{
		switch(Copy_u8GroupNumber)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3e 83       	std	Y+6, r19	; 0x06
    15f8:	2d 83       	std	Y+5, r18	; 0x05
    15fa:	6d 81       	ldd	r22, Y+5	; 0x05
    15fc:	7e 81       	ldd	r23, Y+6	; 0x06
    15fe:	61 30       	cpi	r22, 0x01	; 1
    1600:	71 05       	cpc	r23, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <DIO_enuSetPinValue+0x4a>
    1604:	41 c0       	rjmp	.+130    	; 0x1688 <DIO_enuSetPinValue+0xcc>
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	91 05       	cpc	r25, r1
    160e:	34 f4       	brge	.+12     	; 0x161c <DIO_enuSetPinValue+0x60>
    1610:	2d 81       	ldd	r18, Y+5	; 0x05
    1612:	3e 81       	ldd	r19, Y+6	; 0x06
    1614:	21 15       	cp	r18, r1
    1616:	31 05       	cpc	r19, r1
    1618:	71 f0       	breq	.+28     	; 0x1636 <DIO_enuSetPinValue+0x7a>
    161a:	b0 c0       	rjmp	.+352    	; 0x177c <DIO_enuSetPinValue+0x1c0>
    161c:	6d 81       	ldd	r22, Y+5	; 0x05
    161e:	7e 81       	ldd	r23, Y+6	; 0x06
    1620:	62 30       	cpi	r22, 0x02	; 2
    1622:	71 05       	cpc	r23, r1
    1624:	09 f4       	brne	.+2      	; 0x1628 <DIO_enuSetPinValue+0x6c>
    1626:	59 c0       	rjmp	.+178    	; 0x16da <DIO_enuSetPinValue+0x11e>
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	09 f4       	brne	.+2      	; 0x1634 <DIO_enuSetPinValue+0x78>
    1632:	7c c0       	rjmp	.+248    	; 0x172c <DIO_enuSetPinValue+0x170>
    1634:	a3 c0       	rjmp	.+326    	; 0x177c <DIO_enuSetPinValue+0x1c0>
		{
		case DIO_GROUP_A:
			PORTA &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    1636:	ab e3       	ldi	r26, 0x3B	; 59
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	eb e3       	ldi	r30, 0x3B	; 59
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_enuSetPinValue+0x96>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	2a 95       	dec	r18
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_enuSetPinValue+0x92>
    1656:	80 95       	com	r24
    1658:	84 23       	and	r24, r20
    165a:	8c 93       	st	X, r24
			PORTA |= (Copy_u8PinValue << Copy_u8PinNumber );
    165c:	ab e3       	ldi	r26, 0x3B	; 59
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	eb e3       	ldi	r30, 0x3B	; 59
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	b9 01       	movw	r22, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_enuSetPinValue+0xc0>
    1678:	66 0f       	add	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	8a 95       	dec	r24
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_enuSetPinValue+0xbc>
    1680:	cb 01       	movw	r24, r22
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	7a c0       	rjmp	.+244    	; 0x177c <DIO_enuSetPinValue+0x1c0>
			break;
		case DIO_GROUP_B:
			PORTB &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    1688:	a8 e3       	ldi	r26, 0x38	; 56
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e8 e3       	ldi	r30, 0x38	; 56
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_enuSetPinValue+0xe8>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	2a 95       	dec	r18
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_enuSetPinValue+0xe4>
    16a8:	80 95       	com	r24
    16aa:	84 23       	and	r24, r20
    16ac:	8c 93       	st	X, r24
			PORTB |= (Copy_u8PinValue << Copy_u8PinNumber );
    16ae:	a8 e3       	ldi	r26, 0x38	; 56
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e8 e3       	ldi	r30, 0x38	; 56
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	b9 01       	movw	r22, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_enuSetPinValue+0x112>
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	8a 95       	dec	r24
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_enuSetPinValue+0x10e>
    16d2:	cb 01       	movw	r24, r22
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	51 c0       	rjmp	.+162    	; 0x177c <DIO_enuSetPinValue+0x1c0>
			break;
		case DIO_GROUP_C:
			PORTC &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    16da:	a5 e3       	ldi	r26, 0x35	; 53
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e3       	ldi	r30, 0x35	; 53
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_enuSetPinValue+0x13a>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	2a 95       	dec	r18
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_enuSetPinValue+0x136>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
			PORTC |= (Copy_u8PinValue << Copy_u8PinNumber );
    1700:	a5 e3       	ldi	r26, 0x35	; 53
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	88 2f       	mov	r24, r24
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	b9 01       	movw	r22, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_enuSetPinValue+0x164>
    171c:	66 0f       	add	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	8a 95       	dec	r24
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_enuSetPinValue+0x160>
    1724:	cb 01       	movw	r24, r22
    1726:	84 2b       	or	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	28 c0       	rjmp	.+80     	; 0x177c <DIO_enuSetPinValue+0x1c0>
			break;
		case DIO_GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
    172c:	a2 e3       	ldi	r26, 0x32	; 50
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e2 e3       	ldi	r30, 0x32	; 50
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_enuSetPinValue+0x18c>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	2a 95       	dec	r18
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_enuSetPinValue+0x188>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
			PORTD |= (Copy_u8PinValue << Copy_u8PinNumber );
    1752:	a2 e3       	ldi	r26, 0x32	; 50
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e2 e3       	ldi	r30, 0x32	; 50
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	b9 01       	movw	r22, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_enuSetPinValue+0x1b6>
    176e:	66 0f       	add	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	8a 95       	dec	r24
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_enuSetPinValue+0x1b2>
    1776:	cb 01       	movw	r24, r22
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1786:	89 81       	ldd	r24, Y+1	; 0x01
}
    1788:	26 96       	adiw	r28, 0x06	; 6
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8GroupNumber,u8 Copy_u8PortDirection)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <DIO_enuSetPortDirection+0x6>
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <DIO_enuSetPortDirection+0x8>
    17a2:	0f 92       	push	r0
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	8a 83       	std	Y+2, r24	; 0x02
    17aa:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    17ac:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PortDirection >= DIO_SMALLEST_PORT_DIRECTION && Copy_u8PortDirection <= DIO_LARGEST_PORT_DIRECTION))
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	a8 f5       	brcc	.+106    	; 0x181e <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8GroupNumber)
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	3d 83       	std	Y+5, r19	; 0x05
    17bc:	2c 83       	std	Y+4, r18	; 0x04
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	91 05       	cpc	r25, r1
    17c6:	d1 f0       	breq	.+52     	; 0x17fc <DIO_enuSetPortDirection+0x62>
    17c8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ca:	3d 81       	ldd	r19, Y+5	; 0x05
    17cc:	22 30       	cpi	r18, 0x02	; 2
    17ce:	31 05       	cpc	r19, r1
    17d0:	2c f4       	brge	.+10     	; 0x17dc <DIO_enuSetPortDirection+0x42>
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	9d 81       	ldd	r25, Y+5	; 0x05
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	61 f0       	breq	.+24     	; 0x17f2 <DIO_enuSetPortDirection+0x58>
    17da:	1e c0       	rjmp	.+60     	; 0x1818 <DIO_enuSetPortDirection+0x7e>
    17dc:	2c 81       	ldd	r18, Y+4	; 0x04
    17de:	3d 81       	ldd	r19, Y+5	; 0x05
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	81 f0       	breq	.+32     	; 0x1806 <DIO_enuSetPortDirection+0x6c>
    17e6:	8c 81       	ldd	r24, Y+4	; 0x04
    17e8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	91 05       	cpc	r25, r1
    17ee:	81 f0       	breq	.+32     	; 0x1810 <DIO_enuSetPortDirection+0x76>
    17f0:	13 c0       	rjmp	.+38     	; 0x1818 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_GROUP_A:
			DDRA = Copy_u8PortDirection;
    17f2:	ea e3       	ldi	r30, 0x3A	; 58
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	80 83       	st	Z, r24
    17fa:	0e c0       	rjmp	.+28     	; 0x1818 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_GROUP_B:
			DDRB = Copy_u8PortDirection;
    17fc:	e7 e3       	ldi	r30, 0x37	; 55
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	80 83       	st	Z, r24
    1804:	09 c0       	rjmp	.+18     	; 0x1818 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_GROUP_C:
			DDRC = Copy_u8PortDirection;
    1806:	e4 e3       	ldi	r30, 0x34	; 52
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	80 83       	st	Z, r24
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_GROUP_D:
			DDRD = Copy_u8PortDirection;
    1810:	e1 e3       	ldi	r30, 0x31	; 49
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8GroupNumber,u8 Copy_u8PortValue)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <DIO_enuSetPortValue+0x6>
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO_enuSetPortValue+0x8>
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	8a 83       	std	Y+2, r24	; 0x02
    1844:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1846:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PortValue >= DIO_SMALLEST_PORT_VALUE && Copy_u8PortValue <= DIO_LARGEST_PORT_VALUE))
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	a8 f5       	brcc	.+106    	; 0x18b8 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8GroupNumber)
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3d 83       	std	Y+5, r19	; 0x05
    1856:	2c 83       	std	Y+4, r18	; 0x04
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	d1 f0       	breq	.+52     	; 0x1896 <DIO_enuSetPortValue+0x62>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <DIO_enuSetPortValue+0x42>
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	61 f0       	breq	.+24     	; 0x188c <DIO_enuSetPortValue+0x58>
    1874:	1e c0       	rjmp	.+60     	; 0x18b2 <DIO_enuSetPortValue+0x7e>
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	81 f0       	breq	.+32     	; 0x18a0 <DIO_enuSetPortValue+0x6c>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	81 f0       	breq	.+32     	; 0x18aa <DIO_enuSetPortValue+0x76>
    188a:	13 c0       	rjmp	.+38     	; 0x18b2 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_GROUP_A:
			PORTA = Copy_u8PortValue;
    188c:	eb e3       	ldi	r30, 0x3B	; 59
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	80 83       	st	Z, r24
    1894:	0e c0       	rjmp	.+28     	; 0x18b2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_GROUP_B:
			PORTB = Copy_u8PortValue;
    1896:	e8 e3       	ldi	r30, 0x38	; 56
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	80 83       	st	Z, r24
    189e:	09 c0       	rjmp	.+18     	; 0x18b2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_GROUP_C:
			PORTC = Copy_u8PortValue;
    18a0:	e5 e3       	ldi	r30, 0x35	; 53
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	80 83       	st	Z, r24
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_GROUP_D:
			PORTD = Copy_u8PortValue;
    18aa:	e2 e3       	ldi	r30, 0x32	; 50
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    18b8:	82 e0       	ldi	r24, 0x02	; 2
    18ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <DIO_enuTogglePinValue+0x6>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <DIO_enuTogglePinValue+0x8>
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    18e0:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7))
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	84 30       	cpi	r24, 0x04	; 4
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <DIO_enuTogglePinValue+0x1c>
    18e8:	75 c0       	rjmp	.+234    	; 0x19d4 <DIO_enuTogglePinValue+0x106>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 30       	cpi	r24, 0x08	; 8
    18ee:	08 f0       	brcs	.+2      	; 0x18f2 <DIO_enuTogglePinValue+0x24>
    18f0:	71 c0       	rjmp	.+226    	; 0x19d4 <DIO_enuTogglePinValue+0x106>
	{
		switch(Copy_u8GroupNumber)
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	3d 83       	std	Y+5, r19	; 0x05
    18fa:	2c 83       	std	Y+4, r18	; 0x04
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	91 05       	cpc	r25, r1
    1904:	49 f1       	breq	.+82     	; 0x1958 <DIO_enuTogglePinValue+0x8a>
    1906:	2c 81       	ldd	r18, Y+4	; 0x04
    1908:	3d 81       	ldd	r19, Y+5	; 0x05
    190a:	22 30       	cpi	r18, 0x02	; 2
    190c:	31 05       	cpc	r19, r1
    190e:	2c f4       	brge	.+10     	; 0x191a <DIO_enuTogglePinValue+0x4c>
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	61 f0       	breq	.+24     	; 0x1930 <DIO_enuTogglePinValue+0x62>
    1918:	5a c0       	rjmp	.+180    	; 0x19ce <DIO_enuTogglePinValue+0x100>
    191a:	2c 81       	ldd	r18, Y+4	; 0x04
    191c:	3d 81       	ldd	r19, Y+5	; 0x05
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	71 f1       	breq	.+92     	; 0x1980 <DIO_enuTogglePinValue+0xb2>
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	9d 81       	ldd	r25, Y+5	; 0x05
    1928:	83 30       	cpi	r24, 0x03	; 3
    192a:	91 05       	cpc	r25, r1
    192c:	e9 f1       	breq	.+122    	; 0x19a8 <DIO_enuTogglePinValue+0xda>
    192e:	4f c0       	rjmp	.+158    	; 0x19ce <DIO_enuTogglePinValue+0x100>
		{
		case DIO_GROUP_A:
			PORTA ^= (DIO_BIT_MASK << Copy_u8PinNumber );
    1930:	ab e3       	ldi	r26, 0x3B	; 59
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	eb e3       	ldi	r30, 0x3B	; 59
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <DIO_enuTogglePinValue+0x80>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <DIO_enuTogglePinValue+0x7c>
    1952:	84 27       	eor	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	3b c0       	rjmp	.+118    	; 0x19ce <DIO_enuTogglePinValue+0x100>
			break;
		case DIO_GROUP_B:
			PORTB ^= (DIO_BIT_MASK << Copy_u8PinNumber );
    1958:	a8 e3       	ldi	r26, 0x38	; 56
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e8 e3       	ldi	r30, 0x38	; 56
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_enuTogglePinValue+0xa8>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_enuTogglePinValue+0xa4>
    197a:	84 27       	eor	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	27 c0       	rjmp	.+78     	; 0x19ce <DIO_enuTogglePinValue+0x100>
			break;
		case DIO_GROUP_C:
			PORTC ^= (DIO_BIT_MASK << Copy_u8PinNumber );
    1980:	a5 e3       	ldi	r26, 0x35	; 53
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e3       	ldi	r30, 0x35	; 53
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_enuTogglePinValue+0xd0>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_enuTogglePinValue+0xcc>
    19a2:	84 27       	eor	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	13 c0       	rjmp	.+38     	; 0x19ce <DIO_enuTogglePinValue+0x100>
			break;
		case DIO_GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinNumber );
    19a8:	a2 e3       	ldi	r26, 0x32	; 50
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e2 e3       	ldi	r30, 0x32	; 50
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_enuTogglePinValue+0xf8>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_enuTogglePinValue+0xf4>
    19ca:	84 27       	eor	r24, r20
    19cc:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    19d4:	82 e0       	ldi	r24, 0x02	; 2
    19d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <DIO_u8GetPinValue+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <DIO_u8GetPinValue+0x8>
    19f2:	0f 92       	push	r0
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	8a 83       	std	Y+2, r24	; 0x02
    19fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7))
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	84 30       	cpi	r24, 0x04	; 4
    1a00:	08 f0       	brcs	.+2      	; 0x1a04 <DIO_u8GetPinValue+0x1a>
    1a02:	6c c0       	rjmp	.+216    	; 0x1adc <DIO_u8GetPinValue+0xf2>
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	88 30       	cpi	r24, 0x08	; 8
    1a08:	08 f0       	brcs	.+2      	; 0x1a0c <DIO_u8GetPinValue+0x22>
    1a0a:	68 c0       	rjmp	.+208    	; 0x1adc <DIO_u8GetPinValue+0xf2>
	{
		switch(Copy_u8GroupNumber)
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	3d 83       	std	Y+5, r19	; 0x05
    1a14:	2c 83       	std	Y+4, r18	; 0x04
    1a16:	4c 81       	ldd	r20, Y+4	; 0x04
    1a18:	5d 81       	ldd	r21, Y+5	; 0x05
    1a1a:	41 30       	cpi	r20, 0x01	; 1
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	41 f1       	breq	.+80     	; 0x1a70 <DIO_u8GetPinValue+0x86>
    1a20:	8c 81       	ldd	r24, Y+4	; 0x04
    1a22:	9d 81       	ldd	r25, Y+5	; 0x05
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	91 05       	cpc	r25, r1
    1a28:	34 f4       	brge	.+12     	; 0x1a36 <DIO_u8GetPinValue+0x4c>
    1a2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2e:	21 15       	cp	r18, r1
    1a30:	31 05       	cpc	r19, r1
    1a32:	61 f0       	breq	.+24     	; 0x1a4c <DIO_u8GetPinValue+0x62>
    1a34:	55 c0       	rjmp	.+170    	; 0x1ae0 <DIO_u8GetPinValue+0xf6>
    1a36:	4c 81       	ldd	r20, Y+4	; 0x04
    1a38:	5d 81       	ldd	r21, Y+5	; 0x05
    1a3a:	42 30       	cpi	r20, 0x02	; 2
    1a3c:	51 05       	cpc	r21, r1
    1a3e:	51 f1       	breq	.+84     	; 0x1a94 <DIO_u8GetPinValue+0xaa>
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	83 30       	cpi	r24, 0x03	; 3
    1a46:	91 05       	cpc	r25, r1
    1a48:	b9 f1       	breq	.+110    	; 0x1ab8 <DIO_u8GetPinValue+0xce>
    1a4a:	4a c0       	rjmp	.+148    	; 0x1ae0 <DIO_u8GetPinValue+0xf6>
		{
		case DIO_GROUP_A:
			Local_u8PinValue = (PINA >> Copy_u8PinNumber) & DIO_BIT_MASK;
    1a4c:	e9 e3       	ldi	r30, 0x39	; 57
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a9 01       	movw	r20, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_u8GetPinValue+0x7a>
    1a60:	55 95       	asr	r21
    1a62:	47 95       	ror	r20
    1a64:	8a 95       	dec	r24
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_u8GetPinValue+0x76>
    1a68:	ca 01       	movw	r24, r20
    1a6a:	81 70       	andi	r24, 0x01	; 1
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	38 c0       	rjmp	.+112    	; 0x1ae0 <DIO_u8GetPinValue+0xf6>
			break;
		case DIO_GROUP_B:
			Local_u8PinValue = (PINB >> Copy_u8PinNumber) & DIO_BIT_MASK;
    1a70:	e6 e3       	ldi	r30, 0x36	; 54
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	88 2f       	mov	r24, r24
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a9 01       	movw	r20, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_u8GetPinValue+0x9e>
    1a84:	55 95       	asr	r21
    1a86:	47 95       	ror	r20
    1a88:	8a 95       	dec	r24
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_u8GetPinValue+0x9a>
    1a8c:	ca 01       	movw	r24, r20
    1a8e:	81 70       	andi	r24, 0x01	; 1
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	26 c0       	rjmp	.+76     	; 0x1ae0 <DIO_u8GetPinValue+0xf6>
			break;
		case DIO_GROUP_C:
			Local_u8PinValue = (PINC >> Copy_u8PinNumber) & DIO_BIT_MASK;
    1a94:	e3 e3       	ldi	r30, 0x33	; 51
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <DIO_u8GetPinValue+0xc2>
    1aa8:	55 95       	asr	r21
    1aaa:	47 95       	ror	r20
    1aac:	8a 95       	dec	r24
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <DIO_u8GetPinValue+0xbe>
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	14 c0       	rjmp	.+40     	; 0x1ae0 <DIO_u8GetPinValue+0xf6>
			break;
		case DIO_GROUP_D:
			Local_u8PinValue = (PIND >> Copy_u8PinNumber) & DIO_BIT_MASK;
    1ab8:	e0 e3       	ldi	r30, 0x30	; 48
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a9 01       	movw	r20, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_u8GetPinValue+0xe6>
    1acc:	55 95       	asr	r21
    1ace:	47 95       	ror	r20
    1ad0:	8a 95       	dec	r24
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <DIO_u8GetPinValue+0xe2>
    1ad4:	ca 01       	movw	r24, r20
    1ad6:	81 70       	andi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_u8GetPinValue+0xf6>
			break;
		}
	}
	else
	{
		Local_u8PinValue = OUT_OF_RANGE;
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8PinValue;
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8GroupNumber)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <DIO_u8GetPortValue+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <DIO_u8GetPortValue+0x8>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PORTValue;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A))
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	98 f5       	brcc	.+102    	; 0x1b6c <DIO_u8GetPortValue+0x7a>
	{
		switch(Copy_u8GroupNumber)
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	3c 83       	std	Y+4, r19	; 0x04
    1b0e:	2b 83       	std	Y+3, r18	; 0x03
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	91 05       	cpc	r25, r1
    1b18:	d1 f0       	breq	.+52     	; 0x1b4e <DIO_u8GetPortValue+0x5c>
    1b1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	31 05       	cpc	r19, r1
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <DIO_u8GetPortValue+0x3c>
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	61 f0       	breq	.+24     	; 0x1b44 <DIO_u8GetPortValue+0x52>
    1b2c:	21 c0       	rjmp	.+66     	; 0x1b70 <DIO_u8GetPortValue+0x7e>
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	81 f0       	breq	.+32     	; 0x1b58 <DIO_u8GetPortValue+0x66>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	91 05       	cpc	r25, r1
    1b40:	81 f0       	breq	.+32     	; 0x1b62 <DIO_u8GetPortValue+0x70>
    1b42:	16 c0       	rjmp	.+44     	; 0x1b70 <DIO_u8GetPortValue+0x7e>
		{
		case DIO_GROUP_A:
			Local_u8PORTValue = PINA;
    1b44:	e9 e3       	ldi	r30, 0x39	; 57
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	11 c0       	rjmp	.+34     	; 0x1b70 <DIO_u8GetPortValue+0x7e>
			break;
		case DIO_GROUP_B:
			Local_u8PORTValue = PINB;
    1b4e:	e6 e3       	ldi	r30, 0x36	; 54
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	0c c0       	rjmp	.+24     	; 0x1b70 <DIO_u8GetPortValue+0x7e>
			break;
		case DIO_GROUP_C:
			Local_u8PORTValue = PINC;
    1b58:	e3 e3       	ldi	r30, 0x33	; 51
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	07 c0       	rjmp	.+14     	; 0x1b70 <DIO_u8GetPortValue+0x7e>
			break;
		case DIO_GROUP_D:
			Local_u8PORTValue = PIND;
    1b62:	e0 e3       	ldi	r30, 0x30	; 48
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <DIO_u8GetPortValue+0x7e>
		}
	}
	else
	{
		// change the value of out_of_range more than once as it may be equal to the value of PIN
		Local_u8PORTValue = OUT_OF_RANGE;
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8PORTValue;
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <EEPROM_ui8ReadByteFromAddress>:
#include "EEPROM.h"
#include "LCD_interface.h"
#include <avr/io.h>

u8 EEPROM_ui8ReadByteFromAddress(const u16 u16Address)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <EEPROM_ui8ReadByteFromAddress+0x6>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
//	/* Wait for completion of previous write */
//	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;
	/* Set up address register */
	EEAR = u16Address;
    1b8e:	ee e3       	ldi	r30, 0x3E	; 62
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    1b9a:	ac e3       	ldi	r26, 0x3C	; 60
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ec e3       	ldi	r30, 0x3C	; 60
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	81 60       	ori	r24, 0x01	; 1
    1ba6:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR;
    1ba8:	ed e3       	ldi	r30, 0x3D	; 61
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const u16 uiAddress, u8* dist,const u16 size)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	28 97       	sbiw	r28, 0x08	; 8
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
    1bd0:	7e 83       	std	Y+6, r23	; 0x06
    1bd2:	6d 83       	std	Y+5, r22	; 0x05
    1bd4:	58 87       	std	Y+8, r21	; 0x08
    1bd6:	4f 83       	std	Y+7, r20	; 0x07
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    1bd8:	ec e3       	ldi	r30, 0x3C	; 60
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	82 70       	andi	r24, 0x02	; 2
    1be4:	90 70       	andi	r25, 0x00	; 0
    1be6:	95 95       	asr	r25
    1be8:	87 95       	ror	r24
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	a1 f3       	breq	.-24     	; 0x1bd8 <EEPROM_vReadBlockFromAddress+0x20>
	;

	u16 counter = 0;//the counter of bytes that are read
    1bf0:	1a 82       	std	Y+2, r1	; 0x02
    1bf2:	19 82       	std	Y+1, r1	; 0x01
    1bf4:	21 c0       	rjmp	.+66     	; 0x1c38 <EEPROM_vReadBlockFromAddress+0x80>

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
    1bf6:	ee e3       	ldi	r30, 0x3E	; 62
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	82 0f       	add	r24, r18
    1c04:	93 1f       	adc	r25, r19
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
    1c0a:	ac e3       	ldi	r26, 0x3C	; 60
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ec e3       	ldi	r30, 0x3C	; 60
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	81 60       	ori	r24, 0x01	; 1
    1c16:	8c 93       	st	X, r24
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
    1c18:	2d 81       	ldd	r18, Y+5	; 0x05
    1c1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	d9 01       	movw	r26, r18
    1c22:	a8 0f       	add	r26, r24
    1c24:	b9 1f       	adc	r27, r25
    1c26:	ed e3       	ldi	r30, 0x3D	; 61
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8c 93       	st	X, r24

		counter++;//increase the bytes counter
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	01 96       	adiw	r24, 0x01	; 1
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
    1c38:	29 81       	ldd	r18, Y+1	; 0x01
    1c3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3e:	98 85       	ldd	r25, Y+8	; 0x08
    1c40:	28 17       	cp	r18, r24
    1c42:	39 07       	cpc	r19, r25
    1c44:	c0 f2       	brcs	.-80     	; 0x1bf6 <EEPROM_vReadBlockFromAddress+0x3e>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
    1c46:	28 96       	adiw	r28, 0x08	; 8
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <EEPROM_vWriteByteToAddress+0x6>
    1c5e:	0f 92       	push	r0
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    1c6a:	ec e3       	ldi	r30, 0x3C	; 60
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	82 70       	andi	r24, 0x02	; 2
    1c76:	90 70       	andi	r25, 0x00	; 0
    1c78:	95 95       	asr	r25
    1c7a:	87 95       	ror	r24
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	91 05       	cpc	r25, r1
    1c80:	a1 f3       	breq	.-24     	; 0x1c6a <EEPROM_vWriteByteToAddress+0x12>
	;
	/* Set up address register */
	EEAR = uiAddress;
    1c82:	ee e3       	ldi	r30, 0x3E	; 62
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
    1c8e:	ac e3       	ldi	r26, 0x3C	; 60
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ec e3       	ldi	r30, 0x3C	; 60
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	81 60       	ori	r24, 0x01	; 1
    1c9a:	8c 93       	st	X, r24
	if (EEDR != uiData)//compare the value read to the value to be written
    1c9c:	ed e3       	ldi	r30, 0x3D	; 61
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	90 81       	ld	r25, Z
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	98 17       	cp	r25, r24
    1ca6:	91 f0       	breq	.+36     	; 0x1ccc <EEPROM_vWriteByteToAddress+0x74>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
    1ca8:	ed e3       	ldi	r30, 0x3D	; 61
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	80 83       	st	Z, r24

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
    1cb0:	ac e3       	ldi	r26, 0x3C	; 60
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ec e3       	ldi	r30, 0x3C	; 60
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	84 60       	ori	r24, 0x04	; 4
    1cbc:	8c 93       	st	X, r24
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
    1cbe:	ac e3       	ldi	r26, 0x3C	; 60
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	ec e3       	ldi	r30, 0x3C	; 60
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	82 60       	ori	r24, 0x02	; 2
    1cca:	8c 93       	st	X, r24
	else
	{

	}

}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <EEPROM_vWriteBlockToAddress>:

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	28 97       	sbiw	r28, 0x08	; 8
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	9c 83       	std	Y+4, r25	; 0x04
    1cee:	8b 83       	std	Y+3, r24	; 0x03
    1cf0:	7e 83       	std	Y+6, r23	; 0x06
    1cf2:	6d 83       	std	Y+5, r22	; 0x05
    1cf4:	58 87       	std	Y+8, r21	; 0x08
    1cf6:	4f 83       	std	Y+7, r20	; 0x07
	u16 counter = 0;//Bytes write counter
    1cf8:	1a 82       	std	Y+2, r1	; 0x02
    1cfa:	19 82       	std	Y+1, r1	; 0x01
    1cfc:	52 c0       	rjmp	.+164    	; 0x1da2 <EEPROM_vWriteBlockToAddress+0xca>
	while (counter < size)
	{
		EEPROM_ui8ReadByteFromAddress(0x2522);
    1cfe:	82 e2       	ldi	r24, 0x22	; 34
    1d00:	95 e2       	ldi	r25, 0x25	; 37
    1d02:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <EEPROM_ui8ReadByteFromAddress>
		LCD_enuWriteIntegerNumber(1) ;
    1d06:	61 e0       	ldi	r22, 0x01	; 1
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <LCD_enuWriteIntegerNumber>
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1);
    1d12:	ec e3       	ldi	r30, 0x3C	; 60
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	82 70       	andi	r24, 0x02	; 2
    1d1e:	90 70       	andi	r25, 0x00	; 0
    1d20:	95 95       	asr	r25
    1d22:	87 95       	ror	r24
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	91 05       	cpc	r25, r1
    1d28:	a1 f3       	breq	.-24     	; 0x1d12 <EEPROM_vWriteBlockToAddress+0x3a>




		/* Set up address register */
		EEAR = uiAddress + counter;
    1d2a:	ee e3       	ldi	r30, 0x3E	; 62
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d30:	3c 81       	ldd	r19, Y+4	; 0x04
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	82 0f       	add	r24, r18
    1d38:	93 1f       	adc	r25, r19
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
    1d3e:	ac e3       	ldi	r26, 0x3C	; 60
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	ec e3       	ldi	r30, 0x3C	; 60
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	81 60       	ori	r24, 0x01	; 1
    1d4a:	8c 93       	st	X, r24
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
    1d4c:	ed e3       	ldi	r30, 0x3D	; 61
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	40 81       	ld	r20, Z
    1d52:	2d 81       	ldd	r18, Y+5	; 0x05
    1d54:	3e 81       	ldd	r19, Y+6	; 0x06
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	f9 01       	movw	r30, r18
    1d5c:	e8 0f       	add	r30, r24
    1d5e:	f9 1f       	adc	r31, r25
    1d60:	80 81       	ld	r24, Z
    1d62:	48 17       	cp	r20, r24
    1d64:	c9 f0       	breq	.+50     	; 0x1d98 <EEPROM_vWriteBlockToAddress+0xc0>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
    1d66:	ad e3       	ldi	r26, 0x3D	; 61
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	f9 01       	movw	r30, r18
    1d74:	e8 0f       	add	r30, r24
    1d76:	f9 1f       	adc	r31, r25
    1d78:	80 81       	ld	r24, Z
    1d7a:	8c 93       	st	X, r24

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
    1d7c:	ac e3       	ldi	r26, 0x3C	; 60
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ec e3       	ldi	r30, 0x3C	; 60
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	84 60       	ori	r24, 0x04	; 4
    1d88:	8c 93       	st	X, r24
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
    1d8a:	ac e3       	ldi	r26, 0x3C	; 60
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ec e3       	ldi	r30, 0x3C	; 60
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	82 60       	ori	r24, 0x02	; 2
    1d96:	8c 93       	st	X, r24
		}
		else
		{

		}
		counter++;//increase bytes counter
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
	u16 counter = 0;//Bytes write counter
	while (counter < size)
    1da2:	29 81       	ldd	r18, Y+1	; 0x01
    1da4:	3a 81       	ldd	r19, Y+2	; 0x02
    1da6:	8f 81       	ldd	r24, Y+7	; 0x07
    1da8:	98 85       	ldd	r25, Y+8	; 0x08
    1daa:	28 17       	cp	r18, r24
    1dac:	39 07       	cpc	r19, r25
    1dae:	08 f4       	brcc	.+2      	; 0x1db2 <EEPROM_vWriteBlockToAddress+0xda>
    1db0:	a6 cf       	rjmp	.-180    	; 0x1cfe <EEPROM_vWriteBlockToAddress+0x26>
		{

		}
		counter++;//increase bytes counter
	}
	LCD_enuWriteIntegerNumber(85);
    1db2:	65 e5       	ldi	r22, 0x55	; 85
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <LCD_enuWriteIntegerNumber>
}
    1dbe:	28 96       	adiw	r28, 0x08	; 8
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <EEPROM_voidWriteByte>:
#include "EEPROM_private.h"
#include "EEPROM_interface.h"
#include "util/delay.h"

void EEPROM_voidWriteByte(u16 Copy_u16Address , u8 Copy_u8Data )
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <EEPROM_voidWriteByte+0x6>
    1dd6:	0f 92       	push	r0
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(((EECR >> EECR_EEWE ) & 1) == 1);
    1de2:	ec e3       	ldi	r30, 0x3C	; 60
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	86 95       	lsr	r24
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	81 70       	andi	r24, 0x01	; 1
    1df0:	90 70       	andi	r25, 0x00	; 0
    1df2:	88 23       	and	r24, r24
    1df4:	b1 f7       	brne	.-20     	; 0x1de2 <EEPROM_voidWriteByte+0x12>

	/* Set up address and data registers */
	EEAR = Copy_u16Address;
    1df6:	ee e3       	ldi	r30, 0x3E	; 62
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
	EEDR = Copy_u8Data;
    1e02:	ed e3       	ldi	r30, 0x3D	; 61
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	80 83       	st	Z, r24

	/* Write logical one to EEMWE */
	EECR |= (1<<EECR_EEMWE);
    1e0a:	ac e3       	ldi	r26, 0x3C	; 60
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	ec e3       	ldi	r30, 0x3C	; 60
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	84 60       	ori	r24, 0x04	; 4
    1e16:	8c 93       	st	X, r24

	/* Start eeprom write by setting EEWE */
    EECR |= (1<<EECR_EEWE) ;
    1e18:	ac e3       	ldi	r26, 0x3C	; 60
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	ec e3       	ldi	r30, 0x3C	; 60
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	82 60       	ori	r24, 0x02	; 2
    1e24:	8c 93       	st	X, r24
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <EEPROM_u8ReadByte>:

u8  EEPROM_u8ReadByte(u16 Copy_u16Address)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <EEPROM_u8ReadByte+0x6>
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
//	/* Wait for completion of previous write */
//	while(((EECR >> EECR_EEWE ) & 1) == 1);

	/* Set up address register */
	EEAR = Copy_u16Address;
    1e40:	ee e3       	ldi	r30, 0x3E	; 62
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24

	/* Start eeprom read by writing EERE */
	SET_BIT(EECR,EECR_EERE);
    1e4c:	ac e3       	ldi	r26, 0x3C	; 60
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	ec e3       	ldi	r30, 0x3C	; 60
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	81 60       	ori	r24, 0x01	; 1
    1e58:	8c 93       	st	X, r24

	CLR_BIT(EECR,EECR_EEWE);
    1e5a:	ac e3       	ldi	r26, 0x3C	; 60
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	ec e3       	ldi	r30, 0x3C	; 60
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8d 7f       	andi	r24, 0xFD	; 253
    1e66:	8c 93       	st	X, r24

	/* Return data from data register */
	return EEDR;
    1e68:	ed e3       	ldi	r30, 0x3D	; 61
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z

}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <EEPROM_voidWriteBlock>:

void EEPROM_voidWriteBlock(u16 Copy_u16Address,u8* Copy_Au8Data,u16 Copy_u16Size)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	28 97       	sbiw	r28, 0x08	; 8
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	7e 83       	std	Y+6, r23	; 0x06
    1e92:	6d 83       	std	Y+5, r22	; 0x05
    1e94:	58 87       	std	Y+8, r21	; 0x08
    1e96:	4f 83       	std	Y+7, r20	; 0x07
	u16 Local_u16counter = 0;        /*Bytes write counter*/
    1e98:	1a 82       	std	Y+2, r1	; 0x02
    1e9a:	19 82       	std	Y+1, r1	; 0x01
    1e9c:	45 c0       	rjmp	.+138    	; 0x1f28 <EEPROM_voidWriteBlock+0xb0>

	while (Local_u16counter < Copy_u16Size)
	{
		/* Wait for completion of previous write */
		while(EECR & (1<<EECR_EEWE));
    1e9e:	ec e3       	ldi	r30, 0x3C	; 60
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	82 70       	andi	r24, 0x02	; 2
    1eaa:	90 70       	andi	r25, 0x00	; 0
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	b9 f7       	brne	.-18     	; 0x1e9e <EEPROM_voidWriteBlock+0x26>

		/* Set up address register

		/* Set up address register */
		EEAR = Copy_u16Address + Local_u16counter;
    1eb0:	ee e3       	ldi	r30, 0x3E	; 62
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	82 0f       	add	r24, r18
    1ebe:	93 1f       	adc	r25, r19
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24

		/* Read the byte in the address of EEAR */
		SET_BIT(EECR,EECR_EERE);
    1ec4:	ac e3       	ldi	r26, 0x3C	; 60
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ec e3       	ldi	r30, 0x3C	; 60
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	81 60       	ori	r24, 0x01	; 1
    1ed0:	8c 93       	st	X, r24

		if (EEDR != (*(Copy_Au8Data + Local_u16counter)))   /* Compare the value read to the value to be written */
    1ed2:	ed e3       	ldi	r30, 0x3D	; 61
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	40 81       	ld	r20, Z
    1ed8:	2d 81       	ldd	r18, Y+5	; 0x05
    1eda:	3e 81       	ldd	r19, Y+6	; 0x06
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	f9 01       	movw	r30, r18
    1ee2:	e8 0f       	add	r30, r24
    1ee4:	f9 1f       	adc	r31, r25
    1ee6:	80 81       	ld	r24, Z
    1ee8:	48 17       	cp	r20, r24
    1eea:	c9 f0       	breq	.+50     	; 0x1f1e <EEPROM_voidWriteBlock+0xa6>
		{ /* if they are not equal then write the data */
			EEDR = *(Copy_Au8Data + Local_u16counter);      /*move the data to EEDR*/
    1eec:	ad e3       	ldi	r26, 0x3D	; 61
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	f9 01       	movw	r30, r18
    1efa:	e8 0f       	add	r30, r24
    1efc:	f9 1f       	adc	r31, r25
    1efe:	80 81       	ld	r24, Z
    1f00:	8c 93       	st	X, r24

			/* Write logical one to EEMWE */
			SET_BIT(EECR,EECR_EEMWE);
    1f02:	ac e3       	ldi	r26, 0x3C	; 60
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	ec e3       	ldi	r30, 0x3C	; 60
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	84 60       	ori	r24, 0x04	; 4
    1f0e:	8c 93       	st	X, r24

			/* Start EEPROM write by setting EEWE */
			SET_BIT(EECR,EECR_EEWE);
    1f10:	ac e3       	ldi	r26, 0x3C	; 60
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ec e3       	ldi	r30, 0x3C	; 60
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	82 60       	ori	r24, 0x02	; 2
    1f1c:	8c 93       	st	X, r24
		}
		else
		{
			/* Do Nothing */
		}
		Local_u16counter++;                                /*increase bytes counter*/
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	01 96       	adiw	r24, 0x01	; 1
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01

void EEPROM_voidWriteBlock(u16 Copy_u16Address,u8* Copy_Au8Data,u16 Copy_u16Size)
{
	u16 Local_u16counter = 0;        /*Bytes write counter*/

	while (Local_u16counter < Copy_u16Size)
    1f28:	29 81       	ldd	r18, Y+1	; 0x01
    1f2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2e:	98 85       	ldd	r25, Y+8	; 0x08
    1f30:	28 17       	cp	r18, r24
    1f32:	39 07       	cpc	r19, r25
    1f34:	08 f4       	brcc	.+2      	; 0x1f38 <EEPROM_voidWriteBlock+0xc0>
    1f36:	b3 cf       	rjmp	.-154    	; 0x1e9e <EEPROM_voidWriteBlock+0x26>
		{
			/* Do Nothing */
		}
		Local_u16counter++;                                /*increase bytes counter*/
	}
}
    1f38:	28 96       	adiw	r28, 0x08	; 8
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <EEPROM_voidReadBlock>:

void EEPROM_voidReadBlock( u16 u16Address, u8* Copy_Au8Data,u16 Copy_u16Size)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	28 97       	sbiw	r28, 0x08	; 8
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	7e 83       	std	Y+6, r23	; 0x06
    1f64:	6d 83       	std	Y+5, r22	; 0x05
    1f66:	58 87       	std	Y+8, r21	; 0x08
    1f68:	4f 83       	std	Y+7, r20	; 0x07
	u16 Local_u16Counter = 0;           /* the counter of bytes that are read */
    1f6a:	1a 82       	std	Y+2, r1	; 0x02
    1f6c:	19 82       	std	Y+1, r1	; 0x01
    1f6e:	21 c0       	rjmp	.+66     	; 0x1fb2 <EEPROM_voidReadBlock+0x68>

	while (Local_u16Counter < Copy_u16Size) /*loop until move all bytes to the given array*/
	{
		/* Set up address register */
		EEAR = u16Address + Local_u16Counter;
    1f70:	ee e3       	ldi	r30, 0x3E	; 62
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	82 0f       	add	r24, r18
    1f7e:	93 1f       	adc	r25, r19
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24

		/* Start EEPROM read by writing EERE */
		SET_BIT(EECR,EECR_EERE);
    1f84:	ac e3       	ldi	r26, 0x3C	; 60
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	ec e3       	ldi	r30, 0x3C	; 60
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	81 60       	ori	r24, 0x01	; 1
    1f90:	8c 93       	st	X, r24

		/* move data from data register to the array */
		*(Copy_Au8Data + Local_u16Counter) = EEDR;
    1f92:	2d 81       	ldd	r18, Y+5	; 0x05
    1f94:	3e 81       	ldd	r19, Y+6	; 0x06
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	d9 01       	movw	r26, r18
    1f9c:	a8 0f       	add	r26, r24
    1f9e:	b9 1f       	adc	r27, r25
    1fa0:	ed e3       	ldi	r30, 0x3D	; 61
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	8c 93       	st	X, r24

		Local_u16Counter++;//increase the bytes counter
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	01 96       	adiw	r24, 0x01	; 1
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01

void EEPROM_voidReadBlock( u16 u16Address, u8* Copy_Au8Data,u16 Copy_u16Size)
{
	u16 Local_u16Counter = 0;           /* the counter of bytes that are read */

	while (Local_u16Counter < Copy_u16Size) /*loop until move all bytes to the given array*/
    1fb2:	29 81       	ldd	r18, Y+1	; 0x01
    1fb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb8:	98 85       	ldd	r25, Y+8	; 0x08
    1fba:	28 17       	cp	r18, r24
    1fbc:	39 07       	cpc	r19, r25
    1fbe:	c0 f2       	brcs	.-80     	; 0x1f70 <EEPROM_voidReadBlock+0x26>
		/* move data from data register to the array */
		*(Copy_Au8Data + Local_u16Counter) = EEDR;

		Local_u16Counter++;//increase the bytes counter
	}
}
    1fc0:	28 96       	adiw	r28, 0x08	; 8
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <EEPROM_voidWriteDataByte>:
#include "LCD_interface.h"



void EEPROM_voidWriteDataByte(u16 Copy_u16Address,u8 Copy_u8Data)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	62 97       	sbiw	r28, 0x12	; 18
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	99 8b       	std	Y+17, r25	; 0x11
    1fe8:	88 8b       	std	Y+16, r24	; 0x10
    1fea:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8SlaveAddress = 0;
    1fec:	1f 86       	std	Y+15, r1	; 0x0f

	Local_u8SlaveAddress = 0b1010000 | (u8)( (Copy_u16Address >> 8));
    1fee:	88 89       	ldd	r24, Y+16	; 0x10
    1ff0:	99 89       	ldd	r25, Y+17	; 0x11
    1ff2:	89 2f       	mov	r24, r25
    1ff4:	99 27       	eor	r25, r25
    1ff6:	80 65       	ori	r24, 0x50	; 80
    1ff8:	8f 87       	std	Y+15, r24	; 0x0f

	IIC_enuStartCondition();
    1ffa:	0e 94 cc 11 	call	0x2398	; 0x2398 <IIC_enuStartCondition>

	IIC_enuWriteSlaveAddress(Local_u8SlaveAddress,0);
    1ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	0e 94 39 12 	call	0x2472	; 0x2472 <IIC_enuWriteSlaveAddress>

	IIC_enuWriteData((u8)Copy_u16Address);
    200c:	88 89       	ldd	r24, Y+16	; 0x10
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 86 12 	call	0x250c	; 0x250c <IIC_enuWriteData>
	IIC_enuWriteData(Copy_u8Data);
    2016:	8a 89       	ldd	r24, Y+18	; 0x12
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	0e 94 86 12 	call	0x250c	; 0x250c <IIC_enuWriteData>
	IIC_enuStopCondition();
    2020:	0e 94 20 12 	call	0x2440	; 0x2440 <IIC_enuStopCondition>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 ea       	ldi	r26, 0xA0	; 160
    202a:	b0 e4       	ldi	r27, 0x40	; 64
    202c:	8b 87       	std	Y+11, r24	; 0x0b
    202e:	9c 87       	std	Y+12, r25	; 0x0c
    2030:	ad 87       	std	Y+13, r26	; 0x0d
    2032:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6b 85       	ldd	r22, Y+11	; 0x0b
    2036:	7c 85       	ldd	r23, Y+12	; 0x0c
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	55 e4       	ldi	r21, 0x45	; 69
    2044:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8f 83       	std	Y+7, r24	; 0x07
    204e:	98 87       	std	Y+8, r25	; 0x08
    2050:	a9 87       	std	Y+9, r26	; 0x09
    2052:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <EEPROM_voidWriteDataByte+0xa4>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <EEPROM_voidWriteDataByte+0x122>
	else if (__tmp > 65535)
    2076:	6f 81       	ldd	r22, Y+7	; 0x07
    2078:	78 85       	ldd	r23, Y+8	; 0x08
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <EEPROM_voidWriteDataByte+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2090:	7c 85       	ldd	r23, Y+12	; 0x0c
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <EEPROM_voidWriteDataByte+0x104>
    20b8:	80 e9       	ldi	r24, 0x90	; 144
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <EEPROM_voidWriteDataByte+0xf2>
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <EEPROM_voidWriteDataByte+0xe6>
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <EEPROM_voidWriteDataByte+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <EEPROM_voidWriteDataByte+0x12e>
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    2108:	62 96       	adiw	r28, 0x12	; 18
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16Address)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <EEPROM_u8ReadDataByte+0x6>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <EEPROM_u8ReadDataByte+0x8>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8SlaveAddress = 0;
    212a:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Data=0;
    212c:	1a 82       	std	Y+2, r1	; 0x02

	Local_u8SlaveAddress = 0b1010000 | (u8)((Copy_u16Address >> 8));
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	89 2f       	mov	r24, r25
    2134:	99 27       	eor	r25, r25
    2136:	80 65       	ori	r24, 0x50	; 80
    2138:	89 83       	std	Y+1, r24	; 0x01

	IIC_enuStartCondition();
    213a:	0e 94 cc 11 	call	0x2398	; 0x2398 <IIC_enuStartCondition>
	IIC_enuWriteSlaveAddress(Local_u8SlaveAddress,0);
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	0e 94 39 12 	call	0x2472	; 0x2472 <IIC_enuWriteSlaveAddress>
	IIC_enuWriteData((u8)Copy_u16Address);
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 86 12 	call	0x250c	; 0x250c <IIC_enuWriteData>
	LCD_enuWriteData('*');
    2156:	8a e2       	ldi	r24, 0x2A	; 42
    2158:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_enuWriteData>
	IIC_enuRepeatedStartCondition();
    215c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <IIC_enuRepeatedStartCondition>
	IIC_enuWriteSlaveAddress(Local_u8SlaveAddress,1);
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	61 e0       	ldi	r22, 0x01	; 1
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	0e 94 39 12 	call	0x2472	; 0x2472 <IIC_enuWriteSlaveAddress>
	IIC_enuReadData(&Local_u8Data);
    216e:	ce 01       	movw	r24, r28
    2170:	02 96       	adiw	r24, 0x02	; 2
    2172:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <IIC_enuReadData>
	IIC_enuStopCondition();
    2176:	0e 94 20 12 	call	0x2440	; 0x2440 <IIC_enuStopCondition>

	return Local_u8Data;
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <HEXA_enuInit>:
#include "HEXA_private.h"

//u8 HEXA_u8NumberOfSegment[] = {0,1,2,3,4,5,6,7,8,9};

ES_t HEXA_enuInit(void)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	2b 97       	sbiw	r28, 0x0b	; 11
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK ,flag=ES_OK, Local_enuArray[8];
    219e:	1b 82       	std	Y+3, r1	; 0x03
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	8a 83       	std	Y+2, r24	; 0x02

	Local_enuArray[0]=DIO_enuSetPinDirection(RIGHT_SSG_GRP,RIGHT_SSG_ENABLE_PIN,DIO_u8OUTPUT);
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	41 e0       	ldi	r20, 0x01	; 1
    21aa:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
    21ae:	8c 83       	std	Y+4, r24	; 0x04
	Local_enuArray[1]=DIO_enuSetPinDirection(LEFT_SSG_GRP,LEFT_SSG_ENABLE_PIN,DIO_u8OUTPUT);
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	62 e0       	ldi	r22, 0x02	; 2
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
    21ba:	8d 83       	std	Y+5, r24	; 0x05
	Local_enuArray[2]=DIO_enuSetPinDirection(SSG_GRP,BIT0_PIN,DIO_u8OUTPUT);
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	64 e0       	ldi	r22, 0x04	; 4
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
    21c6:	8e 83       	std	Y+6, r24	; 0x06
	Local_enuArray[3]=DIO_enuSetPinDirection(SSG_GRP,BIT1_PIN,DIO_u8OUTPUT);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	65 e0       	ldi	r22, 0x05	; 5
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
    21d2:	8f 83       	std	Y+7, r24	; 0x07
	Local_enuArray[4]=DIO_enuSetPinDirection(SSG_GRP,BIT2_PIN,DIO_u8OUTPUT);
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	66 e0       	ldi	r22, 0x06	; 6
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
    21de:	88 87       	std	Y+8, r24	; 0x08
	Local_enuArray[5]=DIO_enuSetPinDirection(SSG_GRP,BIT3_PIN,DIO_u8OUTPUT);
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	67 e0       	ldi	r22, 0x07	; 7
    21e4:	41 e0       	ldi	r20, 0x01	; 1
    21e6:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
    21ea:	89 87       	std	Y+9, r24	; 0x09
	Local_enuArray[6]=DIO_enuSetPinValue(SSG_GRP,RIGHT_SSG_ENABLE_PIN,DIO_u8LOW_LEVEL);
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
    21f6:	8a 87       	std	Y+10, r24	; 0x0a
	Local_enuArray[7]=DIO_enuSetPinValue(SSG_GRP,LEFT_SSG_ENABLE_PIN,DIO_u8LOW_LEVEL);
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	62 e0       	ldi	r22, 0x02	; 2
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
    2202:	8b 87       	std	Y+11, r24	; 0x0b

	for(u8 Local_u8Iterator=0 ; Local_u8Iterator<=7 ; Local_u8Iterator++)
    2204:	19 82       	std	Y+1, r1	; 0x01
    2206:	10 c0       	rjmp	.+32     	; 0x2228 <HEXA_enuInit+0x9e>
	{
		if( Local_enuArray[Local_u8Iterator] != ES_OK)
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	ce 01       	movw	r24, r28
    2210:	04 96       	adiw	r24, 0x04	; 4
    2212:	fc 01       	movw	r30, r24
    2214:	e2 0f       	add	r30, r18
    2216:	f3 1f       	adc	r31, r19
    2218:	80 81       	ld	r24, Z
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	11 f0       	breq	.+4      	; 0x2222 <HEXA_enuInit+0x98>
		{
			flag = ES_NOK;
    221e:	1a 82       	std	Y+2, r1	; 0x02
    2220:	06 c0       	rjmp	.+12     	; 0x222e <HEXA_enuInit+0xa4>
	Local_enuArray[4]=DIO_enuSetPinDirection(SSG_GRP,BIT2_PIN,DIO_u8OUTPUT);
	Local_enuArray[5]=DIO_enuSetPinDirection(SSG_GRP,BIT3_PIN,DIO_u8OUTPUT);
	Local_enuArray[6]=DIO_enuSetPinValue(SSG_GRP,RIGHT_SSG_ENABLE_PIN,DIO_u8LOW_LEVEL);
	Local_enuArray[7]=DIO_enuSetPinValue(SSG_GRP,LEFT_SSG_ENABLE_PIN,DIO_u8LOW_LEVEL);

	for(u8 Local_u8Iterator=0 ; Local_u8Iterator<=7 ; Local_u8Iterator++)
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	8f 5f       	subi	r24, 0xFF	; 255
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	88 30       	cpi	r24, 0x08	; 8
    222c:	68 f3       	brcs	.-38     	; 0x2208 <HEXA_enuInit+0x7e>
		{
			flag = ES_NOK;
			break;
		}
	}
	Local_enuErrorState = flag;
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrorState;
    2232:	8b 81       	ldd	r24, Y+3	; 0x03

}
    2234:	2b 96       	adiw	r28, 0x0b	; 11
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <HEXA_enuPinEnable>:

ES_t HEXA_enuPinEnable(u8 Copy_u8GroupID,u8 Copy_u8PinID)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	00 d0       	rcall	.+0      	; 0x224c <HEXA_enuPinEnable+0x6>
    224c:	0f 92       	push	r0
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	8a 83       	std	Y+2, r24	; 0x02
    2254:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2256:	19 82       	std	Y+1, r1	; 0x01

	if( ( Copy_u8GroupID == RIGHT_SSG_GRP ) && ( Copy_u8PinID == RIGHT_SSG_ENABLE_PIN || Copy_u8PinID == LEFT_SSG_ENABLE_PIN ))
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	71 f4       	brne	.+28     	; 0x227a <HEXA_enuPinEnable+0x34>
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	19 f0       	breq	.+6      	; 0x226a <HEXA_enuPinEnable+0x24>
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	82 30       	cpi	r24, 0x02	; 2
    2268:	41 f4       	brne	.+16     	; 0x227a <HEXA_enuPinEnable+0x34>
	{
		DIO_enuSetPinValue(Copy_u8GroupID,Copy_u8PinID,HEXA_u8PINENABLE);
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	6b 81       	ldd	r22, Y+3	; 0x03
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>

		Local_enuErrorState = ES_OK;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	02 c0       	rjmp	.+4      	; 0x227e <HEXA_enuPinEnable+0x38>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    227e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <HEXA_enuPinDisable>:

ES_t HEXA_enuPinDisable(u8 Copy_u8GroupID,u8 Copy_u8PinID)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <HEXA_enuPinDisable+0x6>
    2292:	0f 92       	push	r0
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	8a 83       	std	Y+2, r24	; 0x02
    229a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    229c:	19 82       	std	Y+1, r1	; 0x01

	if( ( Copy_u8GroupID == RIGHT_SSG_GRP ) && ( Copy_u8PinID == RIGHT_SSG_ENABLE_PIN || Copy_u8PinID == LEFT_SSG_ENABLE_PIN ))
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	71 f4       	brne	.+28     	; 0x22c0 <HEXA_enuPinDisable+0x34>
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	19 f0       	breq	.+6      	; 0x22b0 <HEXA_enuPinDisable+0x24>
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	82 30       	cpi	r24, 0x02	; 2
    22ae:	41 f4       	brne	.+16     	; 0x22c0 <HEXA_enuPinDisable+0x34>
	{
		DIO_enuSetPinValue(Copy_u8GroupID,Copy_u8PinID,HEXA_u8PINDISABLE);
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	6b 81       	ldd	r22, Y+3	; 0x03
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>

		Local_enuErrorState = ES_OK;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <HEXA_enuPinDisable+0x38>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <HEXA_enuWriteNumber>:

ES_t HEXA_enuWriteNumber(u8 Copy_u8Value)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <HEXA_enuWriteNumber+0x6>
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    22de:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8Value <= HEXA_u8MAXNUMBER  )
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	8a 30       	cpi	r24, 0x0A	; 10
    22e4:	48 f5       	brcc	.+82     	; 0x2338 <HEXA_enuWriteNumber+0x66>
	{
		DIO_enuSetPinValue(SSG_GRP,BIT0_PIN,(DIO_u8BIT_MASK & ( Copy_u8Value >> HEXA_u8SH0BIT )));
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	98 2f       	mov	r25, r24
    22ea:	91 70       	andi	r25, 0x01	; 1
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	64 e0       	ldi	r22, 0x04	; 4
    22f0:	49 2f       	mov	r20, r25
    22f2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SSG_GRP,BIT1_PIN,(DIO_u8BIT_MASK & ( Copy_u8Value >> HEXA_u8SH1BIT )));
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	86 95       	lsr	r24
    22fa:	98 2f       	mov	r25, r24
    22fc:	91 70       	andi	r25, 0x01	; 1
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	65 e0       	ldi	r22, 0x05	; 5
    2302:	49 2f       	mov	r20, r25
    2304:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SSG_GRP,BIT2_PIN,(DIO_u8BIT_MASK & ( Copy_u8Value >> HEXA_u8SH2BIT )));
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	86 95       	lsr	r24
    230c:	86 95       	lsr	r24
    230e:	98 2f       	mov	r25, r24
    2310:	91 70       	andi	r25, 0x01	; 1
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	66 e0       	ldi	r22, 0x06	; 6
    2316:	49 2f       	mov	r20, r25
    2318:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SSG_GRP,BIT3_PIN,(DIO_u8BIT_MASK & ( Copy_u8Value >> HEXA_u8SH3BIT )));
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	86 95       	lsr	r24
    2320:	86 95       	lsr	r24
    2322:	86 95       	lsr	r24
    2324:	98 2f       	mov	r25, r24
    2326:	91 70       	andi	r25, 0x01	; 1
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	67 e0       	ldi	r22, 0x07	; 7
    232c:	49 2f       	mov	r20, r25
    232e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>

		Local_enuErrorState = ES_OK;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	02 c0       	rjmp	.+4      	; 0x233c <HEXA_enuWriteNumber+0x6a>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    2338:	82 e0       	ldi	r24, 0x02	; 2
    233a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    233c:	89 81       	ldd	r24, Y+1	; 0x01
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <IIC_enuInit>:
#include "IIC_priv.h"
#include "IIC_config.h"
#include "IIC_int.h"

ES_t IIC_enuInit(void)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	0f 92       	push	r0
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_u8ErrorState = ES_NOK;
    2352:	19 82       	std	Y+1, r1	; 0x01

#if IIC_MODE == IIC_MASTER


	#if IIC_PRES == 1ul
		TWSR &= ~(3<<0);
    2354:	a1 e2       	ldi	r26, 0x21	; 33
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e1 e2       	ldi	r30, 0x21	; 33
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8c 7f       	andi	r24, 0xFC	; 252
    2360:	8c 93       	st	X, r24
	#endif

	TWBR= (u8)BITRATE(IIC_CLOCK_SPEED);
    2362:	e0 e2       	ldi	r30, 0x20	; 32
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	88 e4       	ldi	r24, 0x48	; 72
    2368:	80 83       	st	Z, r24

	//TWAR &=~ (1<<0);
	TWAR = (IIC_NODE_ADDRESS<<1) | IIC_RECOG_GENERAL_CALL;
    236a:	e2 e2       	ldi	r30, 0x22	; 34
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	8a e0       	ldi	r24, 0x0A	; 10
    2370:	80 83       	st	Z, r24
	//ack bit
	TWCR |=(1<<6);
    2372:	a6 e5       	ldi	r26, 0x56	; 86
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e6 e5       	ldi	r30, 0x56	; 86
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	80 64       	ori	r24, 0x40	; 64
    237e:	8c 93       	st	X, r24

	//enable IIC
	TWCR |=(1<<2);
    2380:	a6 e5       	ldi	r26, 0x56	; 86
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e6 e5       	ldi	r30, 0x56	; 86
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	84 60       	ori	r24, 0x04	; 4
    238c:	8c 93       	st	X, r24
	TWCR |=(1<<7);
	//enable IIC
	TWCR |=(1<<2);
#endif

	return Local_u8ErrorState;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <IIC_enuStartCondition>:

ES_t IIC_enuStartCondition(void)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	0f 92       	push	r0
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_u8ErrorState = ES_NOK;
    23a2:	19 82       	std	Y+1, r1	; 0x01

	TWCR |=(1<<5);
    23a4:	a6 e5       	ldi	r26, 0x56	; 86
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e6 e5       	ldi	r30, 0x56	; 86
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	80 62       	ori	r24, 0x20	; 32
    23b0:	8c 93       	st	X, r24
	//clear flag
	TWCR |=(1<<7);
    23b2:	a6 e5       	ldi	r26, 0x56	; 86
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e6 e5       	ldi	r30, 0x56	; 86
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	80 68       	ori	r24, 0x80	; 128
    23be:	8c 93       	st	X, r24
	while(! ((TWCR>>7)&1) );
    23c0:	e6 e5       	ldi	r30, 0x56	; 86
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	88 23       	and	r24, r24
    23c8:	dc f7       	brge	.-10     	; 0x23c0 <IIC_enuStartCondition+0x28>

	if ((TWSR & 0xF8) == 0x08)
    23ca:	e1 e2       	ldi	r30, 0x21	; 33
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	88 2f       	mov	r24, r24
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	88 7f       	andi	r24, 0xF8	; 248
    23d6:	90 70       	andi	r25, 0x00	; 0
    23d8:	88 30       	cpi	r24, 0x08	; 8
    23da:	91 05       	cpc	r25, r1
    23dc:	11 f4       	brne	.+4      	; 0x23e2 <IIC_enuStartCondition+0x4a>
		Local_u8ErrorState = ES_OK;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e4:	0f 90       	pop	r0
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <IIC_enuRepeatedStartCondition>:

ES_t IIC_enuRepeatedStartCondition(void)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	0f 92       	push	r0
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_u8ErrorState = ES_NOK;
    23f6:	19 82       	std	Y+1, r1	; 0x01

	TWCR |=(1<<5);
    23f8:	a6 e5       	ldi	r26, 0x56	; 86
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e6 e5       	ldi	r30, 0x56	; 86
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	80 62       	ori	r24, 0x20	; 32
    2404:	8c 93       	st	X, r24
	//clear flag
	TWCR |=(1<<7);
    2406:	a6 e5       	ldi	r26, 0x56	; 86
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e6 e5       	ldi	r30, 0x56	; 86
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	80 68       	ori	r24, 0x80	; 128
    2412:	8c 93       	st	X, r24
	while(! ((TWCR>>7)&1) );
    2414:	e6 e5       	ldi	r30, 0x56	; 86
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	88 23       	and	r24, r24
    241c:	dc f7       	brge	.-10     	; 0x2414 <IIC_enuRepeatedStartCondition+0x28>

	if ((TWSR & 0xF8) == 0x10)
    241e:	e1 e2       	ldi	r30, 0x21	; 33
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	88 2f       	mov	r24, r24
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	88 7f       	andi	r24, 0xF8	; 248
    242a:	90 70       	andi	r25, 0x00	; 0
    242c:	80 31       	cpi	r24, 0x10	; 16
    242e:	91 05       	cpc	r25, r1
    2430:	11 f4       	brne	.+4      	; 0x2436 <IIC_enuRepeatedStartCondition+0x4a>
		Local_u8ErrorState = ES_OK;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2436:	89 81       	ldd	r24, Y+1	; 0x01
}
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <IIC_enuStopCondition>:

ES_t IIC_enuStopCondition(void)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	0f 92       	push	r0
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_u8ErrorState = ES_NOK;
    244a:	19 82       	std	Y+1, r1	; 0x01

	//clear flag
	TWCR |=(1<<4);
    244c:	a6 e5       	ldi	r26, 0x56	; 86
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e6 e5       	ldi	r30, 0x56	; 86
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	80 61       	ori	r24, 0x10	; 16
    2458:	8c 93       	st	X, r24
	TWCR |=(1<<7);
    245a:	a6 e5       	ldi	r26, 0x56	; 86
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e6 e5       	ldi	r30, 0x56	; 86
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	80 68       	ori	r24, 0x80	; 128
    2466:	8c 93       	st	X, r24

	return Local_u8ErrorState;
    2468:	89 81       	ldd	r24, Y+1	; 0x01
}
    246a:	0f 90       	pop	r0
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <IIC_enuWriteSlaveAddress>:
ES_t IIC_enuWriteSlaveAddress(u8 Copy_u8SlaveAddress , u8 Copy_u8Operation)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <IIC_enuWriteSlaveAddress+0x6>
    2478:	0f 92       	push	r0
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	8a 83       	std	Y+2, r24	; 0x02
    2480:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_u8ErrorState = ES_NOK;
    2482:	19 82       	std	Y+1, r1	; 0x01

	TWDR = ( (Copy_u8SlaveAddress<<1) | Copy_u8Operation );
    2484:	e3 e2       	ldi	r30, 0x23	; 35
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	98 2f       	mov	r25, r24
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	89 2b       	or	r24, r25
    2498:	80 83       	st	Z, r24


	//clear start condition
	TWCR &=~(1<<5);
    249a:	a6 e5       	ldi	r26, 0x56	; 86
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e6 e5       	ldi	r30, 0x56	; 86
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	8f 7d       	andi	r24, 0xDF	; 223
    24a6:	8c 93       	st	X, r24
	//clear flag
	TWCR |=(1<<7);
    24a8:	a6 e5       	ldi	r26, 0x56	; 86
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e6 e5       	ldi	r30, 0x56	; 86
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	80 68       	ori	r24, 0x80	; 128
    24b4:	8c 93       	st	X, r24
	while(! ((TWCR>>7)&1) );
    24b6:	e6 e5       	ldi	r30, 0x56	; 86
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	88 23       	and	r24, r24
    24be:	dc f7       	brge	.-10     	; 0x24b6 <IIC_enuWriteSlaveAddress+0x44>

	if ((TWSR & 0xF8) == 0x18 && Copy_u8Operation == 0)
    24c0:	e1 e2       	ldi	r30, 0x21	; 33
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	88 7f       	andi	r24, 0xF8	; 248
    24cc:	90 70       	andi	r25, 0x00	; 0
    24ce:	88 31       	cpi	r24, 0x18	; 24
    24d0:	91 05       	cpc	r25, r1
    24d2:	31 f4       	brne	.+12     	; 0x24e0 <IIC_enuWriteSlaveAddress+0x6e>
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	88 23       	and	r24, r24
    24d8:	19 f4       	brne	.+6      	; 0x24e0 <IIC_enuWriteSlaveAddress+0x6e>
		Local_u8ErrorState = ES_OK;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <IIC_enuWriteSlaveAddress+0x8c>

	else if ((TWSR & 0xF8) == 0x40 && Copy_u8Operation == 1)
    24e0:	e1 e2       	ldi	r30, 0x21	; 33
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	88 2f       	mov	r24, r24
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	88 7f       	andi	r24, 0xF8	; 248
    24ec:	90 70       	andi	r25, 0x00	; 0
    24ee:	80 34       	cpi	r24, 0x40	; 64
    24f0:	91 05       	cpc	r25, r1
    24f2:	29 f4       	brne	.+10     	; 0x24fe <IIC_enuWriteSlaveAddress+0x8c>
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	81 30       	cpi	r24, 0x01	; 1
    24f8:	11 f4       	brne	.+4      	; 0x24fe <IIC_enuWriteSlaveAddress+0x8c>
		Local_u8ErrorState = ES_OK;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <IIC_enuWriteData>:

ES_t IIC_enuWriteData(u8 Copy_u8Data)
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	00 d0       	rcall	.+0      	; 0x2512 <IIC_enuWriteData+0x6>
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    2518:	19 82       	std	Y+1, r1	; 0x01

	TWDR = Copy_u8Data;
    251a:	e3 e2       	ldi	r30, 0x23	; 35
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	80 83       	st	Z, r24

	//clear flag
	TWCR |=(1<<7);
    2522:	a6 e5       	ldi	r26, 0x56	; 86
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e6 e5       	ldi	r30, 0x56	; 86
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	80 68       	ori	r24, 0x80	; 128
    252e:	8c 93       	st	X, r24
	while(! ((TWCR>>7)&1) );
    2530:	e6 e5       	ldi	r30, 0x56	; 86
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	88 23       	and	r24, r24
    2538:	dc f7       	brge	.-10     	; 0x2530 <IIC_enuWriteData+0x24>

	if ((TWSR & 0xF8) == 0x28 || (TWSR & 0xF8) == 0xB8)
    253a:	e1 e2       	ldi	r30, 0x21	; 33
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	88 7f       	andi	r24, 0xF8	; 248
    2546:	90 70       	andi	r25, 0x00	; 0
    2548:	88 32       	cpi	r24, 0x28	; 40
    254a:	91 05       	cpc	r25, r1
    254c:	51 f0       	breq	.+20     	; 0x2562 <IIC_enuWriteData+0x56>
    254e:	e1 e2       	ldi	r30, 0x21	; 33
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	88 7f       	andi	r24, 0xF8	; 248
    255a:	90 70       	andi	r25, 0x00	; 0
    255c:	88 3b       	cpi	r24, 0xB8	; 184
    255e:	91 05       	cpc	r25, r1
    2560:	11 f4       	brne	.+4      	; 0x2566 <IIC_enuWriteData+0x5a>
		Local_u8ErrorState = ES_OK;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2566:	89 81       	ldd	r24, Y+1	; 0x01
}
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <IIC_enuCheckMyAddress>:

ES_t IIC_enuCheckMyAddress(void)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	0f 92       	push	r0
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_u8ErrorState = ES_NOK;
    257c:	19 82       	std	Y+1, r1	; 0x01

	//enable acknowledge
	TWCR |= (1<<6);
    257e:	a6 e5       	ldi	r26, 0x56	; 86
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e6 e5       	ldi	r30, 0x56	; 86
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	80 64       	ori	r24, 0x40	; 64
    258a:	8c 93       	st	X, r24
	//clear flag
	TWCR |=(1<<7);
    258c:	a6 e5       	ldi	r26, 0x56	; 86
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e6 e5       	ldi	r30, 0x56	; 86
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	80 68       	ori	r24, 0x80	; 128
    2598:	8c 93       	st	X, r24
	while(! ((TWCR>>7)&1) );
    259a:	e6 e5       	ldi	r30, 0x56	; 86
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	88 23       	and	r24, r24
    25a2:	dc f7       	brge	.-10     	; 0x259a <IIC_enuCheckMyAddress+0x28>
	if ((TWSR & 0xF8) == 0x60)
    25a4:	e1 e2       	ldi	r30, 0x21	; 33
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	88 7f       	andi	r24, 0xF8	; 248
    25b0:	90 70       	andi	r25, 0x00	; 0
    25b2:	80 36       	cpi	r24, 0x60	; 96
    25b4:	91 05       	cpc	r25, r1
    25b6:	19 f4       	brne	.+6      	; 0x25be <IIC_enuCheckMyAddress+0x4c>
		Local_u8ErrorState = ES_OK;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	0c c0       	rjmp	.+24     	; 0x25d6 <IIC_enuCheckMyAddress+0x64>

	else if ((TWSR & 0xF8) == 0xA8)
    25be:	e1 e2       	ldi	r30, 0x21	; 33
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	88 7f       	andi	r24, 0xF8	; 248
    25ca:	90 70       	andi	r25, 0x00	; 0
    25cc:	88 3a       	cpi	r24, 0xA8	; 168
    25ce:	91 05       	cpc	r25, r1
    25d0:	11 f4       	brne	.+4      	; 0x25d6 <IIC_enuCheckMyAddress+0x64>
		Local_u8ErrorState = ES_OK;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <IIC_enuReadData>:

ES_t IIC_enuReadData(u8 * Copy_pu8Data)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <IIC_enuReadData+0x6>
    25e6:	0f 92       	push	r0
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	9b 83       	std	Y+3, r25	; 0x03
    25ee:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    25f0:	19 82       	std	Y+1, r1	; 0x01

	//clear flag
	TWCR |=(1<<7);
    25f2:	a6 e5       	ldi	r26, 0x56	; 86
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e6 e5       	ldi	r30, 0x56	; 86
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	80 68       	ori	r24, 0x80	; 128
    25fe:	8c 93       	st	X, r24

	while(! ((TWCR>>7)&1) );
    2600:	e6 e5       	ldi	r30, 0x56	; 86
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	88 23       	and	r24, r24
    2608:	dc f7       	brge	.-10     	; 0x2600 <IIC_enuReadData+0x20>

	if ((TWSR & 0xF8) == 0x50 || (TWSR & 0xF8) == 0x58)
    260a:	e1 e2       	ldi	r30, 0x21	; 33
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	88 7f       	andi	r24, 0xF8	; 248
    2616:	90 70       	andi	r25, 0x00	; 0
    2618:	80 35       	cpi	r24, 0x50	; 80
    261a:	91 05       	cpc	r25, r1
    261c:	51 f0       	breq	.+20     	; 0x2632 <IIC_enuReadData+0x52>
    261e:	e1 e2       	ldi	r30, 0x21	; 33
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	88 7f       	andi	r24, 0xF8	; 248
    262a:	90 70       	andi	r25, 0x00	; 0
    262c:	88 35       	cpi	r24, 0x58	; 88
    262e:	91 05       	cpc	r25, r1
    2630:	49 f4       	brne	.+18     	; 0x2644 <IIC_enuReadData+0x64>
	{
		*Copy_pu8Data = TWDR;
    2632:	e3 e2       	ldi	r30, 0x23	; 35
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	ea 81       	ldd	r30, Y+2	; 0x02
    263a:	fb 81       	ldd	r31, Y+3	; 0x03
    263c:	80 83       	st	Z, r24
		Local_u8ErrorState = ES_OK;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	12 c0       	rjmp	.+36     	; 0x2668 <IIC_enuReadData+0x88>
	}
	else if ((TWSR & 0xF8) == 0x80)
    2644:	e1 e2       	ldi	r30, 0x21	; 33
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	88 7f       	andi	r24, 0xF8	; 248
    2650:	90 70       	andi	r25, 0x00	; 0
    2652:	80 38       	cpi	r24, 0x80	; 128
    2654:	91 05       	cpc	r25, r1
    2656:	41 f4       	brne	.+16     	; 0x2668 <IIC_enuReadData+0x88>
	{
		*Copy_pu8Data = TWDR;
    2658:	e3 e2       	ldi	r30, 0x23	; 35
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	ea 81       	ldd	r30, Y+2	; 0x02
    2660:	fb 81       	ldd	r31, Y+3	; 0x03
    2662:	80 83       	st	Z, r24
		Local_u8ErrorState = ES_OK;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2668:	89 81       	ldd	r24, Y+1	; 0x01
}
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <Keypad_enuInit>:

#include "Keypad_configuration.h"
#include "Keypad_interface.h"

ES_t Keypad_enuInit()
{
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	0f 92       	push	r0
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2680:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_R0_PIN,DIO_INPUT);
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_R1_PIN,DIO_INPUT);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_R2_PIN,DIO_INPUT);
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	62 e0       	ldi	r22, 0x02	; 2
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_R3_PIN,DIO_INPUT);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	63 e0       	ldi	r22, 0x03	; 3
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_C0_PIN,DIO_OUTPUT);
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	64 e0       	ldi	r22, 0x04	; 4
    26ae:	41 e0       	ldi	r20, 0x01	; 1
    26b0:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_C1_PIN,DIO_OUTPUT);
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	65 e0       	ldi	r22, 0x05	; 5
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_C2_PIN,DIO_OUTPUT);
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	66 e0       	ldi	r22, 0x06	; 6
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_GRP,KEYPAD_C3_PIN,DIO_OUTPUT);
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	67 e0       	ldi	r22, 0x07	; 7
    26cc:	41 e0       	ldi	r20, 0x01	; 1
    26ce:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_C0_PIN,DIO_HIGH_LEVEL);
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	64 e0       	ldi	r22, 0x04	; 4
    26d6:	41 e0       	ldi	r20, 0x01	; 1
    26d8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_C1_PIN,DIO_HIGH_LEVEL);
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	65 e0       	ldi	r22, 0x05	; 5
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_C2_PIN,DIO_HIGH_LEVEL);
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	66 e0       	ldi	r22, 0x06	; 6
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_C3_PIN,DIO_HIGH_LEVEL);
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	67 e0       	ldi	r22, 0x07	; 7
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>

	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_R0_PIN,DIO_PULL_UP);
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_R1_PIN,DIO_PULL_UP);
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	41 e0       	ldi	r20, 0x01	; 1
    270a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_R2_PIN,DIO_PULL_UP);
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	62 e0       	ldi	r22, 0x02	; 2
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEYPAD_GRP,KEYPAD_R3_PIN,DIO_PULL_UP);
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	63 e0       	ldi	r22, 0x03	; 3
    271c:	41 e0       	ldi	r20, 0x01	; 1
    271e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>



	return Local_enuErrorState;
    2722:	89 81       	ldd	r24, Y+1	; 0x01
}
    2724:	0f 90       	pop	r0
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey( u8* Copy_pu8PressedKey)
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	e2 97       	sbiw	r28, 0x32	; 50
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	9c a7       	std	Y+44, r25	; 0x2c
    2742:	8b a7       	std	Y+43, r24	; 0x2b
	ES_t Local_enuErrorState = ES_NOK;
    2744:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Local_u8RowIter;
	u8 Local_u8ColumnIter;
	u8 Local_u8PinValue;
	*Copy_pu8PressedKey = Keypad_NOT_PREESED;
    2746:	eb a5       	ldd	r30, Y+43	; 0x2b
    2748:	fc a5       	ldd	r31, Y+44	; 0x2c
    274a:	8f ef       	ldi	r24, 0xFF	; 255
    274c:	80 83       	st	Z, r24
	u8 Local_Au8RowsPin[KEYPAD_u8ROWS_NUMBER] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
    274e:	1b 8a       	std	Y+19, r1	; 0x13
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	8c 8b       	std	Y+20, r24	; 0x14
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	8d 8b       	std	Y+21, r24	; 0x15
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	8e 8b       	std	Y+22, r24	; 0x16
	u8 Local_Au8ColumnsPin[KEYPAD_u8COLUMNS_NUMBER] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
    275c:	84 e0       	ldi	r24, 0x04	; 4
    275e:	8f 8b       	std	Y+23, r24	; 0x17
    2760:	85 e0       	ldi	r24, 0x05	; 5
    2762:	88 8f       	std	Y+24, r24	; 0x18
    2764:	86 e0       	ldi	r24, 0x06	; 6
    2766:	89 8f       	std	Y+25, r24	; 0x19
    2768:	87 e0       	ldi	r24, 0x07	; 7
    276a:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_Au8ArrayOfValue[KEYPAD_u8ROWS_NUMBER][KEYPAD_u8COLUMNS_NUMBER] = KEYPAD_Au8KEYS_VALUES ;
    276c:	ce 01       	movw	r24, r28
    276e:	4b 96       	adiw	r24, 0x1b	; 27
    2770:	9f a7       	std	Y+47, r25	; 0x2f
    2772:	8e a7       	std	Y+46, r24	; 0x2e
    2774:	e8 e6       	ldi	r30, 0x68	; 104
    2776:	f1 e0       	ldi	r31, 0x01	; 1
    2778:	f9 ab       	std	Y+49, r31	; 0x31
    277a:	e8 ab       	std	Y+48, r30	; 0x30
    277c:	f0 e1       	ldi	r31, 0x10	; 16
    277e:	fa ab       	std	Y+50, r31	; 0x32
    2780:	e8 a9       	ldd	r30, Y+48	; 0x30
    2782:	f9 a9       	ldd	r31, Y+49	; 0x31
    2784:	00 80       	ld	r0, Z
    2786:	88 a9       	ldd	r24, Y+48	; 0x30
    2788:	99 a9       	ldd	r25, Y+49	; 0x31
    278a:	01 96       	adiw	r24, 0x01	; 1
    278c:	99 ab       	std	Y+49, r25	; 0x31
    278e:	88 ab       	std	Y+48, r24	; 0x30
    2790:	ee a5       	ldd	r30, Y+46	; 0x2e
    2792:	ff a5       	ldd	r31, Y+47	; 0x2f
    2794:	00 82       	st	Z, r0
    2796:	8e a5       	ldd	r24, Y+46	; 0x2e
    2798:	9f a5       	ldd	r25, Y+47	; 0x2f
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	9f a7       	std	Y+47, r25	; 0x2f
    279e:	8e a7       	std	Y+46, r24	; 0x2e
    27a0:	9a a9       	ldd	r25, Y+50	; 0x32
    27a2:	91 50       	subi	r25, 0x01	; 1
    27a4:	9a ab       	std	Y+50, r25	; 0x32
    27a6:	ea a9       	ldd	r30, Y+50	; 0x32
    27a8:	ee 23       	and	r30, r30
    27aa:	51 f7       	brne	.-44     	; 0x2780 <Keypad_enuGetPressedKey+0x54>


	for(Local_u8ColumnIter = 0 ; Local_u8ColumnIter < KEYPAD_u8COLUMNS_NUMBER ; Local_u8ColumnIter++ )
    27ac:	18 8a       	std	Y+16, r1	; 0x10
    27ae:	e8 c0       	rjmp	.+464    	; 0x2980 <Keypad_enuGetPressedKey+0x254>
	{
		/*  set column to zero*/
		DIO_enuSetPinValue(KEYPAD_GRP, Local_Au8ColumnsPin[Local_u8ColumnIter] , DIO_LOW_LEVEL);
    27b0:	88 89       	ldd	r24, Y+16	; 0x10
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	ce 01       	movw	r24, r28
    27b8:	47 96       	adiw	r24, 0x17	; 23
    27ba:	fc 01       	movw	r30, r24
    27bc:	e2 0f       	add	r30, r18
    27be:	f3 1f       	adc	r31, r19
    27c0:	90 81       	ld	r25, Z
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	69 2f       	mov	r22, r25
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>

		for(Local_u8RowIter = 0 ; Local_u8RowIter < KEYPAD_u8ROWS_NUMBER ; Local_u8RowIter++)
    27cc:	19 8a       	std	Y+17, r1	; 0x11
    27ce:	c3 c0       	rjmp	.+390    	; 0x2956 <Keypad_enuGetPressedKey+0x22a>
		{
			Local_u8PinValue = DIO_u8GetPinValue(KEYPAD_GRP , Local_Au8RowsPin[Local_u8RowIter] );
    27d0:	89 89       	ldd	r24, Y+17	; 0x11
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	ce 01       	movw	r24, r28
    27d8:	43 96       	adiw	r24, 0x13	; 19
    27da:	fc 01       	movw	r30, r24
    27dc:	e2 0f       	add	r30, r18
    27de:	f3 1f       	adc	r31, r19
    27e0:	90 81       	ld	r25, Z
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	69 2f       	mov	r22, r25
    27e6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_u8GetPinValue>
    27ea:	8f 87       	std	Y+15, r24	; 0x0f

			if( Local_u8PinValue == DIO_LOW_LEVEL )
    27ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ee:	88 23       	and	r24, r24
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <Keypad_enuGetPressedKey+0xc8>
    27f2:	ae c0       	rjmp	.+348    	; 0x2950 <Keypad_enuGetPressedKey+0x224>
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e2       	ldi	r26, 0x20	; 32
    27fa:	b1 e4       	ldi	r27, 0x41	; 65
    27fc:	8b 87       	std	Y+11, r24	; 0x0b
    27fe:	9c 87       	std	Y+12, r25	; 0x0c
    2800:	ad 87       	std	Y+13, r26	; 0x0d
    2802:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2804:	6b 85       	ldd	r22, Y+11	; 0x0b
    2806:	7c 85       	ldd	r23, Y+12	; 0x0c
    2808:	8d 85       	ldd	r24, Y+13	; 0x0d
    280a:	9e 85       	ldd	r25, Y+14	; 0x0e
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a e7       	ldi	r20, 0x7A	; 122
    2812:	55 e4       	ldi	r21, 0x45	; 69
    2814:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8f 83       	std	Y+7, r24	; 0x07
    281e:	98 87       	std	Y+8, r25	; 0x08
    2820:	a9 87       	std	Y+9, r26	; 0x09
    2822:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e8       	ldi	r20, 0x80	; 128
    2832:	5f e3       	ldi	r21, 0x3F	; 63
    2834:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    2838:	88 23       	and	r24, r24
    283a:	2c f4       	brge	.+10     	; 0x2846 <Keypad_enuGetPressedKey+0x11a>
		__ticks = 1;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9e 83       	std	Y+6, r25	; 0x06
    2842:	8d 83       	std	Y+5, r24	; 0x05
    2844:	3f c0       	rjmp	.+126    	; 0x28c4 <Keypad_enuGetPressedKey+0x198>
	else if (__tmp > 65535)
    2846:	6f 81       	ldd	r22, Y+7	; 0x07
    2848:	78 85       	ldd	r23, Y+8	; 0x08
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	4f e7       	ldi	r20, 0x7F	; 127
    2854:	57 e4       	ldi	r21, 0x47	; 71
    2856:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    285a:	18 16       	cp	r1, r24
    285c:	4c f5       	brge	.+82     	; 0x28b0 <Keypad_enuGetPressedKey+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2860:	7c 85       	ldd	r23, Y+12	; 0x0c
    2862:	8d 85       	ldd	r24, Y+13	; 0x0d
    2864:	9e 85       	ldd	r25, Y+14	; 0x0e
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e2       	ldi	r20, 0x20	; 32
    286c:	51 e4       	ldi	r21, 0x41	; 65
    286e:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9e 83       	std	Y+6, r25	; 0x06
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	0f c0       	rjmp	.+30     	; 0x28a6 <Keypad_enuGetPressedKey+0x17a>
    2888:	80 e9       	ldi	r24, 0x90	; 144
    288a:	91 e0       	ldi	r25, 0x01	; 1
    288c:	9c 83       	std	Y+4, r25	; 0x04
    288e:	8b 83       	std	Y+3, r24	; 0x03
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	9c 81       	ldd	r25, Y+4	; 0x04
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <Keypad_enuGetPressedKey+0x168>
    2898:	9c 83       	std	Y+4, r25	; 0x04
    289a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289c:	8d 81       	ldd	r24, Y+5	; 0x05
    289e:	9e 81       	ldd	r25, Y+6	; 0x06
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	9e 83       	std	Y+6, r25	; 0x06
    28a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a6:	8d 81       	ldd	r24, Y+5	; 0x05
    28a8:	9e 81       	ldd	r25, Y+6	; 0x06
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	69 f7       	brne	.-38     	; 0x2888 <Keypad_enuGetPressedKey+0x15c>
    28ae:	14 c0       	rjmp	.+40     	; 0x28d8 <Keypad_enuGetPressedKey+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b0:	6f 81       	ldd	r22, Y+7	; 0x07
    28b2:	78 85       	ldd	r23, Y+8	; 0x08
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9e 83       	std	Y+6, r25	; 0x06
    28c2:	8d 83       	std	Y+5, r24	; 0x05
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <Keypad_enuGetPressedKey+0x1a4>
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10); // for debouncing
				Local_u8PinValue = DIO_u8GetPinValue(KEYPAD_GRP , Local_Au8RowsPin[Local_u8RowIter]);
    28d8:	89 89       	ldd	r24, Y+17	; 0x11
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	ce 01       	movw	r24, r28
    28e0:	43 96       	adiw	r24, 0x13	; 19
    28e2:	fc 01       	movw	r30, r24
    28e4:	e2 0f       	add	r30, r18
    28e6:	f3 1f       	adc	r31, r19
    28e8:	90 81       	ld	r25, Z
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	69 2f       	mov	r22, r25
    28ee:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_u8GetPinValue>
    28f2:	8f 87       	std	Y+15, r24	; 0x0f
				if( Local_u8PinValue == DIO_LOW_LEVEL )
    28f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f6:	88 23       	and	r24, r24
    28f8:	59 f5       	brne	.+86     	; 0x2950 <Keypad_enuGetPressedKey+0x224>
				{

					*Copy_pu8PressedKey = Local_Au8ArrayOfValue[Local_u8RowIter][Local_u8ColumnIter];
    28fa:	89 89       	ldd	r24, Y+17	; 0x11
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	88 89       	ldd	r24, Y+16	; 0x10
    2902:	48 2f       	mov	r20, r24
    2904:	50 e0       	ldi	r21, 0x00	; 0
    2906:	22 0f       	add	r18, r18
    2908:	33 1f       	adc	r19, r19
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	ce 01       	movw	r24, r28
    2910:	01 96       	adiw	r24, 0x01	; 1
    2912:	82 0f       	add	r24, r18
    2914:	93 1f       	adc	r25, r19
    2916:	84 0f       	add	r24, r20
    2918:	95 1f       	adc	r25, r21
    291a:	fc 01       	movw	r30, r24
    291c:	7a 96       	adiw	r30, 0x1a	; 26
    291e:	80 81       	ld	r24, Z
    2920:	eb a5       	ldd	r30, Y+43	; 0x2b
    2922:	fc a5       	ldd	r31, Y+44	; 0x2c
    2924:	80 83       	st	Z, r24
    2926:	0e c0       	rjmp	.+28     	; 0x2944 <Keypad_enuGetPressedKey+0x218>
					//to prevent the holding press ( pooling or busy waiting )
					while(Local_u8PinValue == DIO_LOW_LEVEL )
					{
						Local_u8PinValue = DIO_u8GetPinValue(KEYPAD_GRP , Local_Au8RowsPin[Local_u8RowIter] );
    2928:	89 89       	ldd	r24, Y+17	; 0x11
    292a:	28 2f       	mov	r18, r24
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	ce 01       	movw	r24, r28
    2930:	43 96       	adiw	r24, 0x13	; 19
    2932:	fc 01       	movw	r30, r24
    2934:	e2 0f       	add	r30, r18
    2936:	f3 1f       	adc	r31, r19
    2938:	90 81       	ld	r25, Z
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	69 2f       	mov	r22, r25
    293e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_u8GetPinValue>
    2942:	8f 87       	std	Y+15, r24	; 0x0f
				if( Local_u8PinValue == DIO_LOW_LEVEL )
				{

					*Copy_pu8PressedKey = Local_Au8ArrayOfValue[Local_u8RowIter][Local_u8ColumnIter];
					//to prevent the holding press ( pooling or busy waiting )
					while(Local_u8PinValue == DIO_LOW_LEVEL )
    2944:	8f 85       	ldd	r24, Y+15	; 0x0f
    2946:	88 23       	and	r24, r24
    2948:	79 f3       	breq	.-34     	; 0x2928 <Keypad_enuGetPressedKey+0x1fc>
					{
						Local_u8PinValue = DIO_u8GetPinValue(KEYPAD_GRP , Local_Au8RowsPin[Local_u8RowIter] );
					}

					return ES_OK;
    294a:	f1 e0       	ldi	r31, 0x01	; 1
    294c:	fd a7       	std	Y+45, r31	; 0x2d
    294e:	1e c0       	rjmp	.+60     	; 0x298c <Keypad_enuGetPressedKey+0x260>
	for(Local_u8ColumnIter = 0 ; Local_u8ColumnIter < KEYPAD_u8COLUMNS_NUMBER ; Local_u8ColumnIter++ )
	{
		/*  set column to zero*/
		DIO_enuSetPinValue(KEYPAD_GRP, Local_Au8ColumnsPin[Local_u8ColumnIter] , DIO_LOW_LEVEL);

		for(Local_u8RowIter = 0 ; Local_u8RowIter < KEYPAD_u8ROWS_NUMBER ; Local_u8RowIter++)
    2950:	89 89       	ldd	r24, Y+17	; 0x11
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	89 8b       	std	Y+17, r24	; 0x11
    2956:	89 89       	ldd	r24, Y+17	; 0x11
    2958:	84 30       	cpi	r24, 0x04	; 4
    295a:	08 f4       	brcc	.+2      	; 0x295e <Keypad_enuGetPressedKey+0x232>
    295c:	39 cf       	rjmp	.-398    	; 0x27d0 <Keypad_enuGetPressedKey+0xa4>
			}

		}


		DIO_enuSetPinValue(KEYPAD_GRP, Local_Au8ColumnsPin[Local_u8ColumnIter] , DIO_HIGH_LEVEL);
    295e:	88 89       	ldd	r24, Y+16	; 0x10
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	ce 01       	movw	r24, r28
    2966:	47 96       	adiw	r24, 0x17	; 23
    2968:	fc 01       	movw	r30, r24
    296a:	e2 0f       	add	r30, r18
    296c:	f3 1f       	adc	r31, r19
    296e:	90 81       	ld	r25, Z
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	69 2f       	mov	r22, r25
    2974:	41 e0       	ldi	r20, 0x01	; 1
    2976:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
	u8 Local_Au8RowsPin[KEYPAD_u8ROWS_NUMBER] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 Local_Au8ColumnsPin[KEYPAD_u8COLUMNS_NUMBER] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
	u8 Local_Au8ArrayOfValue[KEYPAD_u8ROWS_NUMBER][KEYPAD_u8COLUMNS_NUMBER] = KEYPAD_Au8KEYS_VALUES ;


	for(Local_u8ColumnIter = 0 ; Local_u8ColumnIter < KEYPAD_u8COLUMNS_NUMBER ; Local_u8ColumnIter++ )
    297a:	88 89       	ldd	r24, Y+16	; 0x10
    297c:	8f 5f       	subi	r24, 0xFF	; 255
    297e:	88 8b       	std	Y+16, r24	; 0x10
    2980:	88 89       	ldd	r24, Y+16	; 0x10
    2982:	84 30       	cpi	r24, 0x04	; 4
    2984:	08 f4       	brcc	.+2      	; 0x2988 <Keypad_enuGetPressedKey+0x25c>
    2986:	14 cf       	rjmp	.-472    	; 0x27b0 <Keypad_enuGetPressedKey+0x84>

		DIO_enuSetPinValue(KEYPAD_GRP, Local_Au8ColumnsPin[Local_u8ColumnIter] , DIO_HIGH_LEVEL);
	}


	return Local_enuErrorState;
    2988:	8a 89       	ldd	r24, Y+18	; 0x12
    298a:	8d a7       	std	Y+45, r24	; 0x2d
    298c:	8d a5       	ldd	r24, Y+45	; 0x2d
}
    298e:	e2 96       	adiw	r28, 0x32	; 50
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	f8 94       	cli
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	cd bf       	out	0x3d, r28	; 61
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <SendHalfDataPort>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_configuration.h"

static void SendHalfDataPort(u8 Copy_u8Data)
{
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	00 d0       	rcall	.+0      	; 0x29a6 <SendHalfDataPort+0x6>
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <SendHalfDataPort+0x8>
    29a8:	00 d0       	rcall	.+0      	; 0x29aa <SendHalfDataPort+0xa>
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_Au8DataPins[4]={LCD_DATA_PIN4,LCD_DATA_PIN5,LCD_DATA_PIN6,LCD_DATA_PIN7};
    29b0:	84 e0       	ldi	r24, 0x04	; 4
    29b2:	8a 83       	std	Y+2, r24	; 0x02
    29b4:	85 e0       	ldi	r24, 0x05	; 5
    29b6:	8b 83       	std	Y+3, r24	; 0x03
    29b8:	86 e0       	ldi	r24, 0x06	; 6
    29ba:	8c 83       	std	Y+4, r24	; 0x04
    29bc:	87 e0       	ldi	r24, 0x07	; 7
    29be:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_u8Iterator ;

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 4 ;Local_u8Iterator++ )
    29c0:	19 82       	std	Y+1, r1	; 0x01
    29c2:	20 c0       	rjmp	.+64     	; 0x2a04 <SendHalfDataPort+0x64>
	{
		DIO_enuSetPinValue(LCD_DATA_GRP , Local_Au8DataPins[Local_u8Iterator],(Copy_u8Data >> Local_u8Iterator) & 1);
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	ce 01       	movw	r24, r28
    29cc:	02 96       	adiw	r24, 0x02	; 2
    29ce:	fc 01       	movw	r30, r24
    29d0:	e2 0f       	add	r30, r18
    29d2:	f3 1f       	adc	r31, r19
    29d4:	40 81       	ld	r20, Z
    29d6:	8e 81       	ldd	r24, Y+6	; 0x06
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	88 2f       	mov	r24, r24
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	b9 01       	movw	r22, r18
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <SendHalfDataPort+0x4a>
    29e6:	75 95       	asr	r23
    29e8:	67 95       	ror	r22
    29ea:	8a 95       	dec	r24
    29ec:	e2 f7       	brpl	.-8      	; 0x29e6 <SendHalfDataPort+0x46>
    29ee:	cb 01       	movw	r24, r22
    29f0:	98 2f       	mov	r25, r24
    29f2:	91 70       	andi	r25, 0x01	; 1
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	64 2f       	mov	r22, r20
    29f8:	49 2f       	mov	r20, r25
    29fa:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
static void SendHalfDataPort(u8 Copy_u8Data)
{
	u8 Local_Au8DataPins[4]={LCD_DATA_PIN4,LCD_DATA_PIN5,LCD_DATA_PIN6,LCD_DATA_PIN7};
	u8 Local_u8Iterator ;

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 4 ;Local_u8Iterator++ )
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	84 30       	cpi	r24, 0x04	; 4
    2a08:	e8 f2       	brcs	.-70     	; 0x29c4 <SendHalfDataPort+0x24>
	{
		DIO_enuSetPinValue(LCD_DATA_GRP , Local_Au8DataPins[Local_u8Iterator],(Copy_u8Data >> Local_u8Iterator) & 1);
	}

}
    2a0a:	26 96       	adiw	r28, 0x06	; 6
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <SendEnablePulse>:

static void SendEnablePulse()
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	2e 97       	sbiw	r28, 0x0e	; 14
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_HIGH_LEVEL);
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	63 e0       	ldi	r22, 0x03	; 3
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a0 e0       	ldi	r26, 0x00	; 0
    2a40:	b0 e4       	ldi	r27, 0x40	; 64
    2a42:	8b 87       	std	Y+11, r24	; 0x0b
    2a44:	9c 87       	std	Y+12, r25	; 0x0c
    2a46:	ad 87       	std	Y+13, r26	; 0x0d
    2a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4a e7       	ldi	r20, 0x7A	; 122
    2a58:	55 e4       	ldi	r21, 0x45	; 69
    2a5a:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8f 83       	std	Y+7, r24	; 0x07
    2a64:	98 87       	std	Y+8, r25	; 0x08
    2a66:	a9 87       	std	Y+9, r26	; 0x09
    2a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6c:	78 85       	ldd	r23, Y+8	; 0x08
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <SendEnablePulse+0x70>
		__ticks = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9e 83       	std	Y+6, r25	; 0x06
    2a88:	8d 83       	std	Y+5, r24	; 0x05
    2a8a:	3f c0       	rjmp	.+126    	; 0x2b0a <SendEnablePulse+0xee>
	else if (__tmp > 65535)
    2a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8e:	78 85       	ldd	r23, Y+8	; 0x08
    2a90:	89 85       	ldd	r24, Y+9	; 0x09
    2a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	4c f5       	brge	.+82     	; 0x2af6 <SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9e 83       	std	Y+6, r25	; 0x06
    2aca:	8d 83       	std	Y+5, r24	; 0x05
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <SendEnablePulse+0xd0>
    2ace:	80 e9       	ldi	r24, 0x90	; 144
    2ad0:	91 e0       	ldi	r25, 0x01	; 1
    2ad2:	9c 83       	std	Y+4, r25	; 0x04
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <SendEnablePulse+0xbe>
    2ade:	9c 83       	std	Y+4, r25	; 0x04
    2ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	69 f7       	brne	.-38     	; 0x2ace <SendEnablePulse+0xb2>
    2af4:	14 c0       	rjmp	.+40     	; 0x2b1e <SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af6:	6f 81       	ldd	r22, Y+7	; 0x07
    2af8:	78 85       	ldd	r23, Y+8	; 0x08
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <SendEnablePulse+0xfa>
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01

	/* Wait */
	_delay_ms(2);

	DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_LOW_LEVEL);
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	63 e0       	ldi	r22, 0x03	; 3
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>

}
    2b28:	2e 96       	adiw	r28, 0x0e	; 14
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <LCD_enuSetAllDirection>:


ES_t LCD_enuSetAllDirection()
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	0f 92       	push	r0
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	89 83       	std	Y+1, r24	; 0x01

	/* Control Direction */
	DIO_enuSetPinDirection(LCD_RS_GRP,LCD_RS_PIN,DIO_OUTPUT);
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	41 e0       	ldi	r20, 0x01	; 1
    2b4e:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_RW_GRP,LCD_RW_PIN,DIO_OUTPUT);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	62 e0       	ldi	r22, 0x02	; 2
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_EN_GRP,LCD_EN_PIN,DIO_OUTPUT);
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	63 e0       	ldi	r22, 0x03	; 3
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	/* Data Direction */
#if LCD_MODE == LCD_EIGHT_BIT
	DIO_enuSetPortDirection(LCD_DATA_GRP,0xff);

#elif LCD_MODE == LCD_FOUR_BIT
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN4,DIO_OUTPUT);
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	64 e0       	ldi	r22, 0x04	; 4
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN5,DIO_OUTPUT);
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	65 e0       	ldi	r22, 0x05	; 5
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN6,DIO_OUTPUT);
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	66 e0       	ldi	r22, 0x06	; 6
    2b7e:	41 e0       	ldi	r20, 0x01	; 1
    2b80:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN7,DIO_OUTPUT);
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	67 e0       	ldi	r22, 0x07	; 7
    2b88:	41 e0       	ldi	r20, 0x01	; 1
    2b8a:	0e 94 ef 09 	call	0x13de	; 0x13de <DIO_enuSetPinDirection>

#endif
	return Local_enuErrorState;
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b90:	0f 90       	pop	r0
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <LCD_enuInit>:

ES_t LCD_enuInit(void)
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	2f 97       	sbiw	r28, 0x0f	; 15
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_OK;
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_enuSetAllDirection();
    2bb0:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_enuSetAllDirection>
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	a0 e2       	ldi	r26, 0x20	; 32
    2bba:	b2 e4       	ldi	r27, 0x42	; 66
    2bbc:	8b 87       	std	Y+11, r24	; 0x0b
    2bbe:	9c 87       	std	Y+12, r25	; 0x0c
    2bc0:	ad 87       	std	Y+13, r26	; 0x0d
    2bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	4a e7       	ldi	r20, 0x7A	; 122
    2bd2:	55 e4       	ldi	r21, 0x45	; 69
    2bd4:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	8f 83       	std	Y+7, r24	; 0x07
    2bde:	98 87       	std	Y+8, r25	; 0x08
    2be0:	a9 87       	std	Y+9, r26	; 0x09
    2be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be4:	6f 81       	ldd	r22, Y+7	; 0x07
    2be6:	78 85       	ldd	r23, Y+8	; 0x08
    2be8:	89 85       	ldd	r24, Y+9	; 0x09
    2bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e8       	ldi	r20, 0x80	; 128
    2bf2:	5f e3       	ldi	r21, 0x3F	; 63
    2bf4:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    2bf8:	88 23       	and	r24, r24
    2bfa:	2c f4       	brge	.+10     	; 0x2c06 <LCD_enuInit+0x6e>
		__ticks = 1;
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9e 83       	std	Y+6, r25	; 0x06
    2c02:	8d 83       	std	Y+5, r24	; 0x05
    2c04:	3f c0       	rjmp	.+126    	; 0x2c84 <LCD_enuInit+0xec>
	else if (__tmp > 65535)
    2c06:	6f 81       	ldd	r22, Y+7	; 0x07
    2c08:	78 85       	ldd	r23, Y+8	; 0x08
    2c0a:	89 85       	ldd	r24, Y+9	; 0x09
    2c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	3f ef       	ldi	r19, 0xFF	; 255
    2c12:	4f e7       	ldi	r20, 0x7F	; 127
    2c14:	57 e4       	ldi	r21, 0x47	; 71
    2c16:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    2c1a:	18 16       	cp	r1, r24
    2c1c:	4c f5       	brge	.+82     	; 0x2c70 <LCD_enuInit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e2       	ldi	r20, 0x20	; 32
    2c2c:	51 e4       	ldi	r21, 0x41	; 65
    2c2e:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9e 83       	std	Y+6, r25	; 0x06
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	0f c0       	rjmp	.+30     	; 0x2c66 <LCD_enuInit+0xce>
    2c48:	80 e9       	ldi	r24, 0x90	; 144
    2c4a:	91 e0       	ldi	r25, 0x01	; 1
    2c4c:	9c 83       	std	Y+4, r25	; 0x04
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	9c 81       	ldd	r25, Y+4	; 0x04
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_enuInit+0xbc>
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	9e 83       	std	Y+6, r25	; 0x06
    2c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c66:	8d 81       	ldd	r24, Y+5	; 0x05
    2c68:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	69 f7       	brne	.-38     	; 0x2c48 <LCD_enuInit+0xb0>
    2c6e:	14 c0       	rjmp	.+40     	; 0x2c98 <LCD_enuInit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c70:	6f 81       	ldd	r22, Y+7	; 0x07
    2c72:	78 85       	ldd	r23, Y+8	; 0x08
    2c74:	89 85       	ldd	r24, Y+9	; 0x09
    2c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_enuInit+0xf8>
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuWriteCommand(0b00111000);

#elif LCD_MODE == LCD_FOUR_BIT

	/* Function Set */
	SendHalfDataPort(0b0010);
    2c98:	82 e0       	ldi	r24, 0x02	; 2
    2c9a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <SendHalfDataPort>
	SendEnablePulse();
    2c9e:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <SendEnablePulse>
	SendHalfDataPort(0b0010);
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <SendHalfDataPort>
	SendEnablePulse();
    2ca8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <SendEnablePulse>
	SendHalfDataPort(0b1100);
    2cac:	8c e0       	ldi	r24, 0x0C	; 12
    2cae:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <SendHalfDataPort>
	SendEnablePulse();
    2cb2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <SendEnablePulse>
#else
	Error : " The configuration is wrong "
#endif

	/* Display Control */
	LCD_enuWriteCommand(0b00001111);
    2cb6:	8f e0       	ldi	r24, 0x0F	; 15
    2cb8:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_enuWriteCommand>

	/* Display Clear */
	LCD_enuClear();
    2cbc:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <LCD_enuClear>



	return Local_enuErrorState;
    2cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2cc2:	2f 96       	adiw	r28, 0x0f	; 15
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret

00002cd4 <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Command)
{
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	00 d0       	rcall	.+0      	; 0x2cda <LCD_enuWriteCommand+0x6>
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	89 83       	std	Y+1, r24	; 0x01

	/* Set RS to zero for writing command */
	DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW_LEVEL);
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	61 e0       	ldi	r22, 0x01	; 1
    2ce8:	40 e0       	ldi	r20, 0x00	; 0
    2cea:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>

	/* Set RW to zero for writing */
	DIO_enuSetPinValue(LCD_RW_GRP,LCD_RW_PIN,DIO_LOW_LEVEL);
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	62 e0       	ldi	r22, 0x02	; 2
    2cf2:	40 e0       	ldi	r20, 0x00	; 0
    2cf4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
	SendEnablePulse();

#elif LCD_MODE == LCD_FOUR_BIT

	/* Write higher command to data pins */
	SendHalfDataPort(Copy_u8Command >> 4);
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	82 95       	swap	r24
    2cfc:	8f 70       	andi	r24, 0x0F	; 15
    2cfe:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
    2d02:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <SendEnablePulse>

	/* Write lower command to data pins */
	SendHalfDataPort(Copy_u8Command);
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
    2d0c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <SendEnablePulse>

#endif



	return Local_enuErrorState;
    2d10:	89 81       	ldd	r24, Y+1	; 0x01


}
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <LCD_enuClear>:

ES_t LCD_enuClear()
{
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	2f 97       	sbiw	r28, 0x0f	; 15
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_OK;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_enuWriteCommand(0b00000001);
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_enuWriteCommand>
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	a0 e0       	ldi	r26, 0x00	; 0
    2d40:	b0 e4       	ldi	r27, 0x40	; 64
    2d42:	8b 87       	std	Y+11, r24	; 0x0b
    2d44:	9c 87       	std	Y+12, r25	; 0x0c
    2d46:	ad 87       	std	Y+13, r26	; 0x0d
    2d48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	4a e7       	ldi	r20, 0x7A	; 122
    2d58:	55 e4       	ldi	r21, 0x45	; 69
    2d5a:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	8f 83       	std	Y+7, r24	; 0x07
    2d64:	98 87       	std	Y+8, r25	; 0x08
    2d66:	a9 87       	std	Y+9, r26	; 0x09
    2d68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6c:	78 85       	ldd	r23, Y+8	; 0x08
    2d6e:	89 85       	ldd	r24, Y+9	; 0x09
    2d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e8       	ldi	r20, 0x80	; 128
    2d78:	5f e3       	ldi	r21, 0x3F	; 63
    2d7a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    2d7e:	88 23       	and	r24, r24
    2d80:	2c f4       	brge	.+10     	; 0x2d8c <LCD_enuClear+0x70>
		__ticks = 1;
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
    2d8a:	3f c0       	rjmp	.+126    	; 0x2e0a <LCD_enuClear+0xee>
	else if (__tmp > 65535)
    2d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8e:	78 85       	ldd	r23, Y+8	; 0x08
    2d90:	89 85       	ldd	r24, Y+9	; 0x09
    2d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	3f ef       	ldi	r19, 0xFF	; 255
    2d98:	4f e7       	ldi	r20, 0x7F	; 127
    2d9a:	57 e4       	ldi	r21, 0x47	; 71
    2d9c:	0e 94 41 05 	call	0xa82	; 0xa82 <__gtsf2>
    2da0:	18 16       	cp	r1, r24
    2da2:	4c f5       	brge	.+82     	; 0x2df6 <LCD_enuClear+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e2       	ldi	r20, 0x20	; 32
    2db2:	51 e4       	ldi	r21, 0x41	; 65
    2db4:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	cd 01       	movw	r24, r26
    2dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9e 83       	std	Y+6, r25	; 0x06
    2dca:	8d 83       	std	Y+5, r24	; 0x05
    2dcc:	0f c0       	rjmp	.+30     	; 0x2dec <LCD_enuClear+0xd0>
    2dce:	80 e9       	ldi	r24, 0x90	; 144
    2dd0:	91 e0       	ldi	r25, 0x01	; 1
    2dd2:	9c 83       	std	Y+4, r25	; 0x04
    2dd4:	8b 83       	std	Y+3, r24	; 0x03
    2dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <LCD_enuClear+0xbe>
    2dde:	9c 83       	std	Y+4, r25	; 0x04
    2de0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de2:	8d 81       	ldd	r24, Y+5	; 0x05
    2de4:	9e 81       	ldd	r25, Y+6	; 0x06
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	69 f7       	brne	.-38     	; 0x2dce <LCD_enuClear+0xb2>
    2df4:	14 c0       	rjmp	.+40     	; 0x2e1e <LCD_enuClear+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df6:	6f 81       	ldd	r22, Y+7	; 0x07
    2df8:	78 85       	ldd	r23, Y+8	; 0x08
    2dfa:	89 85       	ldd	r24, Y+9	; 0x09
    2dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	9e 83       	std	Y+6, r25	; 0x06
    2e08:	8d 83       	std	Y+5, r24	; 0x05
    2e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0e:	9a 83       	std	Y+2, r25	; 0x02
    2e10:	89 83       	std	Y+1, r24	; 0x01
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	9a 81       	ldd	r25, Y+2	; 0x02
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <LCD_enuClear+0xfa>
    2e1a:	9a 83       	std	Y+2, r25	; 0x02
    2e1c:	89 83       	std	Y+1, r24	; 0x01

	/* Wait */
	_delay_ms(2);

	return Local_enuErrorState;
    2e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2e20:	2f 96       	adiw	r28, 0x0f	; 15
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <LCD_enuWriteData+0x6>
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	89 83       	std	Y+1, r24	; 0x01

	/* Set RS to one for writing data */
	DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH_LEVEL);
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	61 e0       	ldi	r22, 0x01	; 1
    2e46:	41 e0       	ldi	r20, 0x01	; 1
    2e48:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>

	/* Set RW to zero for writing */
	DIO_enuSetPinValue(LCD_RW_GRP,LCD_RW_PIN,DIO_LOW_LEVEL);
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	62 e0       	ldi	r22, 0x02	; 2
    2e50:	40 e0       	ldi	r20, 0x00	; 0
    2e52:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enuSetPinValue>
	SendEnablePulse();

#elif LCD_MODE == LCD_FOUR_BIT

	/* Write higher data to data pins */
	SendHalfDataPort(Copy_u8Data >> 4);
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	82 95       	swap	r24
    2e5a:	8f 70       	andi	r24, 0x0F	; 15
    2e5c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
    2e60:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <SendEnablePulse>

	/* Write lower data to data pins */
	SendHalfDataPort(Copy_u8Data);
    2e64:	8a 81       	ldd	r24, Y+2	; 0x02
    2e66:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
    2e6a:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <SendEnablePulse>

#endif

	return Local_enuErrorState;
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char* Copy_pchString)
{
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <LCD_enuWriteString+0x6>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <LCD_enuWriteString+0x8>
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2e8a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter = 0;
    2e8c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pchString != NULL )
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	9c 81       	ldd	r25, Y+4	; 0x04
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	e9 f0       	breq	.+58     	; 0x2ed0 <LCD_enuWriteString+0x56>
    2e96:	0e c0       	rjmp	.+28     	; 0x2eb4 <LCD_enuWriteString+0x3a>
	{
		while(Copy_pchString[Local_u8Counter] != '\0')
		{
			LCD_enuWriteData(Copy_pchString[Local_u8Counter]);
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	e2 0f       	add	r30, r18
    2ea6:	f3 1f       	adc	r31, r19
    2ea8:	80 81       	ld	r24, Z
    2eaa:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_enuWriteData>
			Local_u8Counter++;
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	89 83       	std	Y+1, r24	; 0x01
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter = 0;

	if(Copy_pchString != NULL )
	{
		while(Copy_pchString[Local_u8Counter] != '\0')
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	e2 0f       	add	r30, r18
    2ec2:	f3 1f       	adc	r31, r19
    2ec4:	80 81       	ld	r24, Z
    2ec6:	88 23       	and	r24, r24
    2ec8:	39 f7       	brne	.-50     	; 0x2e98 <LCD_enuWriteString+0x1e>
		{
			LCD_enuWriteData(Copy_pchString[Local_u8Counter]);
			Local_u8Counter++;
		}
		Local_enuErrorState = ES_OK;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	8a 83       	std	Y+2, r24	; 0x02
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <LCD_enuWriteString+0x5a>
	}
	else
	{
		Local_enuErrorState = NULL_POINTER;
    2ed0:	83 e0       	ldi	r24, 0x03	; 3
    2ed2:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <LCD_enuWriteIntegerNumber>:

ES_t LCD_enuWriteIntegerNumber(s32 Copy_s32IntegerNumber)
{
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	2a 97       	sbiw	r28, 0x0a	; 10
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	6f 83       	std	Y+7, r22	; 0x07
    2f02:	78 87       	std	Y+8, r23	; 0x08
    2f04:	89 87       	std	Y+9, r24	; 0x09
    2f06:	9a 87       	std	Y+10, r25	; 0x0a
	ES_t Local_enuErrorState = ES_OK;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32OppositedNumber = 0;
    2f0c:	1a 82       	std	Y+2, r1	; 0x02
    2f0e:	1b 82       	std	Y+3, r1	; 0x03
    2f10:	1c 82       	std	Y+4, r1	; 0x04
    2f12:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8CurrentDigit = 0;
    2f14:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32IntegerNumber < 0)
    2f16:	8f 81       	ldd	r24, Y+7	; 0x07
    2f18:	98 85       	ldd	r25, Y+8	; 0x08
    2f1a:	a9 85       	ldd	r26, Y+9	; 0x09
    2f1c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f1e:	bb 23       	and	r27, r27
    2f20:	0c f0       	brlt	.+2      	; 0x2f24 <LCD_enuWriteIntegerNumber+0x40>
    2f22:	49 c0       	rjmp	.+146    	; 0x2fb6 <LCD_enuWriteIntegerNumber+0xd2>
	{
		LCD_enuWriteData('-');
    2f24:	8d e2       	ldi	r24, 0x2D	; 45
    2f26:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_enuWriteData>
		Copy_s32IntegerNumber *= -1;
    2f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f2c:	98 85       	ldd	r25, Y+8	; 0x08
    2f2e:	a9 85       	ldd	r26, Y+9	; 0x09
    2f30:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f32:	b0 95       	com	r27
    2f34:	a0 95       	com	r26
    2f36:	90 95       	com	r25
    2f38:	81 95       	neg	r24
    2f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3c:	af 4f       	sbci	r26, 0xFF	; 255
    2f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f40:	8f 83       	std	Y+7, r24	; 0x07
    2f42:	98 87       	std	Y+8, r25	; 0x08
    2f44:	a9 87       	std	Y+9, r26	; 0x09
    2f46:	ba 87       	std	Y+10, r27	; 0x0a
    2f48:	36 c0       	rjmp	.+108    	; 0x2fb6 <LCD_enuWriteIntegerNumber+0xd2>
	}

	while(Copy_s32IntegerNumber != 0)
	{
		Local_u32OppositedNumber = Local_u32OppositedNumber * 10 +  Copy_s32IntegerNumber % 10 ;
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4e:	ac 81       	ldd	r26, Y+4	; 0x04
    2f50:	bd 81       	ldd	r27, Y+5	; 0x05
    2f52:	2a e0       	ldi	r18, 0x0A	; 10
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e0       	ldi	r20, 0x00	; 0
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	0e 94 80 1b 	call	0x3700	; 0x3700 <__mulsi3>
    2f62:	7b 01       	movw	r14, r22
    2f64:	8c 01       	movw	r16, r24
    2f66:	8f 81       	ldd	r24, Y+7	; 0x07
    2f68:	98 85       	ldd	r25, Y+8	; 0x08
    2f6a:	a9 85       	ldd	r26, Y+9	; 0x09
    2f6c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f6e:	2a e0       	ldi	r18, 0x0A	; 10
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__divmodsi4>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	8e 0d       	add	r24, r14
    2f84:	9f 1d       	adc	r25, r15
    2f86:	a0 1f       	adc	r26, r16
    2f88:	b1 1f       	adc	r27, r17
    2f8a:	8a 83       	std	Y+2, r24	; 0x02
    2f8c:	9b 83       	std	Y+3, r25	; 0x03
    2f8e:	ac 83       	std	Y+4, r26	; 0x04
    2f90:	bd 83       	std	Y+5, r27	; 0x05
		Copy_s32IntegerNumber /= 10;
    2f92:	8f 81       	ldd	r24, Y+7	; 0x07
    2f94:	98 85       	ldd	r25, Y+8	; 0x08
    2f96:	a9 85       	ldd	r26, Y+9	; 0x09
    2f98:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f9a:	2a e0       	ldi	r18, 0x0A	; 10
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e0       	ldi	r20, 0x00	; 0
    2fa0:	50 e0       	ldi	r21, 0x00	; 0
    2fa2:	bc 01       	movw	r22, r24
    2fa4:	cd 01       	movw	r24, r26
    2fa6:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__divmodsi4>
    2faa:	da 01       	movw	r26, r20
    2fac:	c9 01       	movw	r24, r18
    2fae:	8f 83       	std	Y+7, r24	; 0x07
    2fb0:	98 87       	std	Y+8, r25	; 0x08
    2fb2:	a9 87       	std	Y+9, r26	; 0x09
    2fb4:	ba 87       	std	Y+10, r27	; 0x0a
	{
		LCD_enuWriteData('-');
		Copy_s32IntegerNumber *= -1;
	}

	while(Copy_s32IntegerNumber != 0)
    2fb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fb8:	98 85       	ldd	r25, Y+8	; 0x08
    2fba:	a9 85       	ldd	r26, Y+9	; 0x09
    2fbc:	ba 85       	ldd	r27, Y+10	; 0x0a
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	a1 05       	cpc	r26, r1
    2fc2:	b1 05       	cpc	r27, r1
    2fc4:	11 f6       	brne	.-124    	; 0x2f4a <LCD_enuWriteIntegerNumber+0x66>
		Copy_s32IntegerNumber /= 10;
	}

	do
	{
		Local_u8CurrentDigit = Local_u32OppositedNumber % 10;
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	ac 81       	ldd	r26, Y+4	; 0x04
    2fcc:	bd 81       	ldd	r27, Y+5	; 0x05
    2fce:	2a e0       	ldi	r18, 0x0A	; 10
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 9f 1b 	call	0x373e	; 0x373e <__udivmodsi4>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteData(Local_u8CurrentDigit + 48);
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	80 5d       	subi	r24, 0xD0	; 208
    2fe8:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_enuWriteData>
		Local_u32OppositedNumber /= 10;
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff0:	ac 81       	ldd	r26, Y+4	; 0x04
    2ff2:	bd 81       	ldd	r27, Y+5	; 0x05
    2ff4:	2a e0       	ldi	r18, 0x0A	; 10
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	cd 01       	movw	r24, r26
    3000:	0e 94 9f 1b 	call	0x373e	; 0x373e <__udivmodsi4>
    3004:	da 01       	movw	r26, r20
    3006:	c9 01       	movw	r24, r18
    3008:	8a 83       	std	Y+2, r24	; 0x02
    300a:	9b 83       	std	Y+3, r25	; 0x03
    300c:	ac 83       	std	Y+4, r26	; 0x04
    300e:	bd 83       	std	Y+5, r27	; 0x05
	}while(Local_u32OppositedNumber != 0);
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	9b 81       	ldd	r25, Y+3	; 0x03
    3014:	ac 81       	ldd	r26, Y+4	; 0x04
    3016:	bd 81       	ldd	r27, Y+5	; 0x05
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	a1 05       	cpc	r26, r1
    301c:	b1 05       	cpc	r27, r1
    301e:	99 f6       	brne	.-90     	; 0x2fc6 <LCD_enuWriteIntegerNumber+0xe2>


	return Local_enuErrorState;
    3020:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3022:	2a 96       	adiw	r28, 0x0a	; 10
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	1f 91       	pop	r17
    3034:	0f 91       	pop	r16
    3036:	ff 90       	pop	r15
    3038:	ef 90       	pop	r14
    303a:	08 95       	ret

0000303c <LCD_enuWriteFloatNumber>:

ES_t LCD_enuWriteFloatNumber(f64 Copy_f64FloatNumber)
{
    303c:	af 92       	push	r10
    303e:	bf 92       	push	r11
    3040:	cf 92       	push	r12
    3042:	df 92       	push	r13
    3044:	ef 92       	push	r14
    3046:	ff 92       	push	r15
    3048:	0f 93       	push	r16
    304a:	1f 93       	push	r17
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	2e 97       	sbiw	r28, 0x0e	; 14
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	6b 87       	std	Y+11, r22	; 0x0b
    3062:	7c 87       	std	Y+12, r23	; 0x0c
    3064:	8d 87       	std	Y+13, r24	; 0x0d
    3066:	9e 87       	std	Y+14, r25	; 0x0e
	ES_t Local_enuErrorState = ES_OK;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	8a 87       	std	Y+10, r24	; 0x0a
	u64 Local_u64IntegerNumber = 0;
    306c:	1a 82       	std	Y+2, r1	; 0x02
    306e:	1b 82       	std	Y+3, r1	; 0x03
    3070:	1c 82       	std	Y+4, r1	; 0x04
    3072:	1d 82       	std	Y+5, r1	; 0x05
    3074:	1e 82       	std	Y+6, r1	; 0x06
    3076:	1f 82       	std	Y+7, r1	; 0x07
    3078:	18 86       	std	Y+8, r1	; 0x08
    307a:	19 86       	std	Y+9, r1	; 0x09
	u8 Local_u8Decimal = 0;
    307c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_f64FloatNumber < 0)
    307e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3080:	7c 85       	ldd	r23, Y+12	; 0x0c
    3082:	8d 85       	ldd	r24, Y+13	; 0x0d
    3084:	9e 85       	ldd	r25, Y+14	; 0x0e
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	50 e0       	ldi	r21, 0x00	; 0
    308e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ltsf2>
    3092:	88 23       	and	r24, r24
    3094:	64 f4       	brge	.+24     	; 0x30ae <LCD_enuWriteFloatNumber+0x72>
	{
		LCD_enuWriteData('-');
    3096:	8d e2       	ldi	r24, 0x2D	; 45
    3098:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_enuWriteData>
		Copy_f64FloatNumber *= -1;
    309c:	8b 85       	ldd	r24, Y+11	; 0x0b
    309e:	9c 85       	ldd	r25, Y+12	; 0x0c
    30a0:	ad 85       	ldd	r26, Y+13	; 0x0d
    30a2:	be 85       	ldd	r27, Y+14	; 0x0e
    30a4:	b0 58       	subi	r27, 0x80	; 128
    30a6:	8b 87       	std	Y+11, r24	; 0x0b
    30a8:	9c 87       	std	Y+12, r25	; 0x0c
    30aa:	ad 87       	std	Y+13, r26	; 0x0d
    30ac:	be 87       	std	Y+14, r27	; 0x0e
	}

	Local_u64IntegerNumber = Copy_f64FloatNumber;
    30ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b6:	0e 94 6d 00 	call	0xda	; 0xda <__fixunssfdi>
    30ba:	a2 2e       	mov	r10, r18
    30bc:	b3 2e       	mov	r11, r19
    30be:	c4 2e       	mov	r12, r20
    30c0:	d5 2e       	mov	r13, r21
    30c2:	e6 2e       	mov	r14, r22
    30c4:	f7 2e       	mov	r15, r23
    30c6:	08 2f       	mov	r16, r24
    30c8:	19 2f       	mov	r17, r25
    30ca:	aa 82       	std	Y+2, r10	; 0x02
    30cc:	bb 82       	std	Y+3, r11	; 0x03
    30ce:	cc 82       	std	Y+4, r12	; 0x04
    30d0:	dd 82       	std	Y+5, r13	; 0x05
    30d2:	ee 82       	std	Y+6, r14	; 0x06
    30d4:	ff 82       	std	Y+7, r15	; 0x07
    30d6:	08 87       	std	Y+8, r16	; 0x08
    30d8:	19 87       	std	Y+9, r17	; 0x09
	Local_u8Decimal = (Copy_f64FloatNumber - (f64)Local_u64IntegerNumber) * 100;
    30da:	2a 81       	ldd	r18, Y+2	; 0x02
    30dc:	3b 81       	ldd	r19, Y+3	; 0x03
    30de:	4c 81       	ldd	r20, Y+4	; 0x04
    30e0:	5d 81       	ldd	r21, Y+5	; 0x05
    30e2:	6e 81       	ldd	r22, Y+6	; 0x06
    30e4:	7f 81       	ldd	r23, Y+7	; 0x07
    30e6:	88 85       	ldd	r24, Y+8	; 0x08
    30e8:	99 85       	ldd	r25, Y+9	; 0x09
    30ea:	0e 94 15 01 	call	0x22a	; 0x22a <__floatundisf>
    30ee:	9b 01       	movw	r18, r22
    30f0:	ac 01       	movw	r20, r24
    30f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fa:	0e 94 3d 03 	call	0x67a	; 0x67a <__subsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	48 ec       	ldi	r20, 0xC8	; 200
    310c:	52 e4       	ldi	r21, 0x42	; 66
    310e:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	bc 01       	movw	r22, r24
    3118:	cd 01       	movw	r24, r26
    311a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	89 83       	std	Y+1, r24	; 0x01

	LCD_enuWriteIntegerNumber(Local_u64IntegerNumber);
    3124:	8a 81       	ldd	r24, Y+2	; 0x02
    3126:	9b 81       	ldd	r25, Y+3	; 0x03
    3128:	ac 81       	ldd	r26, Y+4	; 0x04
    312a:	bd 81       	ldd	r27, Y+5	; 0x05
    312c:	bc 01       	movw	r22, r24
    312e:	cd 01       	movw	r24, r26
    3130:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <LCD_enuWriteIntegerNumber>
	LCD_enuWriteData('.');
    3134:	8e e2       	ldi	r24, 0x2E	; 46
    3136:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_enuWriteData>
	LCD_enuWriteIntegerNumber(Local_u8Decimal);
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	88 2f       	mov	r24, r24
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	a0 e0       	ldi	r26, 0x00	; 0
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <LCD_enuWriteIntegerNumber>

	return Local_enuErrorState;
    314c:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    314e:	2e 96       	adiw	r28, 0x0e	; 14
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	f8 94       	cli
    3154:	de bf       	out	0x3e, r29	; 62
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	cd bf       	out	0x3d, r28	; 61
    315a:	cf 91       	pop	r28
    315c:	df 91       	pop	r29
    315e:	1f 91       	pop	r17
    3160:	0f 91       	pop	r16
    3162:	ff 90       	pop	r15
    3164:	ef 90       	pop	r14
    3166:	df 90       	pop	r13
    3168:	cf 90       	pop	r12
    316a:	bf 90       	pop	r11
    316c:	af 90       	pop	r10
    316e:	08 95       	ret

00003170 <LCD_enuReturnHome>:

ES_t LCD_enuReturnHome()
{
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	0f 92       	push	r0
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	89 83       	std	Y+1, r24	; 0x01

	LCD_enuWriteCommand(0b00000010);
    317e:	82 e0       	ldi	r24, 0x02	; 2
    3180:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_enuWriteCommand>

	return Local_enuErrorState;
    3184:	89 81       	ldd	r24, Y+1	; 0x01
}
    3186:	0f 90       	pop	r0
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <LCD_enuGoToXYPosition>:

ES_t LCD_enuGoToXYPosition(u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	00 d0       	rcall	.+0      	; 0x3194 <LCD_enuGoToXYPosition+0x6>
    3194:	00 d0       	rcall	.+0      	; 0x3196 <LCD_enuGoToXYPosition+0x8>
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	8b 83       	std	Y+3, r24	; 0x03
    319c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    319e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8DDRAMAddress;

	if( Copy_u8YPosition == 0 || Copy_u8YPosition == 1)
    31a0:	8c 81       	ldd	r24, Y+4	; 0x04
    31a2:	88 23       	and	r24, r24
    31a4:	19 f0       	breq	.+6      	; 0x31ac <LCD_enuGoToXYPosition+0x1e>
    31a6:	8c 81       	ldd	r24, Y+4	; 0x04
    31a8:	81 30       	cpi	r24, 0x01	; 1
    31aa:	c9 f4       	brne	.+50     	; 0x31de <LCD_enuGoToXYPosition+0x50>
	{

		Local_u8DDRAMAddress = Copy_u8XPosition + Copy_u8YPosition * 0x40 ;
    31ac:	8c 81       	ldd	r24, Y+4	; 0x04
    31ae:	88 2f       	mov	r24, r24
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	00 24       	eor	r0, r0
    31b4:	96 95       	lsr	r25
    31b6:	87 95       	ror	r24
    31b8:	07 94       	ror	r0
    31ba:	96 95       	lsr	r25
    31bc:	87 95       	ror	r24
    31be:	07 94       	ror	r0
    31c0:	98 2f       	mov	r25, r24
    31c2:	80 2d       	mov	r24, r0
    31c4:	98 2f       	mov	r25, r24
    31c6:	8b 81       	ldd	r24, Y+3	; 0x03
    31c8:	89 0f       	add	r24, r25
    31ca:	89 83       	std	Y+1, r24	; 0x01
		Local_u8DDRAMAddress = Local_u8DDRAMAddress | (LCD_BIT_MASK << 7 );
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	80 68       	ori	r24, 0x80	; 128
    31d0:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteCommand(Local_u8DDRAMAddress);
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_enuWriteCommand>


		Local_enuErrorState = ES_OK;
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	8a 83       	std	Y+2, r24	; 0x02
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <LCD_enuGoToXYPosition+0x54>
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
    31de:	82 e0       	ldi	r24, 0x02	; 2
    31e0:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    31e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	cf 91       	pop	r28
    31ee:	df 91       	pop	r29
    31f0:	08 95       	ret

000031f2 <LCD_enuWriteSpecialCharacter>:

ES_t LCD_enuWriteSpecialCharacter(u8 Copy_Au8LetterArray[] ,u8 Copy_u8BlockNumber,u8 Copy_u8XPosition ,u8 Copy_u8YPosition)
{
    31f2:	df 93       	push	r29
    31f4:	cf 93       	push	r28
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	28 97       	sbiw	r28, 0x08	; 8
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	9d 83       	std	Y+5, r25	; 0x05
    3208:	8c 83       	std	Y+4, r24	; 0x04
    320a:	6e 83       	std	Y+6, r22	; 0x06
    320c:	4f 83       	std	Y+7, r20	; 0x07
    320e:	28 87       	std	Y+8, r18	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    3210:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8CGRAMAddress;
	u8 Local_u8Iterator;

	/* Calculate the starting address in CGRAM */
	Local_u8CGRAMAddress = Copy_u8BlockNumber * LCD_u8BLOCKBYTES ;
    3212:	8e 81       	ldd	r24, Y+6	; 0x06
    3214:	88 2f       	mov	r24, r24
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	88 0f       	add	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8CGRAMAddress = Local_u8CGRAMAddress | (LCD_BIT_MASK << 6 );
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	80 64       	ori	r24, 0x40	; 64
    322a:	8a 83       	std	Y+2, r24	; 0x02
	//Local_u8CGRAMAddress = Local_u8CGRAMAddress & (~(LCD_BIT_MASK << 7 ));

	/* Set CGRAM address command */
	LCD_enuWriteCommand(Local_u8CGRAMAddress);
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_enuWriteCommand>

	/* Draw the pattern inside CGRAM */
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
    3232:	19 82       	std	Y+1, r1	; 0x01
    3234:	0e c0       	rjmp	.+28     	; 0x3252 <LCD_enuWriteSpecialCharacter+0x60>
	{
		LCD_enuWriteData(Copy_Au8LetterArray[Local_u8Iterator] );
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	8c 81       	ldd	r24, Y+4	; 0x04
    323e:	9d 81       	ldd	r25, Y+5	; 0x05
    3240:	fc 01       	movw	r30, r24
    3242:	e2 0f       	add	r30, r18
    3244:	f3 1f       	adc	r31, r19
    3246:	80 81       	ld	r24, Z
    3248:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_enuWriteData>

	/* Set CGRAM address command */
	LCD_enuWriteCommand(Local_u8CGRAMAddress);

	/* Draw the pattern inside CGRAM */
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	8f 5f       	subi	r24, 0xFF	; 255
    3250:	89 83       	std	Y+1, r24	; 0x01
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	88 30       	cpi	r24, 0x08	; 8
    3256:	78 f3       	brcs	.-34     	; 0x3236 <LCD_enuWriteSpecialCharacter+0x44>
	{
		LCD_enuWriteData(Copy_Au8LetterArray[Local_u8Iterator] );
	}

	/* Go back to DDRAM to display the pattern */
	LCD_enuGoToXYPosition(Copy_u8XPosition,Copy_u8YPosition);
    3258:	8f 81       	ldd	r24, Y+7	; 0x07
    325a:	68 85       	ldd	r22, Y+8	; 0x08
    325c:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_enuGoToXYPosition>

	/* Display the drawn pattern */
	LCD_enuWriteData(Copy_u8BlockNumber);
    3260:	8e 81       	ldd	r24, Y+6	; 0x06
    3262:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_enuWriteData>

	return Local_enuErrorState;
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3268:	28 96       	adiw	r28, 0x08	; 8
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <LCD_enuDeleteCharacter>:

ES_t LCD_enuDeleteCharacter(u8 Copy_u8ShiftedNumber)
{
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	00 d0       	rcall	.+0      	; 0x3280 <LCD_enuDeleteCharacter+0x6>
    3280:	0f 92       	push	r0
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_OK;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8ShiftedNumber ; Local_u8Iterator ++)
    328c:	19 82       	std	Y+1, r1	; 0x01
    328e:	06 c0       	rjmp	.+12     	; 0x329c <LCD_enuDeleteCharacter+0x22>
	{
		LCD_enuWriteCommand(0x10);
    3290:	80 e1       	ldi	r24, 0x10	; 16
    3292:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_enuWriteCommand>

ES_t LCD_enuDeleteCharacter(u8 Copy_u8ShiftedNumber)
{
	ES_t Local_enuErrorState = ES_OK;

	for(u8 Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8ShiftedNumber ; Local_u8Iterator ++)
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	8f 5f       	subi	r24, 0xFF	; 255
    329a:	89 83       	std	Y+1, r24	; 0x01
    329c:	99 81       	ldd	r25, Y+1	; 0x01
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	98 17       	cp	r25, r24
    32a2:	b0 f3       	brcs	.-20     	; 0x3290 <LCD_enuDeleteCharacter+0x16>
	{
		LCD_enuWriteCommand(0x10);
	}
	LCD_enuWriteData(' ');
    32a4:	80 e2       	ldi	r24, 0x20	; 32
    32a6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_enuWriteData>
	LCD_enuWriteCommand(0x10);
    32aa:	80 e1       	ldi	r24, 0x10	; 16
    32ac:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_enuWriteCommand>

	return Local_enuErrorState;
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32b2:	0f 90       	pop	r0
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <TWI_voidInitMaster>:
#include "TWI_register.h"
#include "TWI_private.h"


void TWI_voidInitMaster(u8 Copy_u8Address)  /* Set Master address to 0 if master will not be addressed */
{
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	0f 92       	push	r0
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	89 83       	std	Y+1, r24	; 0x01
	/* Set SCL frequency to 400 kbps with 16MHz system frequency */
	/* 1- set TWBR to 12  */
	TWBR=12;
    32ca:	e0 e2       	ldi	r30, 0x20	; 32
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	8c e0       	ldi	r24, 0x0C	; 12
    32d0:	80 83       	st	Z, r24

	/* 2- clear the prescaler bits(TWPS)*/
	CLR_BIT(TWSR,TWSR_TWPS0);
    32d2:	a1 e2       	ldi	r26, 0x21	; 33
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e1 e2       	ldi	r30, 0x21	; 33
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	8e 7f       	andi	r24, 0xFE	; 254
    32de:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    32e0:	a1 e2       	ldi	r26, 0x21	; 33
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	e1 e2       	ldi	r30, 0x21	; 33
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	8d 7f       	andi	r24, 0xFD	; 253
    32ec:	8c 93       	st	X, r24

	/* check if the master will not be addressed */
	if(Copy_u8Address != 0)
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	88 23       	and	r24, r24
    32f2:	29 f0       	breq	.+10     	; 0x32fe <TWI_voidInitMaster+0x40>
	{
		TWAR = Copy_u8Address << 1;
    32f4:	e2 e2       	ldi	r30, 0x22	; 34
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	88 0f       	add	r24, r24
    32fc:	80 83       	st	Z, r24
	{
		/* Do Nothing */
	}

	/* Enable Acknowledge bit */
	SET_BIT(TWCR,TWCR_TWEA);
    32fe:	a6 e5       	ldi	r26, 0x56	; 86
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	e6 e5       	ldi	r30, 0x56	; 86
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	80 64       	ori	r24, 0x40	; 64
    330a:	8c 93       	st	X, r24

	/* Enable TWI */
	SET_BIT(TWCR,TWCR_TWEN);
    330c:	a6 e5       	ldi	r26, 0x56	; 86
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	e6 e5       	ldi	r30, 0x56	; 86
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	84 60       	ori	r24, 0x04	; 4
    3318:	8c 93       	st	X, r24
}
    331a:	0f 90       	pop	r0
    331c:	cf 91       	pop	r28
    331e:	df 91       	pop	r29
    3320:	08 95       	ret

00003322 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    3322:	df 93       	push	r29
    3324:	cf 93       	push	r28
    3326:	0f 92       	push	r0
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	89 83       	std	Y+1, r24	; 0x01
	/* Set Slave Address  */
	TWAR = Copy_u8Address << 1;
    332e:	e2 e2       	ldi	r30, 0x22	; 34
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	88 0f       	add	r24, r24
    3336:	80 83       	st	Z, r24

	/* Enable Acknowledge bit */
	SET_BIT(TWCR,TWCR_TWEA);
    3338:	a6 e5       	ldi	r26, 0x56	; 86
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e6 e5       	ldi	r30, 0x56	; 86
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	80 64       	ori	r24, 0x40	; 64
    3344:	8c 93       	st	X, r24

	/* Enable TWI */
	SET_BIT(TWCR,TWCR_TWEN);
    3346:	a6 e5       	ldi	r26, 0x56	; 86
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e6 e5       	ldi	r30, 0x56	; 86
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	84 60       	ori	r24, 0x04	; 4
    3352:	8c 93       	st	X, r24
}
    3354:	0f 90       	pop	r0
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	08 95       	ret

0000335c <TWI_enuSendStartCondition>:

TWI_ErrorStatus TWI_enuSendStartCondition(void)
{
    335c:	df 93       	push	r29
    335e:	cf 93       	push	r28
    3360:	0f 92       	push	r0
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus Local_enuErrorState = NoError;
    3366:	19 82       	std	Y+1, r1	; 0x01

	/* Set start condition bit */
	SET_BIT(TWCR,TWCR_TWSTA);
    3368:	a6 e5       	ldi	r26, 0x56	; 86
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e6 e5       	ldi	r30, 0x56	; 86
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	80 62       	ori	r24, 0x20	; 32
    3374:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    3376:	a6 e5       	ldi	r26, 0x56	; 86
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	e6 e5       	ldi	r30, 0x56	; 86
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	80 68       	ori	r24, 0x80	; 128
    3382:	8c 93       	st	X, r24


	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    3384:	e6 e5       	ldi	r30, 0x56	; 86
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	88 23       	and	r24, r24
    338c:	dc f7       	brge	.-10     	; 0x3384 <TWI_enuSendStartCondition+0x28>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != START_ACK )
    338e:	e1 e2       	ldi	r30, 0x21	; 33
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	80 81       	ld	r24, Z
    3394:	88 2f       	mov	r24, r24
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	88 7f       	andi	r24, 0xF8	; 248
    339a:	90 70       	andi	r25, 0x00	; 0
    339c:	88 30       	cpi	r24, 0x08	; 8
    339e:	91 05       	cpc	r25, r1
    33a0:	11 f0       	breq	.+4      	; 0x33a6 <TWI_enuSendStartCondition+0x4a>
	{
		Local_enuErrorState = StartConditionError ;
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Do Nothing */
	}


	return Local_enuErrorState;
    33a6:	89 81       	ldd	r24, Y+1	; 0x01

}
    33a8:	0f 90       	pop	r0
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	08 95       	ret

000033b0 <TWI_enuSendRepeatedStart>:

TWI_ErrorStatus TWI_enuSendRepeatedStart(void)
{
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	0f 92       	push	r0
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus Local_enuErrorState = NoError;
    33ba:	19 82       	std	Y+1, r1	; 0x01

	/* Set start condition bit */
	SET_BIT(TWCR,TWCR_TWSTA);
    33bc:	a6 e5       	ldi	r26, 0x56	; 86
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	e6 e5       	ldi	r30, 0x56	; 86
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	80 62       	ori	r24, 0x20	; 32
    33c8:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    33ca:	a6 e5       	ldi	r26, 0x56	; 86
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	e6 e5       	ldi	r30, 0x56	; 86
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	80 81       	ld	r24, Z
    33d4:	80 68       	ori	r24, 0x80	; 128
    33d6:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    33d8:	e6 e5       	ldi	r30, 0x56	; 86
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	80 81       	ld	r24, Z
    33de:	88 23       	and	r24, r24
    33e0:	dc f7       	brge	.-10     	; 0x33d8 <TWI_enuSendRepeatedStart+0x28>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != REP_START_ACK )
    33e2:	e1 e2       	ldi	r30, 0x21	; 33
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	88 2f       	mov	r24, r24
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	88 7f       	andi	r24, 0xF8	; 248
    33ee:	90 70       	andi	r25, 0x00	; 0
    33f0:	80 31       	cpi	r24, 0x10	; 16
    33f2:	91 05       	cpc	r25, r1
    33f4:	11 f0       	breq	.+4      	; 0x33fa <TWI_enuSendRepeatedStart+0x4a>
	{
		Local_enuErrorState = RepeatedStartError ;
    33f6:	82 e0       	ldi	r24, 0x02	; 2
    33f8:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_enuErrorState;
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    33fc:	0f 90       	pop	r0
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <TWI_enuSendSlaveAddressWithWrite>:

TWI_ErrorStatus TWI_enuSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	00 d0       	rcall	.+0      	; 0x340a <TWI_enuSendSlaveAddressWithWrite+0x6>
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
    340e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_enuErrorState = NoError;
    3410:	19 82       	std	Y+1, r1	; 0x01

	/* Send the 7bit Slave address on the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    3412:	e3 e2       	ldi	r30, 0x23	; 35
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	88 0f       	add	r24, r24
    341a:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
    341c:	a3 e2       	ldi	r26, 0x23	; 35
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e3 e2       	ldi	r30, 0x23	; 35
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	8e 7f       	andi	r24, 0xFE	; 254
    3428:	8c 93       	st	X, r24

	/*Clear the start condition bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
    342a:	a6 e5       	ldi	r26, 0x56	; 86
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	e6 e5       	ldi	r30, 0x56	; 86
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	8f 7d       	andi	r24, 0xDF	; 223
    3436:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    3438:	a6 e5       	ldi	r26, 0x56	; 86
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	e6 e5       	ldi	r30, 0x56	; 86
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	80 68       	ori	r24, 0x80	; 128
    3444:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    3446:	e6 e5       	ldi	r30, 0x56	; 86
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	88 23       	and	r24, r24
    344e:	dc f7       	brge	.-10     	; 0x3446 <TWI_enuSendSlaveAddressWithWrite+0x42>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
    3450:	e1 e2       	ldi	r30, 0x21	; 33
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	88 2f       	mov	r24, r24
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	88 7f       	andi	r24, 0xF8	; 248
    345c:	90 70       	andi	r25, 0x00	; 0
    345e:	88 31       	cpi	r24, 0x18	; 24
    3460:	91 05       	cpc	r25, r1
    3462:	11 f0       	breq	.+4      	; 0x3468 <TWI_enuSendSlaveAddressWithWrite+0x64>
	{
		Local_enuErrorState = SlaveAddressWithWriteError ;
    3464:	83 e0       	ldi	r24, 0x03	; 3
    3466:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_enuErrorState;
    3468:	89 81       	ldd	r24, Y+1	; 0x01
}
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <TWI_enuSendSlaveAddressWithRead>:

TWI_ErrorStatus TWI_enuSendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	00 d0       	rcall	.+0      	; 0x347a <TWI_enuSendSlaveAddressWithRead+0x6>
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_enuErrorState = NoError;
    3480:	19 82       	std	Y+1, r1	; 0x01

	/* Send the 7bit Slave address on the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    3482:	e3 e2       	ldi	r30, 0x23	; 35
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	8a 81       	ldd	r24, Y+2	; 0x02
    3488:	88 0f       	add	r24, r24
    348a:	80 83       	st	Z, r24

	/* Set bit0 for reading */
	SET_BIT(TWDR,0);
    348c:	a3 e2       	ldi	r26, 0x23	; 35
    348e:	b0 e0       	ldi	r27, 0x00	; 0
    3490:	e3 e2       	ldi	r30, 0x23	; 35
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	81 60       	ori	r24, 0x01	; 1
    3498:	8c 93       	st	X, r24

	/*Clear the start condition bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
    349a:	a6 e5       	ldi	r26, 0x56	; 86
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	e6 e5       	ldi	r30, 0x56	; 86
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	80 81       	ld	r24, Z
    34a4:	8f 7d       	andi	r24, 0xDF	; 223
    34a6:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    34a8:	a6 e5       	ldi	r26, 0x56	; 86
    34aa:	b0 e0       	ldi	r27, 0x00	; 0
    34ac:	e6 e5       	ldi	r30, 0x56	; 86
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	80 68       	ori	r24, 0x80	; 128
    34b4:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    34b6:	e6 e5       	ldi	r30, 0x56	; 86
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	88 23       	and	r24, r24
    34be:	dc f7       	brge	.-10     	; 0x34b6 <TWI_enuSendSlaveAddressWithRead+0x42>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
    34c0:	e1 e2       	ldi	r30, 0x21	; 33
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	88 2f       	mov	r24, r24
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	88 7f       	andi	r24, 0xF8	; 248
    34cc:	90 70       	andi	r25, 0x00	; 0
    34ce:	80 34       	cpi	r24, 0x40	; 64
    34d0:	91 05       	cpc	r25, r1
    34d2:	11 f0       	breq	.+4      	; 0x34d8 <TWI_enuSendSlaveAddressWithRead+0x64>
	{
		Local_enuErrorState = SlaveAddressWithReadError ;
    34d4:	84 e0       	ldi	r24, 0x04	; 4
    34d6:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_enuErrorState;
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	cf 91       	pop	r28
    34e0:	df 91       	pop	r29
    34e2:	08 95       	ret

000034e4 <TWI_enuMasterWriteDataByte>:

TWI_ErrorStatus TWI_enuMasterWriteDataByte(u8 Copy_u8DataByte)
{
    34e4:	df 93       	push	r29
    34e6:	cf 93       	push	r28
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <TWI_enuMasterWriteDataByte+0x6>
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_enuErrorState = NoError;
    34f0:	19 82       	std	Y+1, r1	; 0x01

	/* Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    34f2:	e3 e2       	ldi	r30, 0x23	; 35
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	80 83       	st	Z, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    34fa:	a6 e5       	ldi	r26, 0x56	; 86
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	e6 e5       	ldi	r30, 0x56	; 86
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	80 68       	ori	r24, 0x80	; 128
    3506:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    3508:	e6 e5       	ldi	r30, 0x56	; 86
    350a:	f0 e0       	ldi	r31, 0x00	; 0
    350c:	80 81       	ld	r24, Z
    350e:	88 23       	and	r24, r24
    3510:	dc f7       	brge	.-10     	; 0x3508 <TWI_enuMasterWriteDataByte+0x24>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != MSTR_WR_BYTE_ACK )
    3512:	e1 e2       	ldi	r30, 0x21	; 33
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	88 2f       	mov	r24, r24
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	88 7f       	andi	r24, 0xF8	; 248
    351e:	90 70       	andi	r25, 0x00	; 0
    3520:	88 32       	cpi	r24, 0x28	; 40
    3522:	91 05       	cpc	r25, r1
    3524:	11 f0       	breq	.+4      	; 0x352a <TWI_enuMasterWriteDataByte+0x46>
	{
		Local_enuErrorState = MasterWriteByteError ;
    3526:	85 e0       	ldi	r24, 0x05	; 5
    3528:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Do Nothing */
	}


	return Local_enuErrorState;
    352a:	89 81       	ldd	r24, Y+1	; 0x01
}
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	08 95       	ret

00003536 <TWI_enuMasterReadDataByte>:

TWI_ErrorStatus TWI_enuMasterReadDataByte(u8* Copy_u8DataByte)
{
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	00 d0       	rcall	.+0      	; 0x353c <TWI_enuMasterReadDataByte+0x6>
    353c:	0f 92       	push	r0
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	9b 83       	std	Y+3, r25	; 0x03
    3544:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_enuErrorState = NoError;
    3546:	19 82       	std	Y+1, r1	; 0x01

	/* Clear the interrupt flag to allow the slave to send the data */
	SET_BIT(TWCR,TWCR_TWINT);
    3548:	a6 e5       	ldi	r26, 0x56	; 86
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	e6 e5       	ldi	r30, 0x56	; 86
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	80 81       	ld	r24, Z
    3552:	80 68       	ori	r24, 0x80	; 128
    3554:	8c 93       	st	X, r24

	/* Wait until the operation finishes and the flag is raised */
	while(((TWCR >> TWCR_TWINT) & 1) == 0);
    3556:	e6 e5       	ldi	r30, 0x56	; 86
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	80 81       	ld	r24, Z
    355c:	88 23       	and	r24, r24
    355e:	dc f7       	brge	.-10     	; 0x3556 <TWI_enuMasterReadDataByte+0x20>

	/* Check the operation status*/
	if( (TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK )
    3560:	e1 e2       	ldi	r30, 0x21	; 33
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	88 2f       	mov	r24, r24
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	88 7f       	andi	r24, 0xF8	; 248
    356c:	90 70       	andi	r25, 0x00	; 0
    356e:	80 35       	cpi	r24, 0x50	; 80
    3570:	91 05       	cpc	r25, r1
    3572:	19 f0       	breq	.+6      	; 0x357a <TWI_enuMasterReadDataByte+0x44>
	{
		Local_enuErrorState = MasterReadByteError ;
    3574:	86 e0       	ldi	r24, 0x06	; 6
    3576:	89 83       	std	Y+1, r24	; 0x01
    3578:	06 c0       	rjmp	.+12     	; 0x3586 <TWI_enuMasterReadDataByte+0x50>
	}
	else
	{
		/* Read the received data*/
		*Copy_u8DataByte = TWDR;
    357a:	e3 e2       	ldi	r30, 0x23	; 35
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	ea 81       	ldd	r30, Y+2	; 0x02
    3582:	fb 81       	ldd	r31, Y+3	; 0x03
    3584:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    3586:	89 81       	ldd	r24, Y+1	; 0x01
}
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	cf 91       	pop	r28
    3590:	df 91       	pop	r29
    3592:	08 95       	ret

00003594 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
	/* Send Stop condition on the bus */
	SET_BIT(TWCR,TWCR_TWSTO);
    359c:	a6 e5       	ldi	r26, 0x56	; 86
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	e6 e5       	ldi	r30, 0x56	; 86
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	80 61       	ori	r24, 0x10	; 16
    35a8:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    35aa:	a6 e5       	ldi	r26, 0x56	; 86
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	e6 e5       	ldi	r30, 0x56	; 86
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	80 81       	ld	r24, Z
    35b4:	80 68       	ori	r24, 0x80	; 128
    35b6:	8c 93       	st	X, r24
}
    35b8:	cf 91       	pop	r28
    35ba:	df 91       	pop	r29
    35bc:	08 95       	ret

000035be <UART_enuInit>:
#include "UART_private.h"
#include "UART_register.h"
#include "UART_interface.h"

ES_t UART_enuInit(void)
{
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	00 d0       	rcall	.+0      	; 0x35c4 <UART_enuInit+0x6>
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCVal=0;
    35cc:	19 82       	std	Y+1, r1	; 0x01

	/* Set bit 7 for UCSRC*/
	SET_BIT(Local_u8UCSRCVal,UCSRC_URSEL);
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	80 68       	ori	r24, 0x80	; 128
    35d2:	89 83       	std	Y+1, r24	; 0x01

	/* Set Character Size = 8-bit */
	SET_BIT(Local_u8UCSRCVal,UCSRC_UCSZ0);
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	82 60       	ori	r24, 0x02	; 2
    35d8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCVal,UCSRC_UCSZ1);
    35da:	89 81       	ldd	r24, Y+1	; 0x01
    35dc:	84 60       	ori	r24, 0x04	; 4
    35de:	89 83       	std	Y+1, r24	; 0x01

	/* Send val to register */
	UCSRC = Local_u8UCSRCVal;
    35e0:	e0 e4       	ldi	r30, 0x40	; 64
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	80 83       	st	Z, r24

	/*Baud Rate (bps) = 9600 */
	UBRRL = 103;
    35e8:	e9 e2       	ldi	r30, 0x29	; 41
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	87 e6       	ldi	r24, 0x67	; 103
    35ee:	80 83       	st	Z, r24

	/* Enable Receive */
	SET_BIT(UCSRB,UCSRB_RXEN);
    35f0:	aa e2       	ldi	r26, 0x2A	; 42
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	ea e2       	ldi	r30, 0x2A	; 42
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	80 61       	ori	r24, 0x10	; 16
    35fc:	8c 93       	st	X, r24

	/* Enable Transmitter */
	SET_BIT(UCSRB,UCSRB_TXEN);
    35fe:	aa e2       	ldi	r26, 0x2A	; 42
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	ea e2       	ldi	r30, 0x2A	; 42
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	88 60       	ori	r24, 0x08	; 8
    360a:	8c 93       	st	X, r24

	return Local_enuErrorState;
    360c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	08 95       	ret

00003618 <UART_enuReceiveData>:

ES_t UART_enuReceiveData(u8* Copy_u8ReceivedData)
{
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	00 d0       	rcall	.+0      	; 0x361e <UART_enuReceiveData+0x6>
    361e:	0f 92       	push	r0
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
    3624:	9b 83       	std	Y+3, r25	; 0x03
    3626:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	89 83       	std	Y+1, r24	; 0x01

	while( (GET_BIT(UCSRA,UCSRA_RXC)) ==0 );//wait until receive data
    362c:	ab e2       	ldi	r26, 0x2B	; 43
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	eb e2       	ldi	r30, 0x2B	; 43
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	88 1f       	adc	r24, r24
    3638:	88 27       	eor	r24, r24
    363a:	88 1f       	adc	r24, r24
    363c:	8c 93       	st	X, r24
    363e:	8c 91       	ld	r24, X
    3640:	88 23       	and	r24, r24
    3642:	a1 f3       	breq	.-24     	; 0x362c <UART_enuReceiveData+0x14>

	*Copy_u8ReceivedData = UDR;
    3644:	ec e2       	ldi	r30, 0x2C	; 44
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	80 81       	ld	r24, Z
    364a:	ea 81       	ldd	r30, Y+2	; 0x02
    364c:	fb 81       	ldd	r31, Y+3	; 0x03
    364e:	80 83       	st	Z, r24

	return Local_enuErrorState;
    3650:	89 81       	ldd	r24, Y+1	; 0x01
}
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	cf 91       	pop	r28
    365a:	df 91       	pop	r29
    365c:	08 95       	ret

0000365e <UART_enuSendData>:

ES_t UART_enuSendData(u8 Copy_u8Data)
{
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	00 d0       	rcall	.+0      	; 0x3664 <UART_enuSendData+0x6>
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
    3668:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	89 83       	std	Y+1, r24	; 0x01

	while((GET_BIT(UCSRA,UCSRA_UDRE)) ==0); // wait until UDR is empty
    366e:	ab e2       	ldi	r26, 0x2B	; 43
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	eb e2       	ldi	r30, 0x2B	; 43
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	82 95       	swap	r24
    367a:	86 95       	lsr	r24
    367c:	87 70       	andi	r24, 0x07	; 7
    367e:	81 70       	andi	r24, 0x01	; 1
    3680:	8c 93       	st	X, r24
    3682:	8c 91       	ld	r24, X
    3684:	88 23       	and	r24, r24
    3686:	99 f3       	breq	.-26     	; 0x366e <UART_enuSendData+0x10>

	UDR = Copy_u8Data;
    3688:	ec e2       	ldi	r30, 0x2C	; 44
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	8a 81       	ldd	r24, Y+2	; 0x02
    368e:	80 83       	st	Z, r24

	return Local_enuErrorState;
    3690:	89 81       	ldd	r24, Y+1	; 0x01
}
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	08 95       	ret

0000369c <main>:
//#include "HEXA_interface.h"
//#include "UART_interface.h"
//#include "LCD_interface.h"
//
int main()
{
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	0f 92       	push	r0
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ReceivedData = 0 ;
    36a6:	19 82       	std	Y+1, r1	; 0x01

	//HEXA_enuInit();
	LCD_enuInit();
    36a8:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_enuInit>
	TWI_voidInitMaster(0);
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	0e 94 5f 19 	call	0x32be	; 0x32be <TWI_voidInitMaster>

	EEPROM_voidWriteDataByte(43,29);
    36b2:	8b e2       	ldi	r24, 0x2B	; 43
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	6d e1       	ldi	r22, 0x1D	; 29
    36b8:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <EEPROM_voidWriteDataByte>
//	Local_u8ReceivedData = EEPROM_u8ReadDataByte(43);
//	LCD_enuWriteIntegerNumber(Local_u8ReceivedData);

	EEPROM_voidWriteDataByte(45,33);
    36bc:	8d e2       	ldi	r24, 0x2D	; 45
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	61 e2       	ldi	r22, 0x21	; 33
    36c2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <EEPROM_voidWriteDataByte>
	Local_u8ReceivedData = EEPROM_u8ReadDataByte(45);
    36c6:	8d e2       	ldi	r24, 0x2D	; 45
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 94 8d 10 	call	0x211a	; 0x211a <EEPROM_u8ReadDataByte>
    36ce:	89 83       	std	Y+1, r24	; 0x01


	LCD_enuWriteIntegerNumber(Local_u8ReceivedData);
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	88 2f       	mov	r24, r24
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	a0 e0       	ldi	r26, 0x00	; 0
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	bc 01       	movw	r22, r24
    36dc:	cd 01       	movw	r24, r26
    36de:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <LCD_enuWriteIntegerNumber>


	Local_u8ReceivedData = EEPROM_u8ReadDataByte(43);
    36e2:	8b e2       	ldi	r24, 0x2B	; 43
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	0e 94 8d 10 	call	0x211a	; 0x211a <EEPROM_u8ReadDataByte>
    36ea:	89 83       	std	Y+1, r24	; 0x01

	LCD_enuWriteIntegerNumber(Local_u8ReceivedData);
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	88 2f       	mov	r24, r24
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	a0 e0       	ldi	r26, 0x00	; 0
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <LCD_enuWriteIntegerNumber>
    36fe:	ff cf       	rjmp	.-2      	; 0x36fe <main+0x62>

00003700 <__mulsi3>:
    3700:	62 9f       	mul	r22, r18
    3702:	d0 01       	movw	r26, r0
    3704:	73 9f       	mul	r23, r19
    3706:	f0 01       	movw	r30, r0
    3708:	82 9f       	mul	r24, r18
    370a:	e0 0d       	add	r30, r0
    370c:	f1 1d       	adc	r31, r1
    370e:	64 9f       	mul	r22, r20
    3710:	e0 0d       	add	r30, r0
    3712:	f1 1d       	adc	r31, r1
    3714:	92 9f       	mul	r25, r18
    3716:	f0 0d       	add	r31, r0
    3718:	83 9f       	mul	r24, r19
    371a:	f0 0d       	add	r31, r0
    371c:	74 9f       	mul	r23, r20
    371e:	f0 0d       	add	r31, r0
    3720:	65 9f       	mul	r22, r21
    3722:	f0 0d       	add	r31, r0
    3724:	99 27       	eor	r25, r25
    3726:	72 9f       	mul	r23, r18
    3728:	b0 0d       	add	r27, r0
    372a:	e1 1d       	adc	r30, r1
    372c:	f9 1f       	adc	r31, r25
    372e:	63 9f       	mul	r22, r19
    3730:	b0 0d       	add	r27, r0
    3732:	e1 1d       	adc	r30, r1
    3734:	f9 1f       	adc	r31, r25
    3736:	bd 01       	movw	r22, r26
    3738:	cf 01       	movw	r24, r30
    373a:	11 24       	eor	r1, r1
    373c:	08 95       	ret

0000373e <__udivmodsi4>:
    373e:	a1 e2       	ldi	r26, 0x21	; 33
    3740:	1a 2e       	mov	r1, r26
    3742:	aa 1b       	sub	r26, r26
    3744:	bb 1b       	sub	r27, r27
    3746:	fd 01       	movw	r30, r26
    3748:	0d c0       	rjmp	.+26     	; 0x3764 <__udivmodsi4_ep>

0000374a <__udivmodsi4_loop>:
    374a:	aa 1f       	adc	r26, r26
    374c:	bb 1f       	adc	r27, r27
    374e:	ee 1f       	adc	r30, r30
    3750:	ff 1f       	adc	r31, r31
    3752:	a2 17       	cp	r26, r18
    3754:	b3 07       	cpc	r27, r19
    3756:	e4 07       	cpc	r30, r20
    3758:	f5 07       	cpc	r31, r21
    375a:	20 f0       	brcs	.+8      	; 0x3764 <__udivmodsi4_ep>
    375c:	a2 1b       	sub	r26, r18
    375e:	b3 0b       	sbc	r27, r19
    3760:	e4 0b       	sbc	r30, r20
    3762:	f5 0b       	sbc	r31, r21

00003764 <__udivmodsi4_ep>:
    3764:	66 1f       	adc	r22, r22
    3766:	77 1f       	adc	r23, r23
    3768:	88 1f       	adc	r24, r24
    376a:	99 1f       	adc	r25, r25
    376c:	1a 94       	dec	r1
    376e:	69 f7       	brne	.-38     	; 0x374a <__udivmodsi4_loop>
    3770:	60 95       	com	r22
    3772:	70 95       	com	r23
    3774:	80 95       	com	r24
    3776:	90 95       	com	r25
    3778:	9b 01       	movw	r18, r22
    377a:	ac 01       	movw	r20, r24
    377c:	bd 01       	movw	r22, r26
    377e:	cf 01       	movw	r24, r30
    3780:	08 95       	ret

00003782 <__divmodsi4>:
    3782:	97 fb       	bst	r25, 7
    3784:	09 2e       	mov	r0, r25
    3786:	05 26       	eor	r0, r21
    3788:	0e d0       	rcall	.+28     	; 0x37a6 <__divmodsi4_neg1>
    378a:	57 fd       	sbrc	r21, 7
    378c:	04 d0       	rcall	.+8      	; 0x3796 <__divmodsi4_neg2>
    378e:	d7 df       	rcall	.-82     	; 0x373e <__udivmodsi4>
    3790:	0a d0       	rcall	.+20     	; 0x37a6 <__divmodsi4_neg1>
    3792:	00 1c       	adc	r0, r0
    3794:	38 f4       	brcc	.+14     	; 0x37a4 <__divmodsi4_exit>

00003796 <__divmodsi4_neg2>:
    3796:	50 95       	com	r21
    3798:	40 95       	com	r20
    379a:	30 95       	com	r19
    379c:	21 95       	neg	r18
    379e:	3f 4f       	sbci	r19, 0xFF	; 255
    37a0:	4f 4f       	sbci	r20, 0xFF	; 255
    37a2:	5f 4f       	sbci	r21, 0xFF	; 255

000037a4 <__divmodsi4_exit>:
    37a4:	08 95       	ret

000037a6 <__divmodsi4_neg1>:
    37a6:	f6 f7       	brtc	.-4      	; 0x37a4 <__divmodsi4_exit>
    37a8:	90 95       	com	r25
    37aa:	80 95       	com	r24
    37ac:	70 95       	com	r23
    37ae:	61 95       	neg	r22
    37b0:	7f 4f       	sbci	r23, 0xFF	; 255
    37b2:	8f 4f       	sbci	r24, 0xFF	; 255
    37b4:	9f 4f       	sbci	r25, 0xFF	; 255
    37b6:	08 95       	ret

000037b8 <__prologue_saves__>:
    37b8:	2f 92       	push	r2
    37ba:	3f 92       	push	r3
    37bc:	4f 92       	push	r4
    37be:	5f 92       	push	r5
    37c0:	6f 92       	push	r6
    37c2:	7f 92       	push	r7
    37c4:	8f 92       	push	r8
    37c6:	9f 92       	push	r9
    37c8:	af 92       	push	r10
    37ca:	bf 92       	push	r11
    37cc:	cf 92       	push	r12
    37ce:	df 92       	push	r13
    37d0:	ef 92       	push	r14
    37d2:	ff 92       	push	r15
    37d4:	0f 93       	push	r16
    37d6:	1f 93       	push	r17
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	ca 1b       	sub	r28, r26
    37e2:	db 0b       	sbc	r29, r27
    37e4:	0f b6       	in	r0, 0x3f	; 63
    37e6:	f8 94       	cli
    37e8:	de bf       	out	0x3e, r29	; 62
    37ea:	0f be       	out	0x3f, r0	; 63
    37ec:	cd bf       	out	0x3d, r28	; 61
    37ee:	09 94       	ijmp

000037f0 <__epilogue_restores__>:
    37f0:	2a 88       	ldd	r2, Y+18	; 0x12
    37f2:	39 88       	ldd	r3, Y+17	; 0x11
    37f4:	48 88       	ldd	r4, Y+16	; 0x10
    37f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    37f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    37fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    37fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    37fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3800:	aa 84       	ldd	r10, Y+10	; 0x0a
    3802:	b9 84       	ldd	r11, Y+9	; 0x09
    3804:	c8 84       	ldd	r12, Y+8	; 0x08
    3806:	df 80       	ldd	r13, Y+7	; 0x07
    3808:	ee 80       	ldd	r14, Y+6	; 0x06
    380a:	fd 80       	ldd	r15, Y+5	; 0x05
    380c:	0c 81       	ldd	r16, Y+4	; 0x04
    380e:	1b 81       	ldd	r17, Y+3	; 0x03
    3810:	aa 81       	ldd	r26, Y+2	; 0x02
    3812:	b9 81       	ldd	r27, Y+1	; 0x01
    3814:	ce 0f       	add	r28, r30
    3816:	d1 1d       	adc	r29, r1
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	f8 94       	cli
    381c:	de bf       	out	0x3e, r29	; 62
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	cd bf       	out	0x3d, r28	; 61
    3822:	ed 01       	movw	r28, r26
    3824:	08 95       	ret

00003826 <_exit>:
    3826:	f8 94       	cli

00003828 <__stop_program>:
    3828:	ff cf       	rjmp	.-2      	; 0x3828 <__stop_program>
